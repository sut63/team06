// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/room"
)

// AppointmentResultsUpdate is the builder for updating AppointmentResults entities.
type AppointmentResultsUpdate struct {
	config
	hooks    []Hook
	mutation *AppointmentResultsMutation
}

// Where adds a new predicate for the AppointmentResultsUpdate builder.
func (aru *AppointmentResultsUpdate) Where(ps ...predicate.AppointmentResults) *AppointmentResultsUpdate {
	aru.mutation.predicates = append(aru.mutation.predicates, ps...)
	return aru
}

// SetCauseAppoint sets the "causeAppoint" field.
func (aru *AppointmentResultsUpdate) SetCauseAppoint(s string) *AppointmentResultsUpdate {
	aru.mutation.SetCauseAppoint(s)
	return aru
}

// SetAdvice sets the "advice" field.
func (aru *AppointmentResultsUpdate) SetAdvice(s string) *AppointmentResultsUpdate {
	aru.mutation.SetAdvice(s)
	return aru
}

// SetDateAppoint sets the "dateAppoint" field.
func (aru *AppointmentResultsUpdate) SetDateAppoint(t time.Time) *AppointmentResultsUpdate {
	aru.mutation.SetDateAppoint(t)
	return aru
}

// SetTimeAppoint sets the "timeAppoint" field.
func (aru *AppointmentResultsUpdate) SetTimeAppoint(t time.Time) *AppointmentResultsUpdate {
	aru.mutation.SetTimeAppoint(t)
	return aru
}

// SetAddtimeSave sets the "addtimeSave" field.
func (aru *AppointmentResultsUpdate) SetAddtimeSave(t time.Time) *AppointmentResultsUpdate {
	aru.mutation.SetAddtimeSave(t)
	return aru
}

// SetNillableAddtimeSave sets the "addtimeSave" field if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableAddtimeSave(t *time.Time) *AppointmentResultsUpdate {
	if t != nil {
		aru.SetAddtimeSave(*t)
	}
	return aru
}

// SetHourBeforeAppoint sets the "hourBeforeAppoint" field.
func (aru *AppointmentResultsUpdate) SetHourBeforeAppoint(i int) *AppointmentResultsUpdate {
	aru.mutation.ResetHourBeforeAppoint()
	aru.mutation.SetHourBeforeAppoint(i)
	return aru
}

// SetNillableHourBeforeAppoint sets the "hourBeforeAppoint" field if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableHourBeforeAppoint(i *int) *AppointmentResultsUpdate {
	if i != nil {
		aru.SetHourBeforeAppoint(*i)
	}
	return aru
}

// AddHourBeforeAppoint adds i to the "hourBeforeAppoint" field.
func (aru *AppointmentResultsUpdate) AddHourBeforeAppoint(i int) *AppointmentResultsUpdate {
	aru.mutation.AddHourBeforeAppoint(i)
	return aru
}

// SetMinuteBeforeAppoint sets the "minuteBeforeAppoint" field.
func (aru *AppointmentResultsUpdate) SetMinuteBeforeAppoint(i int) *AppointmentResultsUpdate {
	aru.mutation.ResetMinuteBeforeAppoint()
	aru.mutation.SetMinuteBeforeAppoint(i)
	return aru
}

// SetNillableMinuteBeforeAppoint sets the "minuteBeforeAppoint" field if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableMinuteBeforeAppoint(i *int) *AppointmentResultsUpdate {
	if i != nil {
		aru.SetMinuteBeforeAppoint(*i)
	}
	return aru
}

// AddMinuteBeforeAppoint adds i to the "minuteBeforeAppoint" field.
func (aru *AppointmentResultsUpdate) AddMinuteBeforeAppoint(i int) *AppointmentResultsUpdate {
	aru.mutation.AddMinuteBeforeAppoint(i)
	return aru
}

// SetAppointmentResultsToPatientID sets the "appointmentResultsToPatient" edge to the Patient entity by ID.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToPatientID(id int) *AppointmentResultsUpdate {
	aru.mutation.SetAppointmentResultsToPatientID(id)
	return aru
}

// SetNillableAppointmentResultsToPatientID sets the "appointmentResultsToPatient" edge to the Patient entity by ID if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableAppointmentResultsToPatientID(id *int) *AppointmentResultsUpdate {
	if id != nil {
		aru = aru.SetAppointmentResultsToPatientID(*id)
	}
	return aru
}

// SetAppointmentResultsToPatient sets the "appointmentResultsToPatient" edge to the Patient entity.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToPatient(p *Patient) *AppointmentResultsUpdate {
	return aru.SetAppointmentResultsToPatientID(p.ID)
}

// SetAppointmentResultsToNurseID sets the "appointmentResultsToNurse" edge to the Nurse entity by ID.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToNurseID(id int) *AppointmentResultsUpdate {
	aru.mutation.SetAppointmentResultsToNurseID(id)
	return aru
}

// SetNillableAppointmentResultsToNurseID sets the "appointmentResultsToNurse" edge to the Nurse entity by ID if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableAppointmentResultsToNurseID(id *int) *AppointmentResultsUpdate {
	if id != nil {
		aru = aru.SetAppointmentResultsToNurseID(*id)
	}
	return aru
}

// SetAppointmentResultsToNurse sets the "appointmentResultsToNurse" edge to the Nurse entity.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToNurse(n *Nurse) *AppointmentResultsUpdate {
	return aru.SetAppointmentResultsToNurseID(n.ID)
}

// SetAppointmentResultsToDoctorID sets the "appointmentResultsToDoctor" edge to the Doctor entity by ID.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToDoctorID(id int) *AppointmentResultsUpdate {
	aru.mutation.SetAppointmentResultsToDoctorID(id)
	return aru
}

// SetNillableAppointmentResultsToDoctorID sets the "appointmentResultsToDoctor" edge to the Doctor entity by ID if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableAppointmentResultsToDoctorID(id *int) *AppointmentResultsUpdate {
	if id != nil {
		aru = aru.SetAppointmentResultsToDoctorID(*id)
	}
	return aru
}

// SetAppointmentResultsToDoctor sets the "appointmentResultsToDoctor" edge to the Doctor entity.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToDoctor(d *Doctor) *AppointmentResultsUpdate {
	return aru.SetAppointmentResultsToDoctorID(d.ID)
}

// SetAppointmentResultsToRoomID sets the "appointmentResultsToRoom" edge to the Room entity by ID.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToRoomID(id int) *AppointmentResultsUpdate {
	aru.mutation.SetAppointmentResultsToRoomID(id)
	return aru
}

// SetNillableAppointmentResultsToRoomID sets the "appointmentResultsToRoom" edge to the Room entity by ID if the given value is not nil.
func (aru *AppointmentResultsUpdate) SetNillableAppointmentResultsToRoomID(id *int) *AppointmentResultsUpdate {
	if id != nil {
		aru = aru.SetAppointmentResultsToRoomID(*id)
	}
	return aru
}

// SetAppointmentResultsToRoom sets the "appointmentResultsToRoom" edge to the Room entity.
func (aru *AppointmentResultsUpdate) SetAppointmentResultsToRoom(r *Room) *AppointmentResultsUpdate {
	return aru.SetAppointmentResultsToRoomID(r.ID)
}

// Mutation returns the AppointmentResultsMutation object of the builder.
func (aru *AppointmentResultsUpdate) Mutation() *AppointmentResultsMutation {
	return aru.mutation
}

// ClearAppointmentResultsToPatient clears the "appointmentResultsToPatient" edge to the Patient entity.
func (aru *AppointmentResultsUpdate) ClearAppointmentResultsToPatient() *AppointmentResultsUpdate {
	aru.mutation.ClearAppointmentResultsToPatient()
	return aru
}

// ClearAppointmentResultsToNurse clears the "appointmentResultsToNurse" edge to the Nurse entity.
func (aru *AppointmentResultsUpdate) ClearAppointmentResultsToNurse() *AppointmentResultsUpdate {
	aru.mutation.ClearAppointmentResultsToNurse()
	return aru
}

// ClearAppointmentResultsToDoctor clears the "appointmentResultsToDoctor" edge to the Doctor entity.
func (aru *AppointmentResultsUpdate) ClearAppointmentResultsToDoctor() *AppointmentResultsUpdate {
	aru.mutation.ClearAppointmentResultsToDoctor()
	return aru
}

// ClearAppointmentResultsToRoom clears the "appointmentResultsToRoom" edge to the Room entity.
func (aru *AppointmentResultsUpdate) ClearAppointmentResultsToRoom() *AppointmentResultsUpdate {
	aru.mutation.ClearAppointmentResultsToRoom()
	return aru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AppointmentResultsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(aru.hooks) == 0 {
		if err = aru.check(); err != nil {
			return 0, err
		}
		affected, err = aru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentResultsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aru.check(); err != nil {
				return 0, err
			}
			aru.mutation = mutation
			affected, err = aru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(aru.hooks) - 1; i >= 0; i-- {
			mut = aru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AppointmentResultsUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AppointmentResultsUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AppointmentResultsUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aru *AppointmentResultsUpdate) check() error {
	if v, ok := aru.mutation.CauseAppoint(); ok {
		if err := appointmentresults.CauseAppointValidator(v); err != nil {
			return &ValidationError{Name: "causeAppoint", err: fmt.Errorf("ent: validator failed for field \"causeAppoint\": %w", err)}
		}
	}
	if v, ok := aru.mutation.Advice(); ok {
		if err := appointmentresults.AdviceValidator(v); err != nil {
			return &ValidationError{Name: "advice", err: fmt.Errorf("ent: validator failed for field \"advice\": %w", err)}
		}
	}
	if v, ok := aru.mutation.HourBeforeAppoint(); ok {
		if err := appointmentresults.HourBeforeAppointValidator(v); err != nil {
			return &ValidationError{Name: "hourBeforeAppoint", err: fmt.Errorf("ent: validator failed for field \"hourBeforeAppoint\": %w", err)}
		}
	}
	if v, ok := aru.mutation.MinuteBeforeAppoint(); ok {
		if err := appointmentresults.MinuteBeforeAppointValidator(v); err != nil {
			return &ValidationError{Name: "minuteBeforeAppoint", err: fmt.Errorf("ent: validator failed for field \"minuteBeforeAppoint\": %w", err)}
		}
	}
	return nil
}

func (aru *AppointmentResultsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointmentresults.Table,
			Columns: appointmentresults.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointmentresults.FieldID,
			},
		},
	}
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aru.mutation.CauseAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointmentresults.FieldCauseAppoint,
		})
	}
	if value, ok := aru.mutation.Advice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointmentresults.FieldAdvice,
		})
	}
	if value, ok := aru.mutation.DateAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointmentresults.FieldDateAppoint,
		})
	}
	if value, ok := aru.mutation.TimeAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointmentresults.FieldTimeAppoint,
		})
	}
	if value, ok := aru.mutation.AddtimeSave(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointmentresults.FieldAddtimeSave,
		})
	}
	if value, ok := aru.mutation.HourBeforeAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldHourBeforeAppoint,
		})
	}
	if value, ok := aru.mutation.AddedHourBeforeAppoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldHourBeforeAppoint,
		})
	}
	if value, ok := aru.mutation.MinuteBeforeAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldMinuteBeforeAppoint,
		})
	}
	if value, ok := aru.mutation.AddedMinuteBeforeAppoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldMinuteBeforeAppoint,
		})
	}
	if aru.mutation.AppointmentResultsToPatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToPatientTable,
			Columns: []string{appointmentresults.AppointmentResultsToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppointmentResultsToPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToPatientTable,
			Columns: []string{appointmentresults.AppointmentResultsToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AppointmentResultsToNurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToNurseTable,
			Columns: []string{appointmentresults.AppointmentResultsToNurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppointmentResultsToNurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToNurseTable,
			Columns: []string{appointmentresults.AppointmentResultsToNurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AppointmentResultsToDoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToDoctorTable,
			Columns: []string{appointmentresults.AppointmentResultsToDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppointmentResultsToDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToDoctorTable,
			Columns: []string{appointmentresults.AppointmentResultsToDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AppointmentResultsToRoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToRoomTable,
			Columns: []string{appointmentresults.AppointmentResultsToRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppointmentResultsToRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToRoomTable,
			Columns: []string{appointmentresults.AppointmentResultsToRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointmentresults.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AppointmentResultsUpdateOne is the builder for updating a single AppointmentResults entity.
type AppointmentResultsUpdateOne struct {
	config
	hooks    []Hook
	mutation *AppointmentResultsMutation
}

// SetCauseAppoint sets the "causeAppoint" field.
func (aruo *AppointmentResultsUpdateOne) SetCauseAppoint(s string) *AppointmentResultsUpdateOne {
	aruo.mutation.SetCauseAppoint(s)
	return aruo
}

// SetAdvice sets the "advice" field.
func (aruo *AppointmentResultsUpdateOne) SetAdvice(s string) *AppointmentResultsUpdateOne {
	aruo.mutation.SetAdvice(s)
	return aruo
}

// SetDateAppoint sets the "dateAppoint" field.
func (aruo *AppointmentResultsUpdateOne) SetDateAppoint(t time.Time) *AppointmentResultsUpdateOne {
	aruo.mutation.SetDateAppoint(t)
	return aruo
}

// SetTimeAppoint sets the "timeAppoint" field.
func (aruo *AppointmentResultsUpdateOne) SetTimeAppoint(t time.Time) *AppointmentResultsUpdateOne {
	aruo.mutation.SetTimeAppoint(t)
	return aruo
}

// SetAddtimeSave sets the "addtimeSave" field.
func (aruo *AppointmentResultsUpdateOne) SetAddtimeSave(t time.Time) *AppointmentResultsUpdateOne {
	aruo.mutation.SetAddtimeSave(t)
	return aruo
}

// SetNillableAddtimeSave sets the "addtimeSave" field if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableAddtimeSave(t *time.Time) *AppointmentResultsUpdateOne {
	if t != nil {
		aruo.SetAddtimeSave(*t)
	}
	return aruo
}

// SetHourBeforeAppoint sets the "hourBeforeAppoint" field.
func (aruo *AppointmentResultsUpdateOne) SetHourBeforeAppoint(i int) *AppointmentResultsUpdateOne {
	aruo.mutation.ResetHourBeforeAppoint()
	aruo.mutation.SetHourBeforeAppoint(i)
	return aruo
}

// SetNillableHourBeforeAppoint sets the "hourBeforeAppoint" field if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableHourBeforeAppoint(i *int) *AppointmentResultsUpdateOne {
	if i != nil {
		aruo.SetHourBeforeAppoint(*i)
	}
	return aruo
}

// AddHourBeforeAppoint adds i to the "hourBeforeAppoint" field.
func (aruo *AppointmentResultsUpdateOne) AddHourBeforeAppoint(i int) *AppointmentResultsUpdateOne {
	aruo.mutation.AddHourBeforeAppoint(i)
	return aruo
}

// SetMinuteBeforeAppoint sets the "minuteBeforeAppoint" field.
func (aruo *AppointmentResultsUpdateOne) SetMinuteBeforeAppoint(i int) *AppointmentResultsUpdateOne {
	aruo.mutation.ResetMinuteBeforeAppoint()
	aruo.mutation.SetMinuteBeforeAppoint(i)
	return aruo
}

// SetNillableMinuteBeforeAppoint sets the "minuteBeforeAppoint" field if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableMinuteBeforeAppoint(i *int) *AppointmentResultsUpdateOne {
	if i != nil {
		aruo.SetMinuteBeforeAppoint(*i)
	}
	return aruo
}

// AddMinuteBeforeAppoint adds i to the "minuteBeforeAppoint" field.
func (aruo *AppointmentResultsUpdateOne) AddMinuteBeforeAppoint(i int) *AppointmentResultsUpdateOne {
	aruo.mutation.AddMinuteBeforeAppoint(i)
	return aruo
}

// SetAppointmentResultsToPatientID sets the "appointmentResultsToPatient" edge to the Patient entity by ID.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToPatientID(id int) *AppointmentResultsUpdateOne {
	aruo.mutation.SetAppointmentResultsToPatientID(id)
	return aruo
}

// SetNillableAppointmentResultsToPatientID sets the "appointmentResultsToPatient" edge to the Patient entity by ID if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableAppointmentResultsToPatientID(id *int) *AppointmentResultsUpdateOne {
	if id != nil {
		aruo = aruo.SetAppointmentResultsToPatientID(*id)
	}
	return aruo
}

// SetAppointmentResultsToPatient sets the "appointmentResultsToPatient" edge to the Patient entity.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToPatient(p *Patient) *AppointmentResultsUpdateOne {
	return aruo.SetAppointmentResultsToPatientID(p.ID)
}

// SetAppointmentResultsToNurseID sets the "appointmentResultsToNurse" edge to the Nurse entity by ID.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToNurseID(id int) *AppointmentResultsUpdateOne {
	aruo.mutation.SetAppointmentResultsToNurseID(id)
	return aruo
}

// SetNillableAppointmentResultsToNurseID sets the "appointmentResultsToNurse" edge to the Nurse entity by ID if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableAppointmentResultsToNurseID(id *int) *AppointmentResultsUpdateOne {
	if id != nil {
		aruo = aruo.SetAppointmentResultsToNurseID(*id)
	}
	return aruo
}

// SetAppointmentResultsToNurse sets the "appointmentResultsToNurse" edge to the Nurse entity.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToNurse(n *Nurse) *AppointmentResultsUpdateOne {
	return aruo.SetAppointmentResultsToNurseID(n.ID)
}

// SetAppointmentResultsToDoctorID sets the "appointmentResultsToDoctor" edge to the Doctor entity by ID.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToDoctorID(id int) *AppointmentResultsUpdateOne {
	aruo.mutation.SetAppointmentResultsToDoctorID(id)
	return aruo
}

// SetNillableAppointmentResultsToDoctorID sets the "appointmentResultsToDoctor" edge to the Doctor entity by ID if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableAppointmentResultsToDoctorID(id *int) *AppointmentResultsUpdateOne {
	if id != nil {
		aruo = aruo.SetAppointmentResultsToDoctorID(*id)
	}
	return aruo
}

// SetAppointmentResultsToDoctor sets the "appointmentResultsToDoctor" edge to the Doctor entity.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToDoctor(d *Doctor) *AppointmentResultsUpdateOne {
	return aruo.SetAppointmentResultsToDoctorID(d.ID)
}

// SetAppointmentResultsToRoomID sets the "appointmentResultsToRoom" edge to the Room entity by ID.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToRoomID(id int) *AppointmentResultsUpdateOne {
	aruo.mutation.SetAppointmentResultsToRoomID(id)
	return aruo
}

// SetNillableAppointmentResultsToRoomID sets the "appointmentResultsToRoom" edge to the Room entity by ID if the given value is not nil.
func (aruo *AppointmentResultsUpdateOne) SetNillableAppointmentResultsToRoomID(id *int) *AppointmentResultsUpdateOne {
	if id != nil {
		aruo = aruo.SetAppointmentResultsToRoomID(*id)
	}
	return aruo
}

// SetAppointmentResultsToRoom sets the "appointmentResultsToRoom" edge to the Room entity.
func (aruo *AppointmentResultsUpdateOne) SetAppointmentResultsToRoom(r *Room) *AppointmentResultsUpdateOne {
	return aruo.SetAppointmentResultsToRoomID(r.ID)
}

// Mutation returns the AppointmentResultsMutation object of the builder.
func (aruo *AppointmentResultsUpdateOne) Mutation() *AppointmentResultsMutation {
	return aruo.mutation
}

// ClearAppointmentResultsToPatient clears the "appointmentResultsToPatient" edge to the Patient entity.
func (aruo *AppointmentResultsUpdateOne) ClearAppointmentResultsToPatient() *AppointmentResultsUpdateOne {
	aruo.mutation.ClearAppointmentResultsToPatient()
	return aruo
}

// ClearAppointmentResultsToNurse clears the "appointmentResultsToNurse" edge to the Nurse entity.
func (aruo *AppointmentResultsUpdateOne) ClearAppointmentResultsToNurse() *AppointmentResultsUpdateOne {
	aruo.mutation.ClearAppointmentResultsToNurse()
	return aruo
}

// ClearAppointmentResultsToDoctor clears the "appointmentResultsToDoctor" edge to the Doctor entity.
func (aruo *AppointmentResultsUpdateOne) ClearAppointmentResultsToDoctor() *AppointmentResultsUpdateOne {
	aruo.mutation.ClearAppointmentResultsToDoctor()
	return aruo
}

// ClearAppointmentResultsToRoom clears the "appointmentResultsToRoom" edge to the Room entity.
func (aruo *AppointmentResultsUpdateOne) ClearAppointmentResultsToRoom() *AppointmentResultsUpdateOne {
	aruo.mutation.ClearAppointmentResultsToRoom()
	return aruo
}

// Save executes the query and returns the updated AppointmentResults entity.
func (aruo *AppointmentResultsUpdateOne) Save(ctx context.Context) (*AppointmentResults, error) {
	var (
		err  error
		node *AppointmentResults
	)
	if len(aruo.hooks) == 0 {
		if err = aruo.check(); err != nil {
			return nil, err
		}
		node, err = aruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AppointmentResultsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = aruo.check(); err != nil {
				return nil, err
			}
			aruo.mutation = mutation
			node, err = aruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aruo.hooks) - 1; i >= 0; i-- {
			mut = aruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AppointmentResultsUpdateOne) SaveX(ctx context.Context) *AppointmentResults {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AppointmentResultsUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AppointmentResultsUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aruo *AppointmentResultsUpdateOne) check() error {
	if v, ok := aruo.mutation.CauseAppoint(); ok {
		if err := appointmentresults.CauseAppointValidator(v); err != nil {
			return &ValidationError{Name: "causeAppoint", err: fmt.Errorf("ent: validator failed for field \"causeAppoint\": %w", err)}
		}
	}
	if v, ok := aruo.mutation.Advice(); ok {
		if err := appointmentresults.AdviceValidator(v); err != nil {
			return &ValidationError{Name: "advice", err: fmt.Errorf("ent: validator failed for field \"advice\": %w", err)}
		}
	}
	if v, ok := aruo.mutation.HourBeforeAppoint(); ok {
		if err := appointmentresults.HourBeforeAppointValidator(v); err != nil {
			return &ValidationError{Name: "hourBeforeAppoint", err: fmt.Errorf("ent: validator failed for field \"hourBeforeAppoint\": %w", err)}
		}
	}
	if v, ok := aruo.mutation.MinuteBeforeAppoint(); ok {
		if err := appointmentresults.MinuteBeforeAppointValidator(v); err != nil {
			return &ValidationError{Name: "minuteBeforeAppoint", err: fmt.Errorf("ent: validator failed for field \"minuteBeforeAppoint\": %w", err)}
		}
	}
	return nil
}

func (aruo *AppointmentResultsUpdateOne) sqlSave(ctx context.Context) (_node *AppointmentResults, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointmentresults.Table,
			Columns: appointmentresults.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointmentresults.FieldID,
			},
		},
	}
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AppointmentResults.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := aruo.mutation.CauseAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointmentresults.FieldCauseAppoint,
		})
	}
	if value, ok := aruo.mutation.Advice(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: appointmentresults.FieldAdvice,
		})
	}
	if value, ok := aruo.mutation.DateAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointmentresults.FieldDateAppoint,
		})
	}
	if value, ok := aruo.mutation.TimeAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointmentresults.FieldTimeAppoint,
		})
	}
	if value, ok := aruo.mutation.AddtimeSave(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: appointmentresults.FieldAddtimeSave,
		})
	}
	if value, ok := aruo.mutation.HourBeforeAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldHourBeforeAppoint,
		})
	}
	if value, ok := aruo.mutation.AddedHourBeforeAppoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldHourBeforeAppoint,
		})
	}
	if value, ok := aruo.mutation.MinuteBeforeAppoint(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldMinuteBeforeAppoint,
		})
	}
	if value, ok := aruo.mutation.AddedMinuteBeforeAppoint(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: appointmentresults.FieldMinuteBeforeAppoint,
		})
	}
	if aruo.mutation.AppointmentResultsToPatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToPatientTable,
			Columns: []string{appointmentresults.AppointmentResultsToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppointmentResultsToPatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToPatientTable,
			Columns: []string{appointmentresults.AppointmentResultsToPatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AppointmentResultsToNurseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToNurseTable,
			Columns: []string{appointmentresults.AppointmentResultsToNurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppointmentResultsToNurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToNurseTable,
			Columns: []string{appointmentresults.AppointmentResultsToNurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: nurse.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AppointmentResultsToDoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToDoctorTable,
			Columns: []string{appointmentresults.AppointmentResultsToDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppointmentResultsToDoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToDoctorTable,
			Columns: []string{appointmentresults.AppointmentResultsToDoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AppointmentResultsToRoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToRoomTable,
			Columns: []string{appointmentresults.AppointmentResultsToRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppointmentResultsToRoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   appointmentresults.AppointmentResultsToRoomTable,
			Columns: []string{appointmentresults.AppointmentResultsToRoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: room.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AppointmentResults{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appointmentresults.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
