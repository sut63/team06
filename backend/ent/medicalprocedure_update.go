// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/medicalprocedure"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/proceduretype"
)

// MedicalProcedureUpdate is the builder for updating MedicalProcedure entities.
type MedicalProcedureUpdate struct {
	config
	hooks    []Hook
	mutation *MedicalProcedureMutation
}

// Where adds a new predicate for the MedicalProcedureUpdate builder.
func (mpu *MedicalProcedureUpdate) Where(ps ...predicate.MedicalProcedure) *MedicalProcedureUpdate {
	mpu.mutation.predicates = append(mpu.mutation.predicates, ps...)
	return mpu
}

// SetProcedureOrder sets the "procedureOrder" field.
func (mpu *MedicalProcedureUpdate) SetProcedureOrder(s string) *MedicalProcedureUpdate {
	mpu.mutation.SetProcedureOrder(s)
	return mpu
}

// SetProcedureRoom sets the "procedureRoom" field.
func (mpu *MedicalProcedureUpdate) SetProcedureRoom(s string) *MedicalProcedureUpdate {
	mpu.mutation.SetProcedureRoom(s)
	return mpu
}

// SetAddtime sets the "Addtime" field.
func (mpu *MedicalProcedureUpdate) SetAddtime(t time.Time) *MedicalProcedureUpdate {
	mpu.mutation.SetAddtime(t)
	return mpu
}

// SetProcedureDescripe sets the "procedureDescripe" field.
func (mpu *MedicalProcedureUpdate) SetProcedureDescripe(s string) *MedicalProcedureUpdate {
	mpu.mutation.SetProcedureDescripe(s)
	return mpu
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (mpu *MedicalProcedureUpdate) SetPatientID(id int) *MedicalProcedureUpdate {
	mpu.mutation.SetPatientID(id)
	return mpu
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (mpu *MedicalProcedureUpdate) SetNillablePatientID(id *int) *MedicalProcedureUpdate {
	if id != nil {
		mpu = mpu.SetPatientID(*id)
	}
	return mpu
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (mpu *MedicalProcedureUpdate) SetPatient(p *Patient) *MedicalProcedureUpdate {
	return mpu.SetPatientID(p.ID)
}

// SetProcedureTypeID sets the "ProcedureType" edge to the ProcedureType entity by ID.
func (mpu *MedicalProcedureUpdate) SetProcedureTypeID(id int) *MedicalProcedureUpdate {
	mpu.mutation.SetProcedureTypeID(id)
	return mpu
}

// SetNillableProcedureTypeID sets the "ProcedureType" edge to the ProcedureType entity by ID if the given value is not nil.
func (mpu *MedicalProcedureUpdate) SetNillableProcedureTypeID(id *int) *MedicalProcedureUpdate {
	if id != nil {
		mpu = mpu.SetProcedureTypeID(*id)
	}
	return mpu
}

// SetProcedureType sets the "ProcedureType" edge to the ProcedureType entity.
func (mpu *MedicalProcedureUpdate) SetProcedureType(p *ProcedureType) *MedicalProcedureUpdate {
	return mpu.SetProcedureTypeID(p.ID)
}

// SetDoctorID sets the "Doctor" edge to the Doctor entity by ID.
func (mpu *MedicalProcedureUpdate) SetDoctorID(id int) *MedicalProcedureUpdate {
	mpu.mutation.SetDoctorID(id)
	return mpu
}

// SetNillableDoctorID sets the "Doctor" edge to the Doctor entity by ID if the given value is not nil.
func (mpu *MedicalProcedureUpdate) SetNillableDoctorID(id *int) *MedicalProcedureUpdate {
	if id != nil {
		mpu = mpu.SetDoctorID(*id)
	}
	return mpu
}

// SetDoctor sets the "Doctor" edge to the Doctor entity.
func (mpu *MedicalProcedureUpdate) SetDoctor(d *Doctor) *MedicalProcedureUpdate {
	return mpu.SetDoctorID(d.ID)
}

// Mutation returns the MedicalProcedureMutation object of the builder.
func (mpu *MedicalProcedureUpdate) Mutation() *MedicalProcedureMutation {
	return mpu.mutation
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (mpu *MedicalProcedureUpdate) ClearPatient() *MedicalProcedureUpdate {
	mpu.mutation.ClearPatient()
	return mpu
}

// ClearProcedureType clears the "ProcedureType" edge to the ProcedureType entity.
func (mpu *MedicalProcedureUpdate) ClearProcedureType() *MedicalProcedureUpdate {
	mpu.mutation.ClearProcedureType()
	return mpu
}

// ClearDoctor clears the "Doctor" edge to the Doctor entity.
func (mpu *MedicalProcedureUpdate) ClearDoctor() *MedicalProcedureUpdate {
	mpu.mutation.ClearDoctor()
	return mpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mpu *MedicalProcedureUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mpu.hooks) == 0 {
		if err = mpu.check(); err != nil {
			return 0, err
		}
		affected, err = mpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpu.check(); err != nil {
				return 0, err
			}
			mpu.mutation = mutation
			affected, err = mpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mpu.hooks) - 1; i >= 0; i-- {
			mut = mpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MedicalProcedureUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MedicalProcedureUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MedicalProcedureUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpu *MedicalProcedureUpdate) check() error {
	if v, ok := mpu.mutation.ProcedureOrder(); ok {
		if err := medicalprocedure.ProcedureOrderValidator(v); err != nil {
			return &ValidationError{Name: "procedureOrder", err: fmt.Errorf("ent: validator failed for field \"procedureOrder\": %w", err)}
		}
	}
	if v, ok := mpu.mutation.ProcedureRoom(); ok {
		if err := medicalprocedure.ProcedureRoomValidator(v); err != nil {
			return &ValidationError{Name: "procedureRoom", err: fmt.Errorf("ent: validator failed for field \"procedureRoom\": %w", err)}
		}
	}
	if v, ok := mpu.mutation.ProcedureDescripe(); ok {
		if err := medicalprocedure.ProcedureDescripeValidator(v); err != nil {
			return &ValidationError{Name: "procedureDescripe", err: fmt.Errorf("ent: validator failed for field \"procedureDescripe\": %w", err)}
		}
	}
	return nil
}

func (mpu *MedicalProcedureUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalprocedure.Table,
			Columns: medicalprocedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalprocedure.FieldID,
			},
		},
	}
	if ps := mpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.ProcedureOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalprocedure.FieldProcedureOrder,
		})
	}
	if value, ok := mpu.mutation.ProcedureRoom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalprocedure.FieldProcedureRoom,
		})
	}
	if value, ok := mpu.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: medicalprocedure.FieldAddtime,
		})
	}
	if value, ok := mpu.mutation.ProcedureDescripe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalprocedure.FieldProcedureDescripe,
		})
	}
	if mpu.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.PatientTable,
			Columns: []string{medicalprocedure.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.PatientTable,
			Columns: []string{medicalprocedure.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.ProcedureTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.ProcedureTypeTable,
			Columns: []string{medicalprocedure.ProcedureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proceduretype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.ProcedureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.ProcedureTypeTable,
			Columns: []string{medicalprocedure.ProcedureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proceduretype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpu.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.DoctorTable,
			Columns: []string{medicalprocedure.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpu.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.DoctorTable,
			Columns: []string{medicalprocedure.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalprocedure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MedicalProcedureUpdateOne is the builder for updating a single MedicalProcedure entity.
type MedicalProcedureUpdateOne struct {
	config
	hooks    []Hook
	mutation *MedicalProcedureMutation
}

// SetProcedureOrder sets the "procedureOrder" field.
func (mpuo *MedicalProcedureUpdateOne) SetProcedureOrder(s string) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetProcedureOrder(s)
	return mpuo
}

// SetProcedureRoom sets the "procedureRoom" field.
func (mpuo *MedicalProcedureUpdateOne) SetProcedureRoom(s string) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetProcedureRoom(s)
	return mpuo
}

// SetAddtime sets the "Addtime" field.
func (mpuo *MedicalProcedureUpdateOne) SetAddtime(t time.Time) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetAddtime(t)
	return mpuo
}

// SetProcedureDescripe sets the "procedureDescripe" field.
func (mpuo *MedicalProcedureUpdateOne) SetProcedureDescripe(s string) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetProcedureDescripe(s)
	return mpuo
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (mpuo *MedicalProcedureUpdateOne) SetPatientID(id int) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetPatientID(id)
	return mpuo
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (mpuo *MedicalProcedureUpdateOne) SetNillablePatientID(id *int) *MedicalProcedureUpdateOne {
	if id != nil {
		mpuo = mpuo.SetPatientID(*id)
	}
	return mpuo
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (mpuo *MedicalProcedureUpdateOne) SetPatient(p *Patient) *MedicalProcedureUpdateOne {
	return mpuo.SetPatientID(p.ID)
}

// SetProcedureTypeID sets the "ProcedureType" edge to the ProcedureType entity by ID.
func (mpuo *MedicalProcedureUpdateOne) SetProcedureTypeID(id int) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetProcedureTypeID(id)
	return mpuo
}

// SetNillableProcedureTypeID sets the "ProcedureType" edge to the ProcedureType entity by ID if the given value is not nil.
func (mpuo *MedicalProcedureUpdateOne) SetNillableProcedureTypeID(id *int) *MedicalProcedureUpdateOne {
	if id != nil {
		mpuo = mpuo.SetProcedureTypeID(*id)
	}
	return mpuo
}

// SetProcedureType sets the "ProcedureType" edge to the ProcedureType entity.
func (mpuo *MedicalProcedureUpdateOne) SetProcedureType(p *ProcedureType) *MedicalProcedureUpdateOne {
	return mpuo.SetProcedureTypeID(p.ID)
}

// SetDoctorID sets the "Doctor" edge to the Doctor entity by ID.
func (mpuo *MedicalProcedureUpdateOne) SetDoctorID(id int) *MedicalProcedureUpdateOne {
	mpuo.mutation.SetDoctorID(id)
	return mpuo
}

// SetNillableDoctorID sets the "Doctor" edge to the Doctor entity by ID if the given value is not nil.
func (mpuo *MedicalProcedureUpdateOne) SetNillableDoctorID(id *int) *MedicalProcedureUpdateOne {
	if id != nil {
		mpuo = mpuo.SetDoctorID(*id)
	}
	return mpuo
}

// SetDoctor sets the "Doctor" edge to the Doctor entity.
func (mpuo *MedicalProcedureUpdateOne) SetDoctor(d *Doctor) *MedicalProcedureUpdateOne {
	return mpuo.SetDoctorID(d.ID)
}

// Mutation returns the MedicalProcedureMutation object of the builder.
func (mpuo *MedicalProcedureUpdateOne) Mutation() *MedicalProcedureMutation {
	return mpuo.mutation
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (mpuo *MedicalProcedureUpdateOne) ClearPatient() *MedicalProcedureUpdateOne {
	mpuo.mutation.ClearPatient()
	return mpuo
}

// ClearProcedureType clears the "ProcedureType" edge to the ProcedureType entity.
func (mpuo *MedicalProcedureUpdateOne) ClearProcedureType() *MedicalProcedureUpdateOne {
	mpuo.mutation.ClearProcedureType()
	return mpuo
}

// ClearDoctor clears the "Doctor" edge to the Doctor entity.
func (mpuo *MedicalProcedureUpdateOne) ClearDoctor() *MedicalProcedureUpdateOne {
	mpuo.mutation.ClearDoctor()
	return mpuo
}

// Save executes the query and returns the updated MedicalProcedure entity.
func (mpuo *MedicalProcedureUpdateOne) Save(ctx context.Context) (*MedicalProcedure, error) {
	var (
		err  error
		node *MedicalProcedure
	)
	if len(mpuo.hooks) == 0 {
		if err = mpuo.check(); err != nil {
			return nil, err
		}
		node, err = mpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MedicalProcedureMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mpuo.check(); err != nil {
				return nil, err
			}
			mpuo.mutation = mutation
			node, err = mpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mpuo.hooks) - 1; i >= 0; i-- {
			mut = mpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MedicalProcedureUpdateOne) SaveX(ctx context.Context) *MedicalProcedure {
	node, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mpuo *MedicalProcedureUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MedicalProcedureUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mpuo *MedicalProcedureUpdateOne) check() error {
	if v, ok := mpuo.mutation.ProcedureOrder(); ok {
		if err := medicalprocedure.ProcedureOrderValidator(v); err != nil {
			return &ValidationError{Name: "procedureOrder", err: fmt.Errorf("ent: validator failed for field \"procedureOrder\": %w", err)}
		}
	}
	if v, ok := mpuo.mutation.ProcedureRoom(); ok {
		if err := medicalprocedure.ProcedureRoomValidator(v); err != nil {
			return &ValidationError{Name: "procedureRoom", err: fmt.Errorf("ent: validator failed for field \"procedureRoom\": %w", err)}
		}
	}
	if v, ok := mpuo.mutation.ProcedureDescripe(); ok {
		if err := medicalprocedure.ProcedureDescripeValidator(v); err != nil {
			return &ValidationError{Name: "procedureDescripe", err: fmt.Errorf("ent: validator failed for field \"procedureDescripe\": %w", err)}
		}
	}
	return nil
}

func (mpuo *MedicalProcedureUpdateOne) sqlSave(ctx context.Context) (_node *MedicalProcedure, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   medicalprocedure.Table,
			Columns: medicalprocedure.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: medicalprocedure.FieldID,
			},
		},
	}
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing MedicalProcedure.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := mpuo.mutation.ProcedureOrder(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalprocedure.FieldProcedureOrder,
		})
	}
	if value, ok := mpuo.mutation.ProcedureRoom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalprocedure.FieldProcedureRoom,
		})
	}
	if value, ok := mpuo.mutation.Addtime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: medicalprocedure.FieldAddtime,
		})
	}
	if value, ok := mpuo.mutation.ProcedureDescripe(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: medicalprocedure.FieldProcedureDescripe,
		})
	}
	if mpuo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.PatientTable,
			Columns: []string{medicalprocedure.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.PatientTable,
			Columns: []string{medicalprocedure.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.ProcedureTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.ProcedureTypeTable,
			Columns: []string{medicalprocedure.ProcedureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proceduretype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.ProcedureTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.ProcedureTypeTable,
			Columns: []string{medicalprocedure.ProcedureTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: proceduretype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mpuo.mutation.DoctorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.DoctorTable,
			Columns: []string{medicalprocedure.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mpuo.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   medicalprocedure.DoctorTable,
			Columns: []string{medicalprocedure.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &MedicalProcedure{config: mpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{medicalprocedure.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
