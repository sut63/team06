// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/hospital"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/righttotreatment"
	"github.com/team06/app/ent/righttotreatmenttype"
)

// RightToTreatment is the model entity for the RightToTreatment schema.
type RightToTreatment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StartTime holds the value of the "StartTime" field.
	StartTime time.Time `json:"StartTime,omitempty"`
	// EndTime holds the value of the "EndTime" field.
	EndTime time.Time `json:"EndTime,omitempty"`
	// Tel holds the value of the "tel" field.
	Tel string `json:"tel,omitempty"`
	// Idennum holds the value of the "idennum" field.
	Idennum string `json:"idennum,omitempty"`
	// Age holds the value of the "age" field.
	Age int `json:"age,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RightToTreatmentQuery when eager-loading is set.
	Edges                                 RightToTreatmentEdges `json:"edges"`
	hospital_hospital                     *int
	patient_patient_to_right_to_treatment *int
	right_to_treatment_type_type          *int
}

// RightToTreatmentEdges holds the relations/edges for other nodes in the graph.
type RightToTreatmentEdges struct {
	// Hospital holds the value of the Hospital edge.
	Hospital *Hospital
	// RightToTreatmentType holds the value of the RightToTreatmentType edge.
	RightToTreatmentType *RightToTreatmentType
	// Patient holds the value of the Patient edge.
	Patient *Patient
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// HospitalOrErr returns the Hospital value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RightToTreatmentEdges) HospitalOrErr() (*Hospital, error) {
	if e.loadedTypes[0] {
		if e.Hospital == nil {
			// The edge Hospital was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: hospital.Label}
		}
		return e.Hospital, nil
	}
	return nil, &NotLoadedError{edge: "Hospital"}
}

// RightToTreatmentTypeOrErr returns the RightToTreatmentType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RightToTreatmentEdges) RightToTreatmentTypeOrErr() (*RightToTreatmentType, error) {
	if e.loadedTypes[1] {
		if e.RightToTreatmentType == nil {
			// The edge RightToTreatmentType was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: righttotreatmenttype.Label}
		}
		return e.RightToTreatmentType, nil
	}
	return nil, &NotLoadedError{edge: "RightToTreatmentType"}
}

// PatientOrErr returns the Patient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RightToTreatmentEdges) PatientOrErr() (*Patient, error) {
	if e.loadedTypes[2] {
		if e.Patient == nil {
			// The edge Patient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.Patient, nil
	}
	return nil, &NotLoadedError{edge: "Patient"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RightToTreatment) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case righttotreatment.FieldID, righttotreatment.FieldAge:
			values[i] = &sql.NullInt64{}
		case righttotreatment.FieldTel, righttotreatment.FieldIdennum:
			values[i] = &sql.NullString{}
		case righttotreatment.FieldStartTime, righttotreatment.FieldEndTime:
			values[i] = &sql.NullTime{}
		case righttotreatment.ForeignKeys[0]: // hospital_hospital
			values[i] = &sql.NullInt64{}
		case righttotreatment.ForeignKeys[1]: // patient_patient_to_right_to_treatment
			values[i] = &sql.NullInt64{}
		case righttotreatment.ForeignKeys[2]: // right_to_treatment_type_type
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type RightToTreatment", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RightToTreatment fields.
func (rtt *RightToTreatment) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case righttotreatment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rtt.ID = int(value.Int64)
		case righttotreatment.FieldStartTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field StartTime", values[i])
			} else if value.Valid {
				rtt.StartTime = value.Time
			}
		case righttotreatment.FieldEndTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field EndTime", values[i])
			} else if value.Valid {
				rtt.EndTime = value.Time
			}
		case righttotreatment.FieldTel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tel", values[i])
			} else if value.Valid {
				rtt.Tel = value.String
			}
		case righttotreatment.FieldIdennum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idennum", values[i])
			} else if value.Valid {
				rtt.Idennum = value.String
			}
		case righttotreatment.FieldAge:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field age", values[i])
			} else if value.Valid {
				rtt.Age = int(value.Int64)
			}
		case righttotreatment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field hospital_hospital", value)
			} else if value.Valid {
				rtt.hospital_hospital = new(int)
				*rtt.hospital_hospital = int(value.Int64)
			}
		case righttotreatment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field patient_patient_to_right_to_treatment", value)
			} else if value.Valid {
				rtt.patient_patient_to_right_to_treatment = new(int)
				*rtt.patient_patient_to_right_to_treatment = int(value.Int64)
			}
		case righttotreatment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field right_to_treatment_type_type", value)
			} else if value.Valid {
				rtt.right_to_treatment_type_type = new(int)
				*rtt.right_to_treatment_type_type = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryHospital queries the "Hospital" edge of the RightToTreatment entity.
func (rtt *RightToTreatment) QueryHospital() *HospitalQuery {
	return (&RightToTreatmentClient{config: rtt.config}).QueryHospital(rtt)
}

// QueryRightToTreatmentType queries the "RightToTreatmentType" edge of the RightToTreatment entity.
func (rtt *RightToTreatment) QueryRightToTreatmentType() *RightToTreatmentTypeQuery {
	return (&RightToTreatmentClient{config: rtt.config}).QueryRightToTreatmentType(rtt)
}

// QueryPatient queries the "Patient" edge of the RightToTreatment entity.
func (rtt *RightToTreatment) QueryPatient() *PatientQuery {
	return (&RightToTreatmentClient{config: rtt.config}).QueryPatient(rtt)
}

// Update returns a builder for updating this RightToTreatment.
// Note that you need to call RightToTreatment.Unwrap() before calling this method if this RightToTreatment
// was returned from a transaction, and the transaction was committed or rolled back.
func (rtt *RightToTreatment) Update() *RightToTreatmentUpdateOne {
	return (&RightToTreatmentClient{config: rtt.config}).UpdateOne(rtt)
}

// Unwrap unwraps the RightToTreatment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rtt *RightToTreatment) Unwrap() *RightToTreatment {
	tx, ok := rtt.config.driver.(*txDriver)
	if !ok {
		panic("ent: RightToTreatment is not a transactional entity")
	}
	rtt.config.driver = tx.drv
	return rtt
}

// String implements the fmt.Stringer.
func (rtt *RightToTreatment) String() string {
	var builder strings.Builder
	builder.WriteString("RightToTreatment(")
	builder.WriteString(fmt.Sprintf("id=%v", rtt.ID))
	builder.WriteString(", StartTime=")
	builder.WriteString(rtt.StartTime.Format(time.ANSIC))
	builder.WriteString(", EndTime=")
	builder.WriteString(rtt.EndTime.Format(time.ANSIC))
	builder.WriteString(", tel=")
	builder.WriteString(rtt.Tel)
	builder.WriteString(", idennum=")
	builder.WriteString(rtt.Idennum)
	builder.WriteString(", age=")
	builder.WriteString(fmt.Sprintf("%v", rtt.Age))
	builder.WriteByte(')')
	return builder.String()
}

// RightToTreatments is a parsable slice of RightToTreatment.
type RightToTreatments []*RightToTreatment

func (rtt RightToTreatments) config(cfg config) {
	for _i := range rtt {
		rtt[_i].config = cfg
	}
}
