// Code generated by entc, DO NOT EDIT.

package triageresult

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/team06/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Symptom applies equality check predicate on the "symptom" field. It's identical to SymptomEQ.
func Symptom(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptom), v))
	})
}

// TriageDate applies equality check predicate on the "triageDate" field. It's identical to TriageDateEQ.
func TriageDate(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTriageDate), v))
	})
}

// SymptomEQ applies the EQ predicate on the "symptom" field.
func SymptomEQ(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymptom), v))
	})
}

// SymptomNEQ applies the NEQ predicate on the "symptom" field.
func SymptomNEQ(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymptom), v))
	})
}

// SymptomIn applies the In predicate on the "symptom" field.
func SymptomIn(vs ...string) predicate.TriageResult {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TriageResult(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSymptom), v...))
	})
}

// SymptomNotIn applies the NotIn predicate on the "symptom" field.
func SymptomNotIn(vs ...string) predicate.TriageResult {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TriageResult(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSymptom), v...))
	})
}

// SymptomGT applies the GT predicate on the "symptom" field.
func SymptomGT(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymptom), v))
	})
}

// SymptomGTE applies the GTE predicate on the "symptom" field.
func SymptomGTE(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymptom), v))
	})
}

// SymptomLT applies the LT predicate on the "symptom" field.
func SymptomLT(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymptom), v))
	})
}

// SymptomLTE applies the LTE predicate on the "symptom" field.
func SymptomLTE(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymptom), v))
	})
}

// SymptomContains applies the Contains predicate on the "symptom" field.
func SymptomContains(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymptom), v))
	})
}

// SymptomHasPrefix applies the HasPrefix predicate on the "symptom" field.
func SymptomHasPrefix(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymptom), v))
	})
}

// SymptomHasSuffix applies the HasSuffix predicate on the "symptom" field.
func SymptomHasSuffix(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymptom), v))
	})
}

// SymptomEqualFold applies the EqualFold predicate on the "symptom" field.
func SymptomEqualFold(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymptom), v))
	})
}

// SymptomContainsFold applies the ContainsFold predicate on the "symptom" field.
func SymptomContainsFold(v string) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymptom), v))
	})
}

// TriageDateEQ applies the EQ predicate on the "triageDate" field.
func TriageDateEQ(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTriageDate), v))
	})
}

// TriageDateNEQ applies the NEQ predicate on the "triageDate" field.
func TriageDateNEQ(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTriageDate), v))
	})
}

// TriageDateIn applies the In predicate on the "triageDate" field.
func TriageDateIn(vs ...time.Time) predicate.TriageResult {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TriageResult(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTriageDate), v...))
	})
}

// TriageDateNotIn applies the NotIn predicate on the "triageDate" field.
func TriageDateNotIn(vs ...time.Time) predicate.TriageResult {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.TriageResult(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTriageDate), v...))
	})
}

// TriageDateGT applies the GT predicate on the "triageDate" field.
func TriageDateGT(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTriageDate), v))
	})
}

// TriageDateGTE applies the GTE predicate on the "triageDate" field.
func TriageDateGTE(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTriageDate), v))
	})
}

// TriageDateLT applies the LT predicate on the "triageDate" field.
func TriageDateLT(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTriageDate), v))
	})
}

// TriageDateLTE applies the LTE predicate on the "triageDate" field.
func TriageDateLTE(v time.Time) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTriageDate), v))
	})
}

// HasUrgencyLevel applies the HasEdge predicate on the "urgencyLevel" edge.
func HasUrgencyLevel() predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UrgencyLevelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UrgencyLevelTable, UrgencyLevelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUrgencyLevelWith applies the HasEdge predicate on the "urgencyLevel" edge with a given conditions (other predicates).
func HasUrgencyLevelWith(preds ...predicate.UrgencyLevel) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UrgencyLevelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UrgencyLevelTable, UrgencyLevelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DepartmentInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNurse applies the HasEdge predicate on the "nurse" edge.
func HasNurse() predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseWith applies the HasEdge predicate on the "nurse" edge with a given conditions (other predicates).
func HasNurseWith(preds ...predicate.Nurse) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "patient" edge.
func HasPatient() predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TriageResult) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TriageResult) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TriageResult) predicate.TriageResult {
	return predicate.TriageResult(func(s *sql.Selector) {
		p(s.Not())
	})
}
