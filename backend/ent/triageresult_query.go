// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/department"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/triageresult"
	"github.com/team06/app/ent/urgencylevel"
)

// TriageResultQuery is the builder for querying TriageResult entities.
type TriageResultQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.TriageResult
	// eager-loading edges.
	withUrgencyLevel *UrgencyLevelQuery
	withDepartment   *DepartmentQuery
	withNurse        *NurseQuery
	withPatient      *PatientQuery
	withFKs          bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the TriageResultQuery builder.
func (trq *TriageResultQuery) Where(ps ...predicate.TriageResult) *TriageResultQuery {
	trq.predicates = append(trq.predicates, ps...)
	return trq
}

// Limit adds a limit step to the query.
func (trq *TriageResultQuery) Limit(limit int) *TriageResultQuery {
	trq.limit = &limit
	return trq
}

// Offset adds an offset step to the query.
func (trq *TriageResultQuery) Offset(offset int) *TriageResultQuery {
	trq.offset = &offset
	return trq
}

// Order adds an order step to the query.
func (trq *TriageResultQuery) Order(o ...OrderFunc) *TriageResultQuery {
	trq.order = append(trq.order, o...)
	return trq
}

// QueryUrgencyLevel chains the current query on the "urgencyLevel" edge.
func (trq *TriageResultQuery) QueryUrgencyLevel() *UrgencyLevelQuery {
	query := &UrgencyLevelQuery{config: trq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, selector),
			sqlgraph.To(urgencylevel.Table, urgencylevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.UrgencyLevelTable, triageresult.UrgencyLevelColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDepartment chains the current query on the "department" edge.
func (trq *TriageResultQuery) QueryDepartment() *DepartmentQuery {
	query := &DepartmentQuery{config: trq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, selector),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.DepartmentTable, triageresult.DepartmentColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNurse chains the current query on the "nurse" edge.
func (trq *TriageResultQuery) QueryNurse() *NurseQuery {
	query := &NurseQuery{config: trq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, selector),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.NurseTable, triageresult.NurseColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPatient chains the current query on the "patient" edge.
func (trq *TriageResultQuery) QueryPatient() *PatientQuery {
	query := &PatientQuery{config: trq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := trq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, selector),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.PatientTable, triageresult.PatientColumn),
		)
		fromU = sqlgraph.SetNeighbors(trq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first TriageResult entity from the query.
// Returns a *NotFoundError when no TriageResult was found.
func (trq *TriageResultQuery) First(ctx context.Context) (*TriageResult, error) {
	nodes, err := trq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{triageresult.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (trq *TriageResultQuery) FirstX(ctx context.Context) *TriageResult {
	node, err := trq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first TriageResult ID from the query.
// Returns a *NotFoundError when no TriageResult ID was found.
func (trq *TriageResultQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{triageresult.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (trq *TriageResultQuery) FirstIDX(ctx context.Context) int {
	id, err := trq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single TriageResult entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one TriageResult entity is not found.
// Returns a *NotFoundError when no TriageResult entities are found.
func (trq *TriageResultQuery) Only(ctx context.Context) (*TriageResult, error) {
	nodes, err := trq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{triageresult.Label}
	default:
		return nil, &NotSingularError{triageresult.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (trq *TriageResultQuery) OnlyX(ctx context.Context) *TriageResult {
	node, err := trq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only TriageResult ID in the query.
// Returns a *NotSingularError when exactly one TriageResult ID is not found.
// Returns a *NotFoundError when no entities are found.
func (trq *TriageResultQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = trq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = &NotSingularError{triageresult.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (trq *TriageResultQuery) OnlyIDX(ctx context.Context) int {
	id, err := trq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of TriageResults.
func (trq *TriageResultQuery) All(ctx context.Context) ([]*TriageResult, error) {
	if err := trq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return trq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (trq *TriageResultQuery) AllX(ctx context.Context) []*TriageResult {
	nodes, err := trq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of TriageResult IDs.
func (trq *TriageResultQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := trq.Select(triageresult.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (trq *TriageResultQuery) IDsX(ctx context.Context) []int {
	ids, err := trq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (trq *TriageResultQuery) Count(ctx context.Context) (int, error) {
	if err := trq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return trq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (trq *TriageResultQuery) CountX(ctx context.Context) int {
	count, err := trq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (trq *TriageResultQuery) Exist(ctx context.Context) (bool, error) {
	if err := trq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return trq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (trq *TriageResultQuery) ExistX(ctx context.Context) bool {
	exist, err := trq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the TriageResultQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (trq *TriageResultQuery) Clone() *TriageResultQuery {
	if trq == nil {
		return nil
	}
	return &TriageResultQuery{
		config:           trq.config,
		limit:            trq.limit,
		offset:           trq.offset,
		order:            append([]OrderFunc{}, trq.order...),
		predicates:       append([]predicate.TriageResult{}, trq.predicates...),
		withUrgencyLevel: trq.withUrgencyLevel.Clone(),
		withDepartment:   trq.withDepartment.Clone(),
		withNurse:        trq.withNurse.Clone(),
		withPatient:      trq.withPatient.Clone(),
		// clone intermediate query.
		sql:  trq.sql.Clone(),
		path: trq.path,
	}
}

// WithUrgencyLevel tells the query-builder to eager-load the nodes that are connected to
// the "urgencyLevel" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TriageResultQuery) WithUrgencyLevel(opts ...func(*UrgencyLevelQuery)) *TriageResultQuery {
	query := &UrgencyLevelQuery{config: trq.config}
	for _, opt := range opts {
		opt(query)
	}
	trq.withUrgencyLevel = query
	return trq
}

// WithDepartment tells the query-builder to eager-load the nodes that are connected to
// the "department" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TriageResultQuery) WithDepartment(opts ...func(*DepartmentQuery)) *TriageResultQuery {
	query := &DepartmentQuery{config: trq.config}
	for _, opt := range opts {
		opt(query)
	}
	trq.withDepartment = query
	return trq
}

// WithNurse tells the query-builder to eager-load the nodes that are connected to
// the "nurse" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TriageResultQuery) WithNurse(opts ...func(*NurseQuery)) *TriageResultQuery {
	query := &NurseQuery{config: trq.config}
	for _, opt := range opts {
		opt(query)
	}
	trq.withNurse = query
	return trq
}

// WithPatient tells the query-builder to eager-load the nodes that are connected to
// the "patient" edge. The optional arguments are used to configure the query builder of the edge.
func (trq *TriageResultQuery) WithPatient(opts ...func(*PatientQuery)) *TriageResultQuery {
	query := &PatientQuery{config: trq.config}
	for _, opt := range opts {
		opt(query)
	}
	trq.withPatient = query
	return trq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Height float64 `json:"height,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.TriageResult.Query().
//		GroupBy(triageresult.FieldHeight).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (trq *TriageResultQuery) GroupBy(field string, fields ...string) *TriageResultGroupBy {
	group := &TriageResultGroupBy{config: trq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := trq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return trq.sqlQuery(), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Height float64 `json:"height,omitempty"`
//	}
//
//	client.TriageResult.Query().
//		Select(triageresult.FieldHeight).
//		Scan(ctx, &v)
//
func (trq *TriageResultQuery) Select(field string, fields ...string) *TriageResultSelect {
	trq.fields = append([]string{field}, fields...)
	return &TriageResultSelect{TriageResultQuery: trq}
}

func (trq *TriageResultQuery) prepareQuery(ctx context.Context) error {
	for _, f := range trq.fields {
		if !triageresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if trq.path != nil {
		prev, err := trq.path(ctx)
		if err != nil {
			return err
		}
		trq.sql = prev
	}
	return nil
}

func (trq *TriageResultQuery) sqlAll(ctx context.Context) ([]*TriageResult, error) {
	var (
		nodes       = []*TriageResult{}
		withFKs     = trq.withFKs
		_spec       = trq.querySpec()
		loadedTypes = [4]bool{
			trq.withUrgencyLevel != nil,
			trq.withDepartment != nil,
			trq.withNurse != nil,
			trq.withPatient != nil,
		}
	)
	if trq.withUrgencyLevel != nil || trq.withDepartment != nil || trq.withNurse != nil || trq.withPatient != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, triageresult.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &TriageResult{config: trq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, trq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := trq.withUrgencyLevel; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TriageResult)
		for i := range nodes {
			if fk := nodes[i].urgency_level_triage_result; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(urgencylevel.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "urgency_level_triage_result" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.UrgencyLevel = n
			}
		}
	}

	if query := trq.withDepartment; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TriageResult)
		for i := range nodes {
			if fk := nodes[i].department_triage_result; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(department.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "department_triage_result" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Department = n
			}
		}
	}

	if query := trq.withNurse; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TriageResult)
		for i := range nodes {
			if fk := nodes[i].nurse_triage_result; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(nurse.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "nurse_triage_result" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Nurse = n
			}
		}
	}

	if query := trq.withPatient; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*TriageResult)
		for i := range nodes {
			if fk := nodes[i].patient_triage_result; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(patient.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "patient_triage_result" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Patient = n
			}
		}
	}

	return nodes, nil
}

func (trq *TriageResultQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := trq.querySpec()
	return sqlgraph.CountNodes(ctx, trq.driver, _spec)
}

func (trq *TriageResultQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := trq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (trq *TriageResultQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   triageresult.Table,
			Columns: triageresult.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: triageresult.FieldID,
			},
		},
		From:   trq.sql,
		Unique: true,
	}
	if fields := trq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, triageresult.FieldID)
		for i := range fields {
			if fields[i] != triageresult.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := trq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := trq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := trq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := trq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, triageresult.ValidColumn)
			}
		}
	}
	return _spec
}

func (trq *TriageResultQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(trq.driver.Dialect())
	t1 := builder.Table(triageresult.Table)
	selector := builder.Select(t1.Columns(triageresult.Columns...)...).From(t1)
	if trq.sql != nil {
		selector = trq.sql
		selector.Select(selector.Columns(triageresult.Columns...)...)
	}
	for _, p := range trq.predicates {
		p(selector)
	}
	for _, p := range trq.order {
		p(selector, triageresult.ValidColumn)
	}
	if offset := trq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := trq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// TriageResultGroupBy is the group-by builder for TriageResult entities.
type TriageResultGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (trgb *TriageResultGroupBy) Aggregate(fns ...AggregateFunc) *TriageResultGroupBy {
	trgb.fns = append(trgb.fns, fns...)
	return trgb
}

// Scan applies the group-by query and scans the result into the given value.
func (trgb *TriageResultGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := trgb.path(ctx)
	if err != nil {
		return err
	}
	trgb.sql = query
	return trgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trgb *TriageResultGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := trgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TriageResultGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trgb *TriageResultGroupBy) StringsX(ctx context.Context) []string {
	v, err := trgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = trgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (trgb *TriageResultGroupBy) StringX(ctx context.Context) string {
	v, err := trgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TriageResultGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trgb *TriageResultGroupBy) IntsX(ctx context.Context) []int {
	v, err := trgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = trgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (trgb *TriageResultGroupBy) IntX(ctx context.Context) int {
	v, err := trgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TriageResultGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trgb *TriageResultGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := trgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = trgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (trgb *TriageResultGroupBy) Float64X(ctx context.Context) float64 {
	v, err := trgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(trgb.fields) > 1 {
		return nil, errors.New("ent: TriageResultGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := trgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trgb *TriageResultGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := trgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (trgb *TriageResultGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = trgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (trgb *TriageResultGroupBy) BoolX(ctx context.Context) bool {
	v, err := trgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trgb *TriageResultGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range trgb.fields {
		if !triageresult.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := trgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := trgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trgb *TriageResultGroupBy) sqlQuery() *sql.Selector {
	selector := trgb.sql
	columns := make([]string, 0, len(trgb.fields)+len(trgb.fns))
	columns = append(columns, trgb.fields...)
	for _, fn := range trgb.fns {
		columns = append(columns, fn(selector, triageresult.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(trgb.fields...)
}

// TriageResultSelect is the builder for selecting fields of TriageResult entities.
type TriageResultSelect struct {
	*TriageResultQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (trs *TriageResultSelect) Scan(ctx context.Context, v interface{}) error {
	if err := trs.prepareQuery(ctx); err != nil {
		return err
	}
	trs.sql = trs.TriageResultQuery.sqlQuery()
	return trs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (trs *TriageResultSelect) ScanX(ctx context.Context, v interface{}) {
	if err := trs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Strings(ctx context.Context) ([]string, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TriageResultSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (trs *TriageResultSelect) StringsX(ctx context.Context) []string {
	v, err := trs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = trs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (trs *TriageResultSelect) StringX(ctx context.Context) string {
	v, err := trs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Ints(ctx context.Context) ([]int, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TriageResultSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (trs *TriageResultSelect) IntsX(ctx context.Context) []int {
	v, err := trs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = trs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (trs *TriageResultSelect) IntX(ctx context.Context) int {
	v, err := trs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TriageResultSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (trs *TriageResultSelect) Float64sX(ctx context.Context) []float64 {
	v, err := trs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = trs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (trs *TriageResultSelect) Float64X(ctx context.Context) float64 {
	v, err := trs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(trs.fields) > 1 {
		return nil, errors.New("ent: TriageResultSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := trs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (trs *TriageResultSelect) BoolsX(ctx context.Context) []bool {
	v, err := trs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (trs *TriageResultSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = trs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{triageresult.Label}
	default:
		err = fmt.Errorf("ent: TriageResultSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (trs *TriageResultSelect) BoolX(ctx context.Context) bool {
	v, err := trs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (trs *TriageResultSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := trs.sqlQuery().Query()
	if err := trs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (trs *TriageResultSelect) sqlQuery() sql.Querier {
	selector := trs.sql
	selector.Select(selector.Columns(trs.fields...)...)
	return selector
}
