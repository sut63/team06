// Code generated by entc, DO NOT EDIT.

package righttotreatment

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/team06/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// StartTime applies equality check predicate on the "StartTime" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "EndTime" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// Tel applies equality check predicate on the "tel" field. It's identical to TelEQ.
func Tel(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTel), v))
	})
}

// Idennum applies equality check predicate on the "idennum" field. It's identical to IdennumEQ.
func Idennum(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdennum), v))
	})
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// StartTimeEQ applies the EQ predicate on the "StartTime" field.
func StartTimeEQ(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "StartTime" field.
func StartTimeNEQ(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "StartTime" field.
func StartTimeIn(vs ...time.Time) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "StartTime" field.
func StartTimeNotIn(vs ...time.Time) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "StartTime" field.
func StartTimeGT(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "StartTime" field.
func StartTimeGTE(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "StartTime" field.
func StartTimeLT(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "StartTime" field.
func StartTimeLTE(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// EndTimeEQ applies the EQ predicate on the "EndTime" field.
func EndTimeEQ(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "EndTime" field.
func EndTimeNEQ(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "EndTime" field.
func EndTimeIn(vs ...time.Time) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "EndTime" field.
func EndTimeNotIn(vs ...time.Time) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "EndTime" field.
func EndTimeGT(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "EndTime" field.
func EndTimeGTE(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "EndTime" field.
func EndTimeLT(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "EndTime" field.
func EndTimeLTE(v time.Time) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// TelEQ applies the EQ predicate on the "tel" field.
func TelEQ(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTel), v))
	})
}

// TelNEQ applies the NEQ predicate on the "tel" field.
func TelNEQ(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTel), v))
	})
}

// TelIn applies the In predicate on the "tel" field.
func TelIn(vs ...string) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTel), v...))
	})
}

// TelNotIn applies the NotIn predicate on the "tel" field.
func TelNotIn(vs ...string) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTel), v...))
	})
}

// TelGT applies the GT predicate on the "tel" field.
func TelGT(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTel), v))
	})
}

// TelGTE applies the GTE predicate on the "tel" field.
func TelGTE(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTel), v))
	})
}

// TelLT applies the LT predicate on the "tel" field.
func TelLT(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTel), v))
	})
}

// TelLTE applies the LTE predicate on the "tel" field.
func TelLTE(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTel), v))
	})
}

// TelContains applies the Contains predicate on the "tel" field.
func TelContains(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTel), v))
	})
}

// TelHasPrefix applies the HasPrefix predicate on the "tel" field.
func TelHasPrefix(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTel), v))
	})
}

// TelHasSuffix applies the HasSuffix predicate on the "tel" field.
func TelHasSuffix(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTel), v))
	})
}

// TelEqualFold applies the EqualFold predicate on the "tel" field.
func TelEqualFold(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTel), v))
	})
}

// TelContainsFold applies the ContainsFold predicate on the "tel" field.
func TelContainsFold(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTel), v))
	})
}

// IdennumEQ applies the EQ predicate on the "idennum" field.
func IdennumEQ(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIdennum), v))
	})
}

// IdennumNEQ applies the NEQ predicate on the "idennum" field.
func IdennumNEQ(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIdennum), v))
	})
}

// IdennumIn applies the In predicate on the "idennum" field.
func IdennumIn(vs ...string) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIdennum), v...))
	})
}

// IdennumNotIn applies the NotIn predicate on the "idennum" field.
func IdennumNotIn(vs ...string) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIdennum), v...))
	})
}

// IdennumGT applies the GT predicate on the "idennum" field.
func IdennumGT(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIdennum), v))
	})
}

// IdennumGTE applies the GTE predicate on the "idennum" field.
func IdennumGTE(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIdennum), v))
	})
}

// IdennumLT applies the LT predicate on the "idennum" field.
func IdennumLT(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIdennum), v))
	})
}

// IdennumLTE applies the LTE predicate on the "idennum" field.
func IdennumLTE(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIdennum), v))
	})
}

// IdennumContains applies the Contains predicate on the "idennum" field.
func IdennumContains(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldIdennum), v))
	})
}

// IdennumHasPrefix applies the HasPrefix predicate on the "idennum" field.
func IdennumHasPrefix(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldIdennum), v))
	})
}

// IdennumHasSuffix applies the HasSuffix predicate on the "idennum" field.
func IdennumHasSuffix(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldIdennum), v))
	})
}

// IdennumEqualFold applies the EqualFold predicate on the "idennum" field.
func IdennumEqualFold(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldIdennum), v))
	})
}

// IdennumContainsFold applies the ContainsFold predicate on the "idennum" field.
func IdennumContainsFold(v string) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldIdennum), v))
	})
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.RightToTreatment {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.RightToTreatment(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// HasHospital applies the HasEdge predicate on the "Hospital" edge.
func HasHospital() predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HospitalTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HospitalTable, HospitalColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasHospitalWith applies the HasEdge predicate on the "Hospital" edge with a given conditions (other predicates).
func HasHospitalWith(preds ...predicate.Hospital) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(HospitalInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, HospitalTable, HospitalColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRightToTreatmentType applies the HasEdge predicate on the "RightToTreatmentType" edge.
func HasRightToTreatmentType() predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RightToTreatmentTypeTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RightToTreatmentTypeTable, RightToTreatmentTypeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRightToTreatmentTypeWith applies the HasEdge predicate on the "RightToTreatmentType" edge with a given conditions (other predicates).
func HasRightToTreatmentTypeWith(preds ...predicate.RightToTreatmentType) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RightToTreatmentTypeInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, RightToTreatmentTypeTable, RightToTreatmentTypeColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPatient applies the HasEdge predicate on the "Patient" edge.
func HasPatient() predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPatientWith applies the HasEdge predicate on the "Patient" edge with a given conditions (other predicates).
func HasPatientWith(preds ...predicate.Patient) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(PatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, PatientTable, PatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RightToTreatment) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RightToTreatment) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RightToTreatment) predicate.RightToTreatment {
	return predicate.RightToTreatment(func(s *sql.Selector) {
		p(s.Not())
	})
}
