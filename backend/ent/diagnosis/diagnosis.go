// Code generated by entc, DO NOT EDIT.

package diagnosis

const (
	// Label holds the string label denoting the diagnosis type in the database.
	Label = "diagnosis"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSymptom holds the string denoting the symptom field in the database.
	FieldSymptom = "symptom"
	// FieldOpinionresult holds the string denoting the opinionresult field in the database.
	FieldOpinionresult = "opinionresult"
	// FieldNote holds the string denoting the note field in the database.
	FieldNote = "note"
	// FieldDiagnosisDate holds the string denoting the diagnosisdate field in the database.
	FieldDiagnosisDate = "diagnosis_date"

	// EdgeDoctorName holds the string denoting the doctor_name edge name in mutations.
	EdgeDoctorName = "Doctor_name"
	// EdgePatient holds the string denoting the patient edge name in mutations.
	EdgePatient = "Patient"
	// EdgeType holds the string denoting the type edge name in mutations.
	EdgeType = "type"

	// Table holds the table name of the diagnosis in the database.
	Table = "diagnoses"
	// DoctorNameTable is the table the holds the Doctor_name relation/edge.
	DoctorNameTable = "diagnoses"
	// DoctorNameInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorNameInverseTable = "doctors"
	// DoctorNameColumn is the table column denoting the Doctor_name relation/edge.
	DoctorNameColumn = "doctor_doctor_to_diagnosis"
	// PatientTable is the table the holds the Patient relation/edge.
	PatientTable = "diagnoses"
	// PatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	PatientInverseTable = "patients"
	// PatientColumn is the table column denoting the Patient relation/edge.
	PatientColumn = "patient_patient_to_diagnosis"
	// TypeTable is the table the holds the type relation/edge.
	TypeTable = "diagnoses"
	// TypeInverseTable is the table name for the TreatmentType entity.
	// It exists in this package in order to avoid circular dependency with the "treatmenttype" package.
	TypeInverseTable = "treatment_types"
	// TypeColumn is the table column denoting the type relation/edge.
	TypeColumn = "treatment_type_treatment_type_to_diagnosis"
)

// Columns holds all SQL columns for diagnosis fields.
var Columns = []string{
	FieldID,
	FieldSymptom,
	FieldOpinionresult,
	FieldNote,
	FieldDiagnosisDate,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Diagnosis type.
var ForeignKeys = []string{
	"doctor_doctor_to_diagnosis",
	"patient_patient_to_diagnosis",
	"treatment_type_treatment_type_to_diagnosis",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// SymptomValidator is a validator for the "symptom" field. It is called by the builders before save.
	SymptomValidator func(string) error
	// OpinionresultValidator is a validator for the "Opinionresult" field. It is called by the builders before save.
	OpinionresultValidator func(string) error
	// NoteValidator is a validator for the "note" field. It is called by the builders before save.
	NoteValidator func(string) error
)
