// Code generated by entc, DO NOT EDIT.

package nurse

const (
	// Label holds the string label denoting the nurse type in the database.
	Label = "nurse"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNurseName holds the string denoting the nursename field in the database.
	FieldNurseName = "nurse_name"
	// FieldNurseUsername holds the string denoting the nurseusername field in the database.
	FieldNurseUsername = "nurse_username"
	// FieldNursePassword holds the string denoting the nursepassword field in the database.
	FieldNursePassword = "nurse_password"

	// EdgeTriageResult holds the string denoting the triageresult edge name in mutations.
	EdgeTriageResult = "triageResult"
	// EdgeNurseToAppointmentResults holds the string denoting the nursetoappointmentresults edge name in mutations.
	EdgeNurseToAppointmentResults = "NurseToAppointmentResults"

	// Table holds the table name of the nurse in the database.
	Table = "nurses"
	// TriageResultTable is the table the holds the triageResult relation/edge.
	TriageResultTable = "triage_results"
	// TriageResultInverseTable is the table name for the TriageResult entity.
	// It exists in this package in order to avoid circular dependency with the "triageresult" package.
	TriageResultInverseTable = "triage_results"
	// TriageResultColumn is the table column denoting the triageResult relation/edge.
	TriageResultColumn = "nurse_triage_result"
	// NurseToAppointmentResultsTable is the table the holds the NurseToAppointmentResults relation/edge.
	NurseToAppointmentResultsTable = "appointment_results"
	// NurseToAppointmentResultsInverseTable is the table name for the AppointmentResults entity.
	// It exists in this package in order to avoid circular dependency with the "appointmentresults" package.
	NurseToAppointmentResultsInverseTable = "appointment_results"
	// NurseToAppointmentResultsColumn is the table column denoting the NurseToAppointmentResults relation/edge.
	NurseToAppointmentResultsColumn = "nurse_nurse_to_appointment_results"
)

// Columns holds all SQL columns for nurse fields.
var Columns = []string{
	FieldID,
	FieldNurseName,
	FieldNurseUsername,
	FieldNursePassword,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NurseNameValidator is a validator for the "nurseName" field. It is called by the builders before save.
	NurseNameValidator func(string) error
	// NurseUsernameValidator is a validator for the "nurseUsername" field. It is called by the builders before save.
	NurseUsernameValidator func(string) error
	// NursePasswordValidator is a validator for the "nursePassword" field. It is called by the builders before save.
	NursePasswordValidator func(string) error
)
