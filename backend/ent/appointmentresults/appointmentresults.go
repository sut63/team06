// Code generated by entc, DO NOT EDIT.

package appointmentresults

import (
	"time"
)

const (
	// Label holds the string label denoting the appointmentresults type in the database.
	Label = "appointment_results"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCauseAppoint holds the string denoting the causeappoint field in the database.
	FieldCauseAppoint = "cause_appoint"
	// FieldAdvice holds the string denoting the advice field in the database.
	FieldAdvice = "advice"
	// FieldDateAppoint holds the string denoting the dateappoint field in the database.
	FieldDateAppoint = "date_appoint"
	// FieldTimeAppoint holds the string denoting the timeappoint field in the database.
	FieldTimeAppoint = "time_appoint"
	// FieldAddtimeSave holds the string denoting the addtimesave field in the database.
	FieldAddtimeSave = "addtime_save"
	// FieldHourBeforeAppoint holds the string denoting the hourbeforeappoint field in the database.
	FieldHourBeforeAppoint = "hour_before_appoint"
	// FieldMinuteBeforeAppoint holds the string denoting the minutebeforeappoint field in the database.
	FieldMinuteBeforeAppoint = "minute_before_appoint"

	// EdgeAppointmentResultsToPatient holds the string denoting the appointmentresultstopatient edge name in mutations.
	EdgeAppointmentResultsToPatient = "appointmentResultsToPatient"
	// EdgeAppointmentResultsToNurse holds the string denoting the appointmentresultstonurse edge name in mutations.
	EdgeAppointmentResultsToNurse = "appointmentResultsToNurse"
	// EdgeAppointmentResultsToDoctor holds the string denoting the appointmentresultstodoctor edge name in mutations.
	EdgeAppointmentResultsToDoctor = "appointmentResultsToDoctor"
	// EdgeAppointmentResultsToRoom holds the string denoting the appointmentresultstoroom edge name in mutations.
	EdgeAppointmentResultsToRoom = "appointmentResultsToRoom"

	// Table holds the table name of the appointmentresults in the database.
	Table = "appointment_results"
	// AppointmentResultsToPatientTable is the table the holds the appointmentResultsToPatient relation/edge.
	AppointmentResultsToPatientTable = "appointment_results"
	// AppointmentResultsToPatientInverseTable is the table name for the Patient entity.
	// It exists in this package in order to avoid circular dependency with the "patient" package.
	AppointmentResultsToPatientInverseTable = "patients"
	// AppointmentResultsToPatientColumn is the table column denoting the appointmentResultsToPatient relation/edge.
	AppointmentResultsToPatientColumn = "patient_patient_to_appointment_results"
	// AppointmentResultsToNurseTable is the table the holds the appointmentResultsToNurse relation/edge.
	AppointmentResultsToNurseTable = "appointment_results"
	// AppointmentResultsToNurseInverseTable is the table name for the Nurse entity.
	// It exists in this package in order to avoid circular dependency with the "nurse" package.
	AppointmentResultsToNurseInverseTable = "nurses"
	// AppointmentResultsToNurseColumn is the table column denoting the appointmentResultsToNurse relation/edge.
	AppointmentResultsToNurseColumn = "nurse_nurse_to_appointment_results"
	// AppointmentResultsToDoctorTable is the table the holds the appointmentResultsToDoctor relation/edge.
	AppointmentResultsToDoctorTable = "appointment_results"
	// AppointmentResultsToDoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	AppointmentResultsToDoctorInverseTable = "doctors"
	// AppointmentResultsToDoctorColumn is the table column denoting the appointmentResultsToDoctor relation/edge.
	AppointmentResultsToDoctorColumn = "doctor_doctor_to_appointment_results"
	// AppointmentResultsToRoomTable is the table the holds the appointmentResultsToRoom relation/edge.
	AppointmentResultsToRoomTable = "appointment_results"
	// AppointmentResultsToRoomInverseTable is the table name for the Room entity.
	// It exists in this package in order to avoid circular dependency with the "room" package.
	AppointmentResultsToRoomInverseTable = "rooms"
	// AppointmentResultsToRoomColumn is the table column denoting the appointmentResultsToRoom relation/edge.
	AppointmentResultsToRoomColumn = "room_room_to_appointment_results"
)

// Columns holds all SQL columns for appointmentresults fields.
var Columns = []string{
	FieldID,
	FieldCauseAppoint,
	FieldAdvice,
	FieldDateAppoint,
	FieldTimeAppoint,
	FieldAddtimeSave,
	FieldHourBeforeAppoint,
	FieldMinuteBeforeAppoint,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the AppointmentResults type.
var ForeignKeys = []string{
	"doctor_doctor_to_appointment_results",
	"nurse_nurse_to_appointment_results",
	"patient_patient_to_appointment_results",
	"room_room_to_appointment_results",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// CauseAppointValidator is a validator for the "causeAppoint" field. It is called by the builders before save.
	CauseAppointValidator func(string) error
	// AdviceValidator is a validator for the "advice" field. It is called by the builders before save.
	AdviceValidator func(string) error
	// DefaultAddtimeSave holds the default value on creation for the "addtimeSave" field.
	DefaultAddtimeSave func() time.Time
	// DefaultHourBeforeAppoint holds the default value on creation for the "hourBeforeAppoint" field.
	DefaultHourBeforeAppoint int
	// HourBeforeAppointValidator is a validator for the "hourBeforeAppoint" field. It is called by the builders before save.
	HourBeforeAppointValidator func(int) error
	// DefaultMinuteBeforeAppoint holds the default value on creation for the "minuteBeforeAppoint" field.
	DefaultMinuteBeforeAppoint int
	// MinuteBeforeAppointValidator is a validator for the "minuteBeforeAppoint" field. It is called by the builders before save.
	MinuteBeforeAppointValidator func(int) error
)
