// Code generated by entc, DO NOT EDIT.

package appointmentresults

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/team06/app/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CauseAppoint applies equality check predicate on the "causeAppoint" field. It's identical to CauseAppointEQ.
func CauseAppoint(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCauseAppoint), v))
	})
}

// Advice applies equality check predicate on the "advice" field. It's identical to AdviceEQ.
func Advice(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdvice), v))
	})
}

// DateAppoint applies equality check predicate on the "dateAppoint" field. It's identical to DateAppointEQ.
func DateAppoint(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateAppoint), v))
	})
}

// TimeAppoint applies equality check predicate on the "timeAppoint" field. It's identical to TimeAppointEQ.
func TimeAppoint(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeAppoint), v))
	})
}

// AddtimeSave applies equality check predicate on the "addtimeSave" field. It's identical to AddtimeSaveEQ.
func AddtimeSave(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtimeSave), v))
	})
}

// HourBeforeAppoint applies equality check predicate on the "hourBeforeAppoint" field. It's identical to HourBeforeAppointEQ.
func HourBeforeAppoint(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHourBeforeAppoint), v))
	})
}

// MinuteBeforeAppoint applies equality check predicate on the "minuteBeforeAppoint" field. It's identical to MinuteBeforeAppointEQ.
func MinuteBeforeAppoint(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// CauseAppointEQ applies the EQ predicate on the "causeAppoint" field.
func CauseAppointEQ(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointNEQ applies the NEQ predicate on the "causeAppoint" field.
func CauseAppointNEQ(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointIn applies the In predicate on the "causeAppoint" field.
func CauseAppointIn(vs ...string) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCauseAppoint), v...))
	})
}

// CauseAppointNotIn applies the NotIn predicate on the "causeAppoint" field.
func CauseAppointNotIn(vs ...string) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCauseAppoint), v...))
	})
}

// CauseAppointGT applies the GT predicate on the "causeAppoint" field.
func CauseAppointGT(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointGTE applies the GTE predicate on the "causeAppoint" field.
func CauseAppointGTE(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointLT applies the LT predicate on the "causeAppoint" field.
func CauseAppointLT(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointLTE applies the LTE predicate on the "causeAppoint" field.
func CauseAppointLTE(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointContains applies the Contains predicate on the "causeAppoint" field.
func CauseAppointContains(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointHasPrefix applies the HasPrefix predicate on the "causeAppoint" field.
func CauseAppointHasPrefix(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointHasSuffix applies the HasSuffix predicate on the "causeAppoint" field.
func CauseAppointHasSuffix(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointEqualFold applies the EqualFold predicate on the "causeAppoint" field.
func CauseAppointEqualFold(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCauseAppoint), v))
	})
}

// CauseAppointContainsFold applies the ContainsFold predicate on the "causeAppoint" field.
func CauseAppointContainsFold(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCauseAppoint), v))
	})
}

// AdviceEQ applies the EQ predicate on the "advice" field.
func AdviceEQ(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdvice), v))
	})
}

// AdviceNEQ applies the NEQ predicate on the "advice" field.
func AdviceNEQ(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdvice), v))
	})
}

// AdviceIn applies the In predicate on the "advice" field.
func AdviceIn(vs ...string) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAdvice), v...))
	})
}

// AdviceNotIn applies the NotIn predicate on the "advice" field.
func AdviceNotIn(vs ...string) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAdvice), v...))
	})
}

// AdviceGT applies the GT predicate on the "advice" field.
func AdviceGT(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdvice), v))
	})
}

// AdviceGTE applies the GTE predicate on the "advice" field.
func AdviceGTE(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdvice), v))
	})
}

// AdviceLT applies the LT predicate on the "advice" field.
func AdviceLT(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdvice), v))
	})
}

// AdviceLTE applies the LTE predicate on the "advice" field.
func AdviceLTE(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdvice), v))
	})
}

// AdviceContains applies the Contains predicate on the "advice" field.
func AdviceContains(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdvice), v))
	})
}

// AdviceHasPrefix applies the HasPrefix predicate on the "advice" field.
func AdviceHasPrefix(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdvice), v))
	})
}

// AdviceHasSuffix applies the HasSuffix predicate on the "advice" field.
func AdviceHasSuffix(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdvice), v))
	})
}

// AdviceEqualFold applies the EqualFold predicate on the "advice" field.
func AdviceEqualFold(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdvice), v))
	})
}

// AdviceContainsFold applies the ContainsFold predicate on the "advice" field.
func AdviceContainsFold(v string) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdvice), v))
	})
}

// DateAppointEQ applies the EQ predicate on the "dateAppoint" field.
func DateAppointEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDateAppoint), v))
	})
}

// DateAppointNEQ applies the NEQ predicate on the "dateAppoint" field.
func DateAppointNEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDateAppoint), v))
	})
}

// DateAppointIn applies the In predicate on the "dateAppoint" field.
func DateAppointIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDateAppoint), v...))
	})
}

// DateAppointNotIn applies the NotIn predicate on the "dateAppoint" field.
func DateAppointNotIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDateAppoint), v...))
	})
}

// DateAppointGT applies the GT predicate on the "dateAppoint" field.
func DateAppointGT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDateAppoint), v))
	})
}

// DateAppointGTE applies the GTE predicate on the "dateAppoint" field.
func DateAppointGTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDateAppoint), v))
	})
}

// DateAppointLT applies the LT predicate on the "dateAppoint" field.
func DateAppointLT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDateAppoint), v))
	})
}

// DateAppointLTE applies the LTE predicate on the "dateAppoint" field.
func DateAppointLTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDateAppoint), v))
	})
}

// TimeAppointEQ applies the EQ predicate on the "timeAppoint" field.
func TimeAppointEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeAppoint), v))
	})
}

// TimeAppointNEQ applies the NEQ predicate on the "timeAppoint" field.
func TimeAppointNEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeAppoint), v))
	})
}

// TimeAppointIn applies the In predicate on the "timeAppoint" field.
func TimeAppointIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTimeAppoint), v...))
	})
}

// TimeAppointNotIn applies the NotIn predicate on the "timeAppoint" field.
func TimeAppointNotIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTimeAppoint), v...))
	})
}

// TimeAppointGT applies the GT predicate on the "timeAppoint" field.
func TimeAppointGT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeAppoint), v))
	})
}

// TimeAppointGTE applies the GTE predicate on the "timeAppoint" field.
func TimeAppointGTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeAppoint), v))
	})
}

// TimeAppointLT applies the LT predicate on the "timeAppoint" field.
func TimeAppointLT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeAppoint), v))
	})
}

// TimeAppointLTE applies the LTE predicate on the "timeAppoint" field.
func TimeAppointLTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeAppoint), v))
	})
}

// AddtimeSaveEQ applies the EQ predicate on the "addtimeSave" field.
func AddtimeSaveEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveNEQ applies the NEQ predicate on the "addtimeSave" field.
func AddtimeSaveNEQ(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveIn applies the In predicate on the "addtimeSave" field.
func AddtimeSaveIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAddtimeSave), v...))
	})
}

// AddtimeSaveNotIn applies the NotIn predicate on the "addtimeSave" field.
func AddtimeSaveNotIn(vs ...time.Time) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAddtimeSave), v...))
	})
}

// AddtimeSaveGT applies the GT predicate on the "addtimeSave" field.
func AddtimeSaveGT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveGTE applies the GTE predicate on the "addtimeSave" field.
func AddtimeSaveGTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveLT applies the LT predicate on the "addtimeSave" field.
func AddtimeSaveLT(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAddtimeSave), v))
	})
}

// AddtimeSaveLTE applies the LTE predicate on the "addtimeSave" field.
func AddtimeSaveLTE(v time.Time) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAddtimeSave), v))
	})
}

// HourBeforeAppointEQ applies the EQ predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointEQ(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHourBeforeAppoint), v))
	})
}

// HourBeforeAppointNEQ applies the NEQ predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointNEQ(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHourBeforeAppoint), v))
	})
}

// HourBeforeAppointIn applies the In predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointIn(vs ...int) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldHourBeforeAppoint), v...))
	})
}

// HourBeforeAppointNotIn applies the NotIn predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointNotIn(vs ...int) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldHourBeforeAppoint), v...))
	})
}

// HourBeforeAppointGT applies the GT predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointGT(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHourBeforeAppoint), v))
	})
}

// HourBeforeAppointGTE applies the GTE predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointGTE(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHourBeforeAppoint), v))
	})
}

// HourBeforeAppointLT applies the LT predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointLT(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHourBeforeAppoint), v))
	})
}

// HourBeforeAppointLTE applies the LTE predicate on the "hourBeforeAppoint" field.
func HourBeforeAppointLTE(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHourBeforeAppoint), v))
	})
}

// MinuteBeforeAppointEQ applies the EQ predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointEQ(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// MinuteBeforeAppointNEQ applies the NEQ predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointNEQ(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// MinuteBeforeAppointIn applies the In predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointIn(vs ...int) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMinuteBeforeAppoint), v...))
	})
}

// MinuteBeforeAppointNotIn applies the NotIn predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointNotIn(vs ...int) predicate.AppointmentResults {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.AppointmentResults(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMinuteBeforeAppoint), v...))
	})
}

// MinuteBeforeAppointGT applies the GT predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointGT(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// MinuteBeforeAppointGTE applies the GTE predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointGTE(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// MinuteBeforeAppointLT applies the LT predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointLT(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// MinuteBeforeAppointLTE applies the LTE predicate on the "minuteBeforeAppoint" field.
func MinuteBeforeAppointLTE(v int) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMinuteBeforeAppoint), v))
	})
}

// HasAppointmentResultsToPatient applies the HasEdge predicate on the "appointmentResultsToPatient" edge.
func HasAppointmentResultsToPatient() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToPatientTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToPatientTable, AppointmentResultsToPatientColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToPatientWith applies the HasEdge predicate on the "appointmentResultsToPatient" edge with a given conditions (other predicates).
func HasAppointmentResultsToPatientWith(preds ...predicate.Patient) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToPatientInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToPatientTable, AppointmentResultsToPatientColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointmentResultsToNurse applies the HasEdge predicate on the "appointmentResultsToNurse" edge.
func HasAppointmentResultsToNurse() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToNurseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToNurseTable, AppointmentResultsToNurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToNurseWith applies the HasEdge predicate on the "appointmentResultsToNurse" edge with a given conditions (other predicates).
func HasAppointmentResultsToNurseWith(preds ...predicate.Nurse) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToNurseInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToNurseTable, AppointmentResultsToNurseColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointmentResultsToDoctor applies the HasEdge predicate on the "appointmentResultsToDoctor" edge.
func HasAppointmentResultsToDoctor() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToDoctorTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToDoctorTable, AppointmentResultsToDoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToDoctorWith applies the HasEdge predicate on the "appointmentResultsToDoctor" edge with a given conditions (other predicates).
func HasAppointmentResultsToDoctorWith(preds ...predicate.Doctor) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToDoctorInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToDoctorTable, AppointmentResultsToDoctorColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppointmentResultsToRoom applies the HasEdge predicate on the "appointmentResultsToRoom" edge.
func HasAppointmentResultsToRoom() predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToRoomTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToRoomTable, AppointmentResultsToRoomColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppointmentResultsToRoomWith applies the HasEdge predicate on the "appointmentResultsToRoom" edge with a given conditions (other predicates).
func HasAppointmentResultsToRoomWith(preds ...predicate.Room) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(AppointmentResultsToRoomInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AppointmentResultsToRoomTable, AppointmentResultsToRoomColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppointmentResults) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppointmentResults) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppointmentResults) predicate.AppointmentResults {
	return predicate.AppointmentResults(func(s *sql.Selector) {
		p(s.Not())
	})
}
