// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/room"
)

// AppointmentResultsQuery is the builder for querying AppointmentResults entities.
type AppointmentResultsQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.AppointmentResults
	// eager-loading edges.
	withAppointmentResultsToPatient *PatientQuery
	withAppointmentResultsToNurse   *NurseQuery
	withAppointmentResultsToDoctor  *DoctorQuery
	withAppointmentResultsToRoom    *RoomQuery
	withFKs                         bool
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppointmentResultsQuery builder.
func (arq *AppointmentResultsQuery) Where(ps ...predicate.AppointmentResults) *AppointmentResultsQuery {
	arq.predicates = append(arq.predicates, ps...)
	return arq
}

// Limit adds a limit step to the query.
func (arq *AppointmentResultsQuery) Limit(limit int) *AppointmentResultsQuery {
	arq.limit = &limit
	return arq
}

// Offset adds an offset step to the query.
func (arq *AppointmentResultsQuery) Offset(offset int) *AppointmentResultsQuery {
	arq.offset = &offset
	return arq
}

// Order adds an order step to the query.
func (arq *AppointmentResultsQuery) Order(o ...OrderFunc) *AppointmentResultsQuery {
	arq.order = append(arq.order, o...)
	return arq
}

// QueryAppointmentResultsToPatient chains the current query on the "appointmentResultsToPatient" edge.
func (arq *AppointmentResultsQuery) QueryAppointmentResultsToPatient() *PatientQuery {
	query := &PatientQuery{config: arq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, selector),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToPatientTable, appointmentresults.AppointmentResultsToPatientColumn),
		)
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppointmentResultsToNurse chains the current query on the "appointmentResultsToNurse" edge.
func (arq *AppointmentResultsQuery) QueryAppointmentResultsToNurse() *NurseQuery {
	query := &NurseQuery{config: arq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, selector),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToNurseTable, appointmentresults.AppointmentResultsToNurseColumn),
		)
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppointmentResultsToDoctor chains the current query on the "appointmentResultsToDoctor" edge.
func (arq *AppointmentResultsQuery) QueryAppointmentResultsToDoctor() *DoctorQuery {
	query := &DoctorQuery{config: arq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, selector),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToDoctorTable, appointmentresults.AppointmentResultsToDoctorColumn),
		)
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppointmentResultsToRoom chains the current query on the "appointmentResultsToRoom" edge.
func (arq *AppointmentResultsQuery) QueryAppointmentResultsToRoom() *RoomQuery {
	query := &RoomQuery{config: arq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, selector),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToRoomTable, appointmentresults.AppointmentResultsToRoomColumn),
		)
		fromU = sqlgraph.SetNeighbors(arq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppointmentResults entity from the query.
// Returns a *NotFoundError when no AppointmentResults was found.
func (arq *AppointmentResultsQuery) First(ctx context.Context) (*AppointmentResults, error) {
	nodes, err := arq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appointmentresults.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arq *AppointmentResultsQuery) FirstX(ctx context.Context) *AppointmentResults {
	node, err := arq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppointmentResults ID from the query.
// Returns a *NotFoundError when no AppointmentResults ID was found.
func (arq *AppointmentResultsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appointmentresults.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arq *AppointmentResultsQuery) FirstIDX(ctx context.Context) int {
	id, err := arq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppointmentResults entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one AppointmentResults entity is not found.
// Returns a *NotFoundError when no AppointmentResults entities are found.
func (arq *AppointmentResultsQuery) Only(ctx context.Context) (*AppointmentResults, error) {
	nodes, err := arq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appointmentresults.Label}
	default:
		return nil, &NotSingularError{appointmentresults.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arq *AppointmentResultsQuery) OnlyX(ctx context.Context) *AppointmentResults {
	node, err := arq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppointmentResults ID in the query.
// Returns a *NotSingularError when exactly one AppointmentResults ID is not found.
// Returns a *NotFoundError when no entities are found.
func (arq *AppointmentResultsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = arq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = &NotSingularError{appointmentresults.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arq *AppointmentResultsQuery) OnlyIDX(ctx context.Context) int {
	id, err := arq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppointmentResultsSlice.
func (arq *AppointmentResultsQuery) All(ctx context.Context) ([]*AppointmentResults, error) {
	if err := arq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return arq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (arq *AppointmentResultsQuery) AllX(ctx context.Context) []*AppointmentResults {
	nodes, err := arq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppointmentResults IDs.
func (arq *AppointmentResultsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := arq.Select(appointmentresults.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arq *AppointmentResultsQuery) IDsX(ctx context.Context) []int {
	ids, err := arq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arq *AppointmentResultsQuery) Count(ctx context.Context) (int, error) {
	if err := arq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return arq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (arq *AppointmentResultsQuery) CountX(ctx context.Context) int {
	count, err := arq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arq *AppointmentResultsQuery) Exist(ctx context.Context) (bool, error) {
	if err := arq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return arq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (arq *AppointmentResultsQuery) ExistX(ctx context.Context) bool {
	exist, err := arq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppointmentResultsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arq *AppointmentResultsQuery) Clone() *AppointmentResultsQuery {
	if arq == nil {
		return nil
	}
	return &AppointmentResultsQuery{
		config:                          arq.config,
		limit:                           arq.limit,
		offset:                          arq.offset,
		order:                           append([]OrderFunc{}, arq.order...),
		predicates:                      append([]predicate.AppointmentResults{}, arq.predicates...),
		withAppointmentResultsToPatient: arq.withAppointmentResultsToPatient.Clone(),
		withAppointmentResultsToNurse:   arq.withAppointmentResultsToNurse.Clone(),
		withAppointmentResultsToDoctor:  arq.withAppointmentResultsToDoctor.Clone(),
		withAppointmentResultsToRoom:    arq.withAppointmentResultsToRoom.Clone(),
		// clone intermediate query.
		sql:  arq.sql.Clone(),
		path: arq.path,
	}
}

// WithAppointmentResultsToPatient tells the query-builder to eager-load the nodes that are connected to
// the "appointmentResultsToPatient" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AppointmentResultsQuery) WithAppointmentResultsToPatient(opts ...func(*PatientQuery)) *AppointmentResultsQuery {
	query := &PatientQuery{config: arq.config}
	for _, opt := range opts {
		opt(query)
	}
	arq.withAppointmentResultsToPatient = query
	return arq
}

// WithAppointmentResultsToNurse tells the query-builder to eager-load the nodes that are connected to
// the "appointmentResultsToNurse" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AppointmentResultsQuery) WithAppointmentResultsToNurse(opts ...func(*NurseQuery)) *AppointmentResultsQuery {
	query := &NurseQuery{config: arq.config}
	for _, opt := range opts {
		opt(query)
	}
	arq.withAppointmentResultsToNurse = query
	return arq
}

// WithAppointmentResultsToDoctor tells the query-builder to eager-load the nodes that are connected to
// the "appointmentResultsToDoctor" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AppointmentResultsQuery) WithAppointmentResultsToDoctor(opts ...func(*DoctorQuery)) *AppointmentResultsQuery {
	query := &DoctorQuery{config: arq.config}
	for _, opt := range opts {
		opt(query)
	}
	arq.withAppointmentResultsToDoctor = query
	return arq
}

// WithAppointmentResultsToRoom tells the query-builder to eager-load the nodes that are connected to
// the "appointmentResultsToRoom" edge. The optional arguments are used to configure the query builder of the edge.
func (arq *AppointmentResultsQuery) WithAppointmentResultsToRoom(opts ...func(*RoomQuery)) *AppointmentResultsQuery {
	query := &RoomQuery{config: arq.config}
	for _, opt := range opts {
		opt(query)
	}
	arq.withAppointmentResultsToRoom = query
	return arq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CauseAppoint string `json:"causeAppoint,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppointmentResults.Query().
//		GroupBy(appointmentresults.FieldCauseAppoint).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (arq *AppointmentResultsQuery) GroupBy(field string, fields ...string) *AppointmentResultsGroupBy {
	group := &AppointmentResultsGroupBy{config: arq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := arq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return arq.sqlQuery(), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CauseAppoint string `json:"causeAppoint,omitempty"`
//	}
//
//	client.AppointmentResults.Query().
//		Select(appointmentresults.FieldCauseAppoint).
//		Scan(ctx, &v)
//
func (arq *AppointmentResultsQuery) Select(field string, fields ...string) *AppointmentResultsSelect {
	arq.fields = append([]string{field}, fields...)
	return &AppointmentResultsSelect{AppointmentResultsQuery: arq}
}

func (arq *AppointmentResultsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range arq.fields {
		if !appointmentresults.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if arq.path != nil {
		prev, err := arq.path(ctx)
		if err != nil {
			return err
		}
		arq.sql = prev
	}
	return nil
}

func (arq *AppointmentResultsQuery) sqlAll(ctx context.Context) ([]*AppointmentResults, error) {
	var (
		nodes       = []*AppointmentResults{}
		withFKs     = arq.withFKs
		_spec       = arq.querySpec()
		loadedTypes = [4]bool{
			arq.withAppointmentResultsToPatient != nil,
			arq.withAppointmentResultsToNurse != nil,
			arq.withAppointmentResultsToDoctor != nil,
			arq.withAppointmentResultsToRoom != nil,
		}
	)
	if arq.withAppointmentResultsToPatient != nil || arq.withAppointmentResultsToNurse != nil || arq.withAppointmentResultsToDoctor != nil || arq.withAppointmentResultsToRoom != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, appointmentresults.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &AppointmentResults{config: arq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, arq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := arq.withAppointmentResultsToPatient; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AppointmentResults)
		for i := range nodes {
			if fk := nodes[i].patient_patient_to_appointment_results; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(patient.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "patient_patient_to_appointment_results" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AppointmentResultsToPatient = n
			}
		}
	}

	if query := arq.withAppointmentResultsToNurse; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AppointmentResults)
		for i := range nodes {
			if fk := nodes[i].nurse_nurse_to_appointment_results; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(nurse.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "nurse_nurse_to_appointment_results" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AppointmentResultsToNurse = n
			}
		}
	}

	if query := arq.withAppointmentResultsToDoctor; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AppointmentResults)
		for i := range nodes {
			if fk := nodes[i].doctor_doctor_to_appointment_results; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(doctor.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "doctor_doctor_to_appointment_results" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AppointmentResultsToDoctor = n
			}
		}
	}

	if query := arq.withAppointmentResultsToRoom; query != nil {
		ids := make([]int, 0, len(nodes))
		nodeids := make(map[int][]*AppointmentResults)
		for i := range nodes {
			if fk := nodes[i].room_room_to_appointment_results; fk != nil {
				ids = append(ids, *fk)
				nodeids[*fk] = append(nodeids[*fk], nodes[i])
			}
		}
		query.Where(room.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "room_room_to_appointment_results" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.AppointmentResultsToRoom = n
			}
		}
	}

	return nodes, nil
}

func (arq *AppointmentResultsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arq.querySpec()
	return sqlgraph.CountNodes(ctx, arq.driver, _spec)
}

func (arq *AppointmentResultsQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := arq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (arq *AppointmentResultsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   appointmentresults.Table,
			Columns: appointmentresults.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: appointmentresults.FieldID,
			},
		},
		From:   arq.sql,
		Unique: true,
	}
	if fields := arq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appointmentresults.FieldID)
		for i := range fields {
			if fields[i] != appointmentresults.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := arq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, appointmentresults.ValidColumn)
			}
		}
	}
	return _spec
}

func (arq *AppointmentResultsQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(arq.driver.Dialect())
	t1 := builder.Table(appointmentresults.Table)
	selector := builder.Select(t1.Columns(appointmentresults.Columns...)...).From(t1)
	if arq.sql != nil {
		selector = arq.sql
		selector.Select(selector.Columns(appointmentresults.Columns...)...)
	}
	for _, p := range arq.predicates {
		p(selector)
	}
	for _, p := range arq.order {
		p(selector, appointmentresults.ValidColumn)
	}
	if offset := arq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AppointmentResultsGroupBy is the group-by builder for AppointmentResults entities.
type AppointmentResultsGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (argb *AppointmentResultsGroupBy) Aggregate(fns ...AggregateFunc) *AppointmentResultsGroupBy {
	argb.fns = append(argb.fns, fns...)
	return argb
}

// Scan applies the group-by query and scans the result into the given value.
func (argb *AppointmentResultsGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := argb.path(ctx)
	if err != nil {
		return err
	}
	argb.sql = query
	return argb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := argb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(argb.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := argb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) StringsX(ctx context.Context) []string {
	v, err := argb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = argb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) StringX(ctx context.Context) string {
	v, err := argb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(argb.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := argb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) IntsX(ctx context.Context) []int {
	v, err := argb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = argb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) IntX(ctx context.Context) int {
	v, err := argb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(argb.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := argb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := argb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = argb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) Float64X(ctx context.Context) float64 {
	v, err := argb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(argb.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := argb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := argb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (argb *AppointmentResultsGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = argb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (argb *AppointmentResultsGroupBy) BoolX(ctx context.Context) bool {
	v, err := argb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (argb *AppointmentResultsGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range argb.fields {
		if !appointmentresults.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := argb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := argb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (argb *AppointmentResultsGroupBy) sqlQuery() *sql.Selector {
	selector := argb.sql
	columns := make([]string, 0, len(argb.fields)+len(argb.fns))
	columns = append(columns, argb.fields...)
	for _, fn := range argb.fns {
		columns = append(columns, fn(selector, appointmentresults.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(argb.fields...)
}

// AppointmentResultsSelect is the builder for selecting fields of AppointmentResults entities.
type AppointmentResultsSelect struct {
	*AppointmentResultsQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ars *AppointmentResultsSelect) Scan(ctx context.Context, v interface{}) error {
	if err := ars.prepareQuery(ctx); err != nil {
		return err
	}
	ars.sql = ars.AppointmentResultsQuery.sqlQuery()
	return ars.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (ars *AppointmentResultsSelect) ScanX(ctx context.Context, v interface{}) {
	if err := ars.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Strings(ctx context.Context) ([]string, error) {
	if len(ars.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := ars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (ars *AppointmentResultsSelect) StringsX(ctx context.Context) []string {
	v, err := ars.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = ars.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (ars *AppointmentResultsSelect) StringX(ctx context.Context) string {
	v, err := ars.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Ints(ctx context.Context) ([]int, error) {
	if len(ars.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := ars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (ars *AppointmentResultsSelect) IntsX(ctx context.Context) []int {
	v, err := ars.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = ars.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (ars *AppointmentResultsSelect) IntX(ctx context.Context) int {
	v, err := ars.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(ars.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := ars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (ars *AppointmentResultsSelect) Float64sX(ctx context.Context) []float64 {
	v, err := ars.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = ars.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (ars *AppointmentResultsSelect) Float64X(ctx context.Context) float64 {
	v, err := ars.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(ars.fields) > 1 {
		return nil, errors.New("ent: AppointmentResultsSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := ars.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (ars *AppointmentResultsSelect) BoolsX(ctx context.Context) []bool {
	v, err := ars.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (ars *AppointmentResultsSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = ars.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{appointmentresults.Label}
	default:
		err = fmt.Errorf("ent: AppointmentResultsSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (ars *AppointmentResultsSelect) BoolX(ctx context.Context) bool {
	v, err := ars.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ars *AppointmentResultsSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := ars.sqlQuery().Query()
	if err := ars.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ars *AppointmentResultsSelect) sqlQuery() sql.Querier {
	selector := ars.sql
	selector.Select(selector.Columns(ars.fields...)...)
	return selector
}
