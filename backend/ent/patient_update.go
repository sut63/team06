// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/bloodtype"
	"github.com/team06/app/ent/diagnosis"
	"github.com/team06/app/ent/gender"
	"github.com/team06/app/ent/medicalprocedure"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/prefix"
	"github.com/team06/app/ent/righttotreatment"
	"github.com/team06/app/ent/triageresult"
)

// PatientUpdate is the builder for updating Patient entities.
type PatientUpdate struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// Where adds a new predicate for the PatientUpdate builder.
func (pu *PatientUpdate) Where(ps ...predicate.Patient) *PatientUpdate {
	pu.mutation.predicates = append(pu.mutation.predicates, ps...)
	return pu
}

// SetPersonalID sets the "personalID" field.
func (pu *PatientUpdate) SetPersonalID(i int) *PatientUpdate {
	pu.mutation.ResetPersonalID()
	pu.mutation.SetPersonalID(i)
	return pu
}

// AddPersonalID adds i to the "personalID" field.
func (pu *PatientUpdate) AddPersonalID(i int) *PatientUpdate {
	pu.mutation.AddPersonalID(i)
	return pu
}

// SetPatientName sets the "patientName" field.
func (pu *PatientUpdate) SetPatientName(s string) *PatientUpdate {
	pu.mutation.SetPatientName(s)
	return pu
}

// SetAge sets the "age" field.
func (pu *PatientUpdate) SetAge(i int) *PatientUpdate {
	pu.mutation.ResetAge()
	pu.mutation.SetAge(i)
	return pu
}

// AddAge adds i to the "age" field.
func (pu *PatientUpdate) AddAge(i int) *PatientUpdate {
	pu.mutation.AddAge(i)
	return pu
}

// SetHospitalNumber sets the "hospitalNumber" field.
func (pu *PatientUpdate) SetHospitalNumber(s string) *PatientUpdate {
	pu.mutation.SetHospitalNumber(s)
	return pu
}

// SetDrugAllergy sets the "drugAllergy" field.
func (pu *PatientUpdate) SetDrugAllergy(s string) *PatientUpdate {
	pu.mutation.SetDrugAllergy(s)
	return pu
}

// SetAddedTime sets the "added_time" field.
func (pu *PatientUpdate) SetAddedTime(t time.Time) *PatientUpdate {
	pu.mutation.SetAddedTime(t)
	return pu
}

// SetPrefixID sets the "Prefix" edge to the Prefix entity by ID.
func (pu *PatientUpdate) SetPrefixID(id int) *PatientUpdate {
	pu.mutation.SetPrefixID(id)
	return pu
}

// SetNillablePrefixID sets the "Prefix" edge to the Prefix entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillablePrefixID(id *int) *PatientUpdate {
	if id != nil {
		pu = pu.SetPrefixID(*id)
	}
	return pu
}

// SetPrefix sets the "Prefix" edge to the Prefix entity.
func (pu *PatientUpdate) SetPrefix(p *Prefix) *PatientUpdate {
	return pu.SetPrefixID(p.ID)
}

// SetGenderID sets the "Gender" edge to the Gender entity by ID.
func (pu *PatientUpdate) SetGenderID(id int) *PatientUpdate {
	pu.mutation.SetGenderID(id)
	return pu
}

// SetNillableGenderID sets the "Gender" edge to the Gender entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillableGenderID(id *int) *PatientUpdate {
	if id != nil {
		pu = pu.SetGenderID(*id)
	}
	return pu
}

// SetGender sets the "Gender" edge to the Gender entity.
func (pu *PatientUpdate) SetGender(g *Gender) *PatientUpdate {
	return pu.SetGenderID(g.ID)
}

// SetBloodtypeID sets the "Bloodtype" edge to the BloodType entity by ID.
func (pu *PatientUpdate) SetBloodtypeID(id int) *PatientUpdate {
	pu.mutation.SetBloodtypeID(id)
	return pu
}

// SetNillableBloodtypeID sets the "Bloodtype" edge to the BloodType entity by ID if the given value is not nil.
func (pu *PatientUpdate) SetNillableBloodtypeID(id *int) *PatientUpdate {
	if id != nil {
		pu = pu.SetBloodtypeID(*id)
	}
	return pu
}

// SetBloodtype sets the "Bloodtype" edge to the BloodType entity.
func (pu *PatientUpdate) SetBloodtype(b *BloodType) *PatientUpdate {
	return pu.SetBloodtypeID(b.ID)
}

// AddTriageResultIDs adds the "triageResult" edge to the TriageResult entity by IDs.
func (pu *PatientUpdate) AddTriageResultIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddTriageResultIDs(ids...)
	return pu
}

// AddTriageResult adds the "triageResult" edges to the TriageResult entity.
func (pu *PatientUpdate) AddTriageResult(t ...*TriageResult) *PatientUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTriageResultIDs(ids...)
}

// AddPatientToAppointmentResultIDs adds the "PatientToAppointmentResults" edge to the AppointmentResults entity by IDs.
func (pu *PatientUpdate) AddPatientToAppointmentResultIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientToAppointmentResultIDs(ids...)
	return pu
}

// AddPatientToAppointmentResults adds the "PatientToAppointmentResults" edges to the AppointmentResults entity.
func (pu *PatientUpdate) AddPatientToAppointmentResults(a ...*AppointmentResults) *PatientUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddPatientToAppointmentResultIDs(ids...)
}

// AddPatientToMedicalProcedureIDs adds the "PatientToMedicalProcedure" edge to the MedicalProcedure entity by IDs.
func (pu *PatientUpdate) AddPatientToMedicalProcedureIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientToMedicalProcedureIDs(ids...)
	return pu
}

// AddPatientToMedicalProcedure adds the "PatientToMedicalProcedure" edges to the MedicalProcedure entity.
func (pu *PatientUpdate) AddPatientToMedicalProcedure(m ...*MedicalProcedure) *PatientUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.AddPatientToMedicalProcedureIDs(ids...)
}

// AddPatientToRightToTreatmentIDs adds the "PatientToRightToTreatment" edge to the RightToTreatment entity by IDs.
func (pu *PatientUpdate) AddPatientToRightToTreatmentIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientToRightToTreatmentIDs(ids...)
	return pu
}

// AddPatientToRightToTreatment adds the "PatientToRightToTreatment" edges to the RightToTreatment entity.
func (pu *PatientUpdate) AddPatientToRightToTreatment(r ...*RightToTreatment) *PatientUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.AddPatientToRightToTreatmentIDs(ids...)
}

// AddPatientToDiagnosiIDs adds the "PatientToDiagnosis" edge to the Diagnosis entity by IDs.
func (pu *PatientUpdate) AddPatientToDiagnosiIDs(ids ...int) *PatientUpdate {
	pu.mutation.AddPatientToDiagnosiIDs(ids...)
	return pu
}

// AddPatientToDiagnosis adds the "PatientToDiagnosis" edges to the Diagnosis entity.
func (pu *PatientUpdate) AddPatientToDiagnosis(d ...*Diagnosis) *PatientUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.AddPatientToDiagnosiIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (pu *PatientUpdate) Mutation() *PatientMutation {
	return pu.mutation
}

// ClearPrefix clears the "Prefix" edge to the Prefix entity.
func (pu *PatientUpdate) ClearPrefix() *PatientUpdate {
	pu.mutation.ClearPrefix()
	return pu
}

// ClearGender clears the "Gender" edge to the Gender entity.
func (pu *PatientUpdate) ClearGender() *PatientUpdate {
	pu.mutation.ClearGender()
	return pu
}

// ClearBloodtype clears the "Bloodtype" edge to the BloodType entity.
func (pu *PatientUpdate) ClearBloodtype() *PatientUpdate {
	pu.mutation.ClearBloodtype()
	return pu
}

// ClearTriageResult clears all "triageResult" edges to the TriageResult entity.
func (pu *PatientUpdate) ClearTriageResult() *PatientUpdate {
	pu.mutation.ClearTriageResult()
	return pu
}

// RemoveTriageResultIDs removes the "triageResult" edge to TriageResult entities by IDs.
func (pu *PatientUpdate) RemoveTriageResultIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemoveTriageResultIDs(ids...)
	return pu
}

// RemoveTriageResult removes "triageResult" edges to TriageResult entities.
func (pu *PatientUpdate) RemoveTriageResult(t ...*TriageResult) *PatientUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTriageResultIDs(ids...)
}

// ClearPatientToAppointmentResults clears all "PatientToAppointmentResults" edges to the AppointmentResults entity.
func (pu *PatientUpdate) ClearPatientToAppointmentResults() *PatientUpdate {
	pu.mutation.ClearPatientToAppointmentResults()
	return pu
}

// RemovePatientToAppointmentResultIDs removes the "PatientToAppointmentResults" edge to AppointmentResults entities by IDs.
func (pu *PatientUpdate) RemovePatientToAppointmentResultIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientToAppointmentResultIDs(ids...)
	return pu
}

// RemovePatientToAppointmentResults removes "PatientToAppointmentResults" edges to AppointmentResults entities.
func (pu *PatientUpdate) RemovePatientToAppointmentResults(a ...*AppointmentResults) *PatientUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemovePatientToAppointmentResultIDs(ids...)
}

// ClearPatientToMedicalProcedure clears all "PatientToMedicalProcedure" edges to the MedicalProcedure entity.
func (pu *PatientUpdate) ClearPatientToMedicalProcedure() *PatientUpdate {
	pu.mutation.ClearPatientToMedicalProcedure()
	return pu
}

// RemovePatientToMedicalProcedureIDs removes the "PatientToMedicalProcedure" edge to MedicalProcedure entities by IDs.
func (pu *PatientUpdate) RemovePatientToMedicalProcedureIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientToMedicalProcedureIDs(ids...)
	return pu
}

// RemovePatientToMedicalProcedure removes "PatientToMedicalProcedure" edges to MedicalProcedure entities.
func (pu *PatientUpdate) RemovePatientToMedicalProcedure(m ...*MedicalProcedure) *PatientUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return pu.RemovePatientToMedicalProcedureIDs(ids...)
}

// ClearPatientToRightToTreatment clears all "PatientToRightToTreatment" edges to the RightToTreatment entity.
func (pu *PatientUpdate) ClearPatientToRightToTreatment() *PatientUpdate {
	pu.mutation.ClearPatientToRightToTreatment()
	return pu
}

// RemovePatientToRightToTreatmentIDs removes the "PatientToRightToTreatment" edge to RightToTreatment entities by IDs.
func (pu *PatientUpdate) RemovePatientToRightToTreatmentIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientToRightToTreatmentIDs(ids...)
	return pu
}

// RemovePatientToRightToTreatment removes "PatientToRightToTreatment" edges to RightToTreatment entities.
func (pu *PatientUpdate) RemovePatientToRightToTreatment(r ...*RightToTreatment) *PatientUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return pu.RemovePatientToRightToTreatmentIDs(ids...)
}

// ClearPatientToDiagnosis clears all "PatientToDiagnosis" edges to the Diagnosis entity.
func (pu *PatientUpdate) ClearPatientToDiagnosis() *PatientUpdate {
	pu.mutation.ClearPatientToDiagnosis()
	return pu
}

// RemovePatientToDiagnosiIDs removes the "PatientToDiagnosis" edge to Diagnosis entities by IDs.
func (pu *PatientUpdate) RemovePatientToDiagnosiIDs(ids ...int) *PatientUpdate {
	pu.mutation.RemovePatientToDiagnosiIDs(ids...)
	return pu
}

// RemovePatientToDiagnosis removes "PatientToDiagnosis" edges to Diagnosis entities.
func (pu *PatientUpdate) RemovePatientToDiagnosis(d ...*Diagnosis) *PatientUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return pu.RemovePatientToDiagnosiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PatientUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PatientUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PatientUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PatientUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PatientUpdate) check() error {
	if v, ok := pu.mutation.PersonalID(); ok {
		if err := patient.PersonalIDValidator(v); err != nil {
			return &ValidationError{Name: "personalID", err: fmt.Errorf("ent: validator failed for field \"personalID\": %w", err)}
		}
	}
	if v, ok := pu.mutation.PatientName(); ok {
		if err := patient.PatientNameValidator(v); err != nil {
			return &ValidationError{Name: "patientName", err: fmt.Errorf("ent: validator failed for field \"patientName\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Age(); ok {
		if err := patient.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := pu.mutation.HospitalNumber(); ok {
		if err := patient.HospitalNumberValidator(v); err != nil {
			return &ValidationError{Name: "hospitalNumber", err: fmt.Errorf("ent: validator failed for field \"hospitalNumber\": %w", err)}
		}
	}
	if v, ok := pu.mutation.DrugAllergy(); ok {
		if err := patient.DrugAllergyValidator(v); err != nil {
			return &ValidationError{Name: "drugAllergy", err: fmt.Errorf("ent: validator failed for field \"drugAllergy\": %w", err)}
		}
	}
	return nil
}

func (pu *PatientUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patient.Table,
			Columns: patient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patient.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PersonalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldPersonalID,
		})
	}
	if value, ok := pu.mutation.AddedPersonalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldPersonalID,
		})
	}
	if value, ok := pu.mutation.PatientName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientName,
		})
	}
	if value, ok := pu.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldAge,
		})
	}
	if value, ok := pu.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldAge,
		})
	}
	if value, ok := pu.mutation.HospitalNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldHospitalNumber,
		})
	}
	if value, ok := pu.mutation.DrugAllergy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldDrugAllergy,
		})
	}
	if value, ok := pu.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patient.FieldAddedTime,
		})
	}
	if pu.mutation.PrefixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.PrefixTable,
			Columns: []string{patient.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PrefixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.PrefixTable,
			Columns: []string{patient.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.GenderTable,
			Columns: []string{patient.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.GenderTable,
			Columns: []string{patient.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.BloodtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.BloodtypeTable,
			Columns: []string{patient.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.BloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.BloodtypeTable,
			Columns: []string{patient.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TriageResultTable,
			Columns: []string{patient.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTriageResultIDs(); len(nodes) > 0 && !pu.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TriageResultTable,
			Columns: []string{patient.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TriageResultTable,
			Columns: []string{patient.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToAppointmentResultsTable,
			Columns: []string{patient.PatientToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientToAppointmentResultsIDs(); len(nodes) > 0 && !pu.mutation.PatientToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToAppointmentResultsTable,
			Columns: []string{patient.PatientToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientToAppointmentResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToAppointmentResultsTable,
			Columns: []string{patient.PatientToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToMedicalProcedureTable,
			Columns: []string{patient.PatientToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientToMedicalProcedureIDs(); len(nodes) > 0 && !pu.mutation.PatientToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToMedicalProcedureTable,
			Columns: []string{patient.PatientToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientToMedicalProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToMedicalProcedureTable,
			Columns: []string{patient.PatientToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientToRightToTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToRightToTreatmentTable,
			Columns: []string{patient.PatientToRightToTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientToRightToTreatmentIDs(); len(nodes) > 0 && !pu.mutation.PatientToRightToTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToRightToTreatmentTable,
			Columns: []string{patient.PatientToRightToTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientToRightToTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToRightToTreatmentTable,
			Columns: []string{patient.PatientToRightToTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.PatientToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToDiagnosisTable,
			Columns: []string{patient.PatientToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedPatientToDiagnosisIDs(); len(nodes) > 0 && !pu.mutation.PatientToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToDiagnosisTable,
			Columns: []string{patient.PatientToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PatientToDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToDiagnosisTable,
			Columns: []string{patient.PatientToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PatientUpdateOne is the builder for updating a single Patient entity.
type PatientUpdateOne struct {
	config
	hooks    []Hook
	mutation *PatientMutation
}

// SetPersonalID sets the "personalID" field.
func (puo *PatientUpdateOne) SetPersonalID(i int) *PatientUpdateOne {
	puo.mutation.ResetPersonalID()
	puo.mutation.SetPersonalID(i)
	return puo
}

// AddPersonalID adds i to the "personalID" field.
func (puo *PatientUpdateOne) AddPersonalID(i int) *PatientUpdateOne {
	puo.mutation.AddPersonalID(i)
	return puo
}

// SetPatientName sets the "patientName" field.
func (puo *PatientUpdateOne) SetPatientName(s string) *PatientUpdateOne {
	puo.mutation.SetPatientName(s)
	return puo
}

// SetAge sets the "age" field.
func (puo *PatientUpdateOne) SetAge(i int) *PatientUpdateOne {
	puo.mutation.ResetAge()
	puo.mutation.SetAge(i)
	return puo
}

// AddAge adds i to the "age" field.
func (puo *PatientUpdateOne) AddAge(i int) *PatientUpdateOne {
	puo.mutation.AddAge(i)
	return puo
}

// SetHospitalNumber sets the "hospitalNumber" field.
func (puo *PatientUpdateOne) SetHospitalNumber(s string) *PatientUpdateOne {
	puo.mutation.SetHospitalNumber(s)
	return puo
}

// SetDrugAllergy sets the "drugAllergy" field.
func (puo *PatientUpdateOne) SetDrugAllergy(s string) *PatientUpdateOne {
	puo.mutation.SetDrugAllergy(s)
	return puo
}

// SetAddedTime sets the "added_time" field.
func (puo *PatientUpdateOne) SetAddedTime(t time.Time) *PatientUpdateOne {
	puo.mutation.SetAddedTime(t)
	return puo
}

// SetPrefixID sets the "Prefix" edge to the Prefix entity by ID.
func (puo *PatientUpdateOne) SetPrefixID(id int) *PatientUpdateOne {
	puo.mutation.SetPrefixID(id)
	return puo
}

// SetNillablePrefixID sets the "Prefix" edge to the Prefix entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillablePrefixID(id *int) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetPrefixID(*id)
	}
	return puo
}

// SetPrefix sets the "Prefix" edge to the Prefix entity.
func (puo *PatientUpdateOne) SetPrefix(p *Prefix) *PatientUpdateOne {
	return puo.SetPrefixID(p.ID)
}

// SetGenderID sets the "Gender" edge to the Gender entity by ID.
func (puo *PatientUpdateOne) SetGenderID(id int) *PatientUpdateOne {
	puo.mutation.SetGenderID(id)
	return puo
}

// SetNillableGenderID sets the "Gender" edge to the Gender entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableGenderID(id *int) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetGenderID(*id)
	}
	return puo
}

// SetGender sets the "Gender" edge to the Gender entity.
func (puo *PatientUpdateOne) SetGender(g *Gender) *PatientUpdateOne {
	return puo.SetGenderID(g.ID)
}

// SetBloodtypeID sets the "Bloodtype" edge to the BloodType entity by ID.
func (puo *PatientUpdateOne) SetBloodtypeID(id int) *PatientUpdateOne {
	puo.mutation.SetBloodtypeID(id)
	return puo
}

// SetNillableBloodtypeID sets the "Bloodtype" edge to the BloodType entity by ID if the given value is not nil.
func (puo *PatientUpdateOne) SetNillableBloodtypeID(id *int) *PatientUpdateOne {
	if id != nil {
		puo = puo.SetBloodtypeID(*id)
	}
	return puo
}

// SetBloodtype sets the "Bloodtype" edge to the BloodType entity.
func (puo *PatientUpdateOne) SetBloodtype(b *BloodType) *PatientUpdateOne {
	return puo.SetBloodtypeID(b.ID)
}

// AddTriageResultIDs adds the "triageResult" edge to the TriageResult entity by IDs.
func (puo *PatientUpdateOne) AddTriageResultIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddTriageResultIDs(ids...)
	return puo
}

// AddTriageResult adds the "triageResult" edges to the TriageResult entity.
func (puo *PatientUpdateOne) AddTriageResult(t ...*TriageResult) *PatientUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTriageResultIDs(ids...)
}

// AddPatientToAppointmentResultIDs adds the "PatientToAppointmentResults" edge to the AppointmentResults entity by IDs.
func (puo *PatientUpdateOne) AddPatientToAppointmentResultIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientToAppointmentResultIDs(ids...)
	return puo
}

// AddPatientToAppointmentResults adds the "PatientToAppointmentResults" edges to the AppointmentResults entity.
func (puo *PatientUpdateOne) AddPatientToAppointmentResults(a ...*AppointmentResults) *PatientUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddPatientToAppointmentResultIDs(ids...)
}

// AddPatientToMedicalProcedureIDs adds the "PatientToMedicalProcedure" edge to the MedicalProcedure entity by IDs.
func (puo *PatientUpdateOne) AddPatientToMedicalProcedureIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientToMedicalProcedureIDs(ids...)
	return puo
}

// AddPatientToMedicalProcedure adds the "PatientToMedicalProcedure" edges to the MedicalProcedure entity.
func (puo *PatientUpdateOne) AddPatientToMedicalProcedure(m ...*MedicalProcedure) *PatientUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.AddPatientToMedicalProcedureIDs(ids...)
}

// AddPatientToRightToTreatmentIDs adds the "PatientToRightToTreatment" edge to the RightToTreatment entity by IDs.
func (puo *PatientUpdateOne) AddPatientToRightToTreatmentIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientToRightToTreatmentIDs(ids...)
	return puo
}

// AddPatientToRightToTreatment adds the "PatientToRightToTreatment" edges to the RightToTreatment entity.
func (puo *PatientUpdateOne) AddPatientToRightToTreatment(r ...*RightToTreatment) *PatientUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.AddPatientToRightToTreatmentIDs(ids...)
}

// AddPatientToDiagnosiIDs adds the "PatientToDiagnosis" edge to the Diagnosis entity by IDs.
func (puo *PatientUpdateOne) AddPatientToDiagnosiIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.AddPatientToDiagnosiIDs(ids...)
	return puo
}

// AddPatientToDiagnosis adds the "PatientToDiagnosis" edges to the Diagnosis entity.
func (puo *PatientUpdateOne) AddPatientToDiagnosis(d ...*Diagnosis) *PatientUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.AddPatientToDiagnosiIDs(ids...)
}

// Mutation returns the PatientMutation object of the builder.
func (puo *PatientUpdateOne) Mutation() *PatientMutation {
	return puo.mutation
}

// ClearPrefix clears the "Prefix" edge to the Prefix entity.
func (puo *PatientUpdateOne) ClearPrefix() *PatientUpdateOne {
	puo.mutation.ClearPrefix()
	return puo
}

// ClearGender clears the "Gender" edge to the Gender entity.
func (puo *PatientUpdateOne) ClearGender() *PatientUpdateOne {
	puo.mutation.ClearGender()
	return puo
}

// ClearBloodtype clears the "Bloodtype" edge to the BloodType entity.
func (puo *PatientUpdateOne) ClearBloodtype() *PatientUpdateOne {
	puo.mutation.ClearBloodtype()
	return puo
}

// ClearTriageResult clears all "triageResult" edges to the TriageResult entity.
func (puo *PatientUpdateOne) ClearTriageResult() *PatientUpdateOne {
	puo.mutation.ClearTriageResult()
	return puo
}

// RemoveTriageResultIDs removes the "triageResult" edge to TriageResult entities by IDs.
func (puo *PatientUpdateOne) RemoveTriageResultIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemoveTriageResultIDs(ids...)
	return puo
}

// RemoveTriageResult removes "triageResult" edges to TriageResult entities.
func (puo *PatientUpdateOne) RemoveTriageResult(t ...*TriageResult) *PatientUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTriageResultIDs(ids...)
}

// ClearPatientToAppointmentResults clears all "PatientToAppointmentResults" edges to the AppointmentResults entity.
func (puo *PatientUpdateOne) ClearPatientToAppointmentResults() *PatientUpdateOne {
	puo.mutation.ClearPatientToAppointmentResults()
	return puo
}

// RemovePatientToAppointmentResultIDs removes the "PatientToAppointmentResults" edge to AppointmentResults entities by IDs.
func (puo *PatientUpdateOne) RemovePatientToAppointmentResultIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientToAppointmentResultIDs(ids...)
	return puo
}

// RemovePatientToAppointmentResults removes "PatientToAppointmentResults" edges to AppointmentResults entities.
func (puo *PatientUpdateOne) RemovePatientToAppointmentResults(a ...*AppointmentResults) *PatientUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemovePatientToAppointmentResultIDs(ids...)
}

// ClearPatientToMedicalProcedure clears all "PatientToMedicalProcedure" edges to the MedicalProcedure entity.
func (puo *PatientUpdateOne) ClearPatientToMedicalProcedure() *PatientUpdateOne {
	puo.mutation.ClearPatientToMedicalProcedure()
	return puo
}

// RemovePatientToMedicalProcedureIDs removes the "PatientToMedicalProcedure" edge to MedicalProcedure entities by IDs.
func (puo *PatientUpdateOne) RemovePatientToMedicalProcedureIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientToMedicalProcedureIDs(ids...)
	return puo
}

// RemovePatientToMedicalProcedure removes "PatientToMedicalProcedure" edges to MedicalProcedure entities.
func (puo *PatientUpdateOne) RemovePatientToMedicalProcedure(m ...*MedicalProcedure) *PatientUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return puo.RemovePatientToMedicalProcedureIDs(ids...)
}

// ClearPatientToRightToTreatment clears all "PatientToRightToTreatment" edges to the RightToTreatment entity.
func (puo *PatientUpdateOne) ClearPatientToRightToTreatment() *PatientUpdateOne {
	puo.mutation.ClearPatientToRightToTreatment()
	return puo
}

// RemovePatientToRightToTreatmentIDs removes the "PatientToRightToTreatment" edge to RightToTreatment entities by IDs.
func (puo *PatientUpdateOne) RemovePatientToRightToTreatmentIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientToRightToTreatmentIDs(ids...)
	return puo
}

// RemovePatientToRightToTreatment removes "PatientToRightToTreatment" edges to RightToTreatment entities.
func (puo *PatientUpdateOne) RemovePatientToRightToTreatment(r ...*RightToTreatment) *PatientUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return puo.RemovePatientToRightToTreatmentIDs(ids...)
}

// ClearPatientToDiagnosis clears all "PatientToDiagnosis" edges to the Diagnosis entity.
func (puo *PatientUpdateOne) ClearPatientToDiagnosis() *PatientUpdateOne {
	puo.mutation.ClearPatientToDiagnosis()
	return puo
}

// RemovePatientToDiagnosiIDs removes the "PatientToDiagnosis" edge to Diagnosis entities by IDs.
func (puo *PatientUpdateOne) RemovePatientToDiagnosiIDs(ids ...int) *PatientUpdateOne {
	puo.mutation.RemovePatientToDiagnosiIDs(ids...)
	return puo
}

// RemovePatientToDiagnosis removes "PatientToDiagnosis" edges to Diagnosis entities.
func (puo *PatientUpdateOne) RemovePatientToDiagnosis(d ...*Diagnosis) *PatientUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return puo.RemovePatientToDiagnosiIDs(ids...)
}

// Save executes the query and returns the updated Patient entity.
func (puo *PatientUpdateOne) Save(ctx context.Context) (*Patient, error) {
	var (
		err  error
		node *Patient
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PatientMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PatientUpdateOne) SaveX(ctx context.Context) *Patient {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PatientUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PatientUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PatientUpdateOne) check() error {
	if v, ok := puo.mutation.PersonalID(); ok {
		if err := patient.PersonalIDValidator(v); err != nil {
			return &ValidationError{Name: "personalID", err: fmt.Errorf("ent: validator failed for field \"personalID\": %w", err)}
		}
	}
	if v, ok := puo.mutation.PatientName(); ok {
		if err := patient.PatientNameValidator(v); err != nil {
			return &ValidationError{Name: "patientName", err: fmt.Errorf("ent: validator failed for field \"patientName\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Age(); ok {
		if err := patient.AgeValidator(v); err != nil {
			return &ValidationError{Name: "age", err: fmt.Errorf("ent: validator failed for field \"age\": %w", err)}
		}
	}
	if v, ok := puo.mutation.HospitalNumber(); ok {
		if err := patient.HospitalNumberValidator(v); err != nil {
			return &ValidationError{Name: "hospitalNumber", err: fmt.Errorf("ent: validator failed for field \"hospitalNumber\": %w", err)}
		}
	}
	if v, ok := puo.mutation.DrugAllergy(); ok {
		if err := patient.DrugAllergyValidator(v); err != nil {
			return &ValidationError{Name: "drugAllergy", err: fmt.Errorf("ent: validator failed for field \"drugAllergy\": %w", err)}
		}
	}
	return nil
}

func (puo *PatientUpdateOne) sqlSave(ctx context.Context) (_node *Patient, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   patient.Table,
			Columns: patient.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: patient.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Patient.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PersonalID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldPersonalID,
		})
	}
	if value, ok := puo.mutation.AddedPersonalID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldPersonalID,
		})
	}
	if value, ok := puo.mutation.PatientName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldPatientName,
		})
	}
	if value, ok := puo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldAge,
		})
	}
	if value, ok := puo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: patient.FieldAge,
		})
	}
	if value, ok := puo.mutation.HospitalNumber(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldHospitalNumber,
		})
	}
	if value, ok := puo.mutation.DrugAllergy(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: patient.FieldDrugAllergy,
		})
	}
	if value, ok := puo.mutation.AddedTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: patient.FieldAddedTime,
		})
	}
	if puo.mutation.PrefixCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.PrefixTable,
			Columns: []string{patient.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PrefixIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.PrefixTable,
			Columns: []string{patient.PrefixColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.GenderCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.GenderTable,
			Columns: []string{patient.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.GenderIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.GenderTable,
			Columns: []string{patient.GenderColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.BloodtypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.BloodtypeTable,
			Columns: []string{patient.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.BloodtypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   patient.BloodtypeTable,
			Columns: []string{patient.BloodtypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: bloodtype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TriageResultTable,
			Columns: []string{patient.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTriageResultIDs(); len(nodes) > 0 && !puo.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TriageResultTable,
			Columns: []string{patient.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.TriageResultTable,
			Columns: []string{patient.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToAppointmentResultsTable,
			Columns: []string{patient.PatientToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientToAppointmentResultsIDs(); len(nodes) > 0 && !puo.mutation.PatientToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToAppointmentResultsTable,
			Columns: []string{patient.PatientToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientToAppointmentResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToAppointmentResultsTable,
			Columns: []string{patient.PatientToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToMedicalProcedureTable,
			Columns: []string{patient.PatientToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientToMedicalProcedureIDs(); len(nodes) > 0 && !puo.mutation.PatientToMedicalProcedureCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToMedicalProcedureTable,
			Columns: []string{patient.PatientToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientToMedicalProcedureIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToMedicalProcedureTable,
			Columns: []string{patient.PatientToMedicalProcedureColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: medicalprocedure.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientToRightToTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToRightToTreatmentTable,
			Columns: []string{patient.PatientToRightToTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientToRightToTreatmentIDs(); len(nodes) > 0 && !puo.mutation.PatientToRightToTreatmentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToRightToTreatmentTable,
			Columns: []string{patient.PatientToRightToTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientToRightToTreatmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToRightToTreatmentTable,
			Columns: []string{patient.PatientToRightToTreatmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: righttotreatment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.PatientToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToDiagnosisTable,
			Columns: []string{patient.PatientToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedPatientToDiagnosisIDs(); len(nodes) > 0 && !puo.mutation.PatientToDiagnosisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToDiagnosisTable,
			Columns: []string{patient.PatientToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PatientToDiagnosisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   patient.PatientToDiagnosisTable,
			Columns: []string{patient.PatientToDiagnosisColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diagnosis.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Patient{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{patient.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
