// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/diagnosis"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/treatmenttype"
)

// DiagnosisUpdate is the builder for updating Diagnosis entities.
type DiagnosisUpdate struct {
	config
	hooks    []Hook
	mutation *DiagnosisMutation
}

// Where adds a new predicate for the DiagnosisUpdate builder.
func (du *DiagnosisUpdate) Where(ps ...predicate.Diagnosis) *DiagnosisUpdate {
	du.mutation.predicates = append(du.mutation.predicates, ps...)
	return du
}

// SetSymptom sets the "symptom" field.
func (du *DiagnosisUpdate) SetSymptom(s string) *DiagnosisUpdate {
	du.mutation.SetSymptom(s)
	return du
}

// SetOpinionresult sets the "Opinionresult" field.
func (du *DiagnosisUpdate) SetOpinionresult(s string) *DiagnosisUpdate {
	du.mutation.SetOpinionresult(s)
	return du
}

// SetNote sets the "note" field.
func (du *DiagnosisUpdate) SetNote(s string) *DiagnosisUpdate {
	du.mutation.SetNote(s)
	return du
}

// SetDiagnosisDate sets the "diagnosisDate" field.
func (du *DiagnosisUpdate) SetDiagnosisDate(t time.Time) *DiagnosisUpdate {
	du.mutation.SetDiagnosisDate(t)
	return du
}

// SetDoctorNameID sets the "Doctor_name" edge to the Doctor entity by ID.
func (du *DiagnosisUpdate) SetDoctorNameID(id int) *DiagnosisUpdate {
	du.mutation.SetDoctorNameID(id)
	return du
}

// SetNillableDoctorNameID sets the "Doctor_name" edge to the Doctor entity by ID if the given value is not nil.
func (du *DiagnosisUpdate) SetNillableDoctorNameID(id *int) *DiagnosisUpdate {
	if id != nil {
		du = du.SetDoctorNameID(*id)
	}
	return du
}

// SetDoctorName sets the "Doctor_name" edge to the Doctor entity.
func (du *DiagnosisUpdate) SetDoctorName(d *Doctor) *DiagnosisUpdate {
	return du.SetDoctorNameID(d.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (du *DiagnosisUpdate) SetPatientID(id int) *DiagnosisUpdate {
	du.mutation.SetPatientID(id)
	return du
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (du *DiagnosisUpdate) SetNillablePatientID(id *int) *DiagnosisUpdate {
	if id != nil {
		du = du.SetPatientID(*id)
	}
	return du
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (du *DiagnosisUpdate) SetPatient(p *Patient) *DiagnosisUpdate {
	return du.SetPatientID(p.ID)
}

// SetTypeID sets the "type" edge to the TreatmentType entity by ID.
func (du *DiagnosisUpdate) SetTypeID(id int) *DiagnosisUpdate {
	du.mutation.SetTypeID(id)
	return du
}

// SetNillableTypeID sets the "type" edge to the TreatmentType entity by ID if the given value is not nil.
func (du *DiagnosisUpdate) SetNillableTypeID(id *int) *DiagnosisUpdate {
	if id != nil {
		du = du.SetTypeID(*id)
	}
	return du
}

// SetType sets the "type" edge to the TreatmentType entity.
func (du *DiagnosisUpdate) SetType(t *TreatmentType) *DiagnosisUpdate {
	return du.SetTypeID(t.ID)
}

// Mutation returns the DiagnosisMutation object of the builder.
func (du *DiagnosisUpdate) Mutation() *DiagnosisMutation {
	return du.mutation
}

// ClearDoctorName clears the "Doctor_name" edge to the Doctor entity.
func (du *DiagnosisUpdate) ClearDoctorName() *DiagnosisUpdate {
	du.mutation.ClearDoctorName()
	return du
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (du *DiagnosisUpdate) ClearPatient() *DiagnosisUpdate {
	du.mutation.ClearPatient()
	return du
}

// ClearType clears the "type" edge to the TreatmentType entity.
func (du *DiagnosisUpdate) ClearType() *DiagnosisUpdate {
	du.mutation.ClearType()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiagnosisUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		if err = du.check(); err != nil {
			return 0, err
		}
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiagnosisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = du.check(); err != nil {
				return 0, err
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiagnosisUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiagnosisUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiagnosisUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DiagnosisUpdate) check() error {
	if v, ok := du.mutation.Symptom(); ok {
		if err := diagnosis.SymptomValidator(v); err != nil {
			return &ValidationError{Name: "symptom", err: fmt.Errorf("ent: validator failed for field \"symptom\": %w", err)}
		}
	}
	if v, ok := du.mutation.Opinionresult(); ok {
		if err := diagnosis.OpinionresultValidator(v); err != nil {
			return &ValidationError{Name: "Opinionresult", err: fmt.Errorf("ent: validator failed for field \"Opinionresult\": %w", err)}
		}
	}
	if v, ok := du.mutation.Note(); ok {
		if err := diagnosis.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (du *DiagnosisUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   diagnosis.Table,
			Columns: diagnosis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diagnosis.FieldID,
			},
		},
	}
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Symptom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diagnosis.FieldSymptom,
		})
	}
	if value, ok := du.mutation.Opinionresult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diagnosis.FieldOpinionresult,
		})
	}
	if value, ok := du.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diagnosis.FieldNote,
		})
	}
	if value, ok := du.mutation.DiagnosisDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: diagnosis.FieldDiagnosisDate,
		})
	}
	if du.mutation.DoctorNameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.DoctorNameTable,
			Columns: []string{diagnosis.DoctorNameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DoctorNameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.DoctorNameTable,
			Columns: []string{diagnosis.DoctorNameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.PatientTable,
			Columns: []string{diagnosis.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.PatientTable,
			Columns: []string{diagnosis.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.TypeTable,
			Columns: []string{diagnosis.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.TypeTable,
			Columns: []string{diagnosis.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diagnosis.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DiagnosisUpdateOne is the builder for updating a single Diagnosis entity.
type DiagnosisUpdateOne struct {
	config
	hooks    []Hook
	mutation *DiagnosisMutation
}

// SetSymptom sets the "symptom" field.
func (duo *DiagnosisUpdateOne) SetSymptom(s string) *DiagnosisUpdateOne {
	duo.mutation.SetSymptom(s)
	return duo
}

// SetOpinionresult sets the "Opinionresult" field.
func (duo *DiagnosisUpdateOne) SetOpinionresult(s string) *DiagnosisUpdateOne {
	duo.mutation.SetOpinionresult(s)
	return duo
}

// SetNote sets the "note" field.
func (duo *DiagnosisUpdateOne) SetNote(s string) *DiagnosisUpdateOne {
	duo.mutation.SetNote(s)
	return duo
}

// SetDiagnosisDate sets the "diagnosisDate" field.
func (duo *DiagnosisUpdateOne) SetDiagnosisDate(t time.Time) *DiagnosisUpdateOne {
	duo.mutation.SetDiagnosisDate(t)
	return duo
}

// SetDoctorNameID sets the "Doctor_name" edge to the Doctor entity by ID.
func (duo *DiagnosisUpdateOne) SetDoctorNameID(id int) *DiagnosisUpdateOne {
	duo.mutation.SetDoctorNameID(id)
	return duo
}

// SetNillableDoctorNameID sets the "Doctor_name" edge to the Doctor entity by ID if the given value is not nil.
func (duo *DiagnosisUpdateOne) SetNillableDoctorNameID(id *int) *DiagnosisUpdateOne {
	if id != nil {
		duo = duo.SetDoctorNameID(*id)
	}
	return duo
}

// SetDoctorName sets the "Doctor_name" edge to the Doctor entity.
func (duo *DiagnosisUpdateOne) SetDoctorName(d *Doctor) *DiagnosisUpdateOne {
	return duo.SetDoctorNameID(d.ID)
}

// SetPatientID sets the "Patient" edge to the Patient entity by ID.
func (duo *DiagnosisUpdateOne) SetPatientID(id int) *DiagnosisUpdateOne {
	duo.mutation.SetPatientID(id)
	return duo
}

// SetNillablePatientID sets the "Patient" edge to the Patient entity by ID if the given value is not nil.
func (duo *DiagnosisUpdateOne) SetNillablePatientID(id *int) *DiagnosisUpdateOne {
	if id != nil {
		duo = duo.SetPatientID(*id)
	}
	return duo
}

// SetPatient sets the "Patient" edge to the Patient entity.
func (duo *DiagnosisUpdateOne) SetPatient(p *Patient) *DiagnosisUpdateOne {
	return duo.SetPatientID(p.ID)
}

// SetTypeID sets the "type" edge to the TreatmentType entity by ID.
func (duo *DiagnosisUpdateOne) SetTypeID(id int) *DiagnosisUpdateOne {
	duo.mutation.SetTypeID(id)
	return duo
}

// SetNillableTypeID sets the "type" edge to the TreatmentType entity by ID if the given value is not nil.
func (duo *DiagnosisUpdateOne) SetNillableTypeID(id *int) *DiagnosisUpdateOne {
	if id != nil {
		duo = duo.SetTypeID(*id)
	}
	return duo
}

// SetType sets the "type" edge to the TreatmentType entity.
func (duo *DiagnosisUpdateOne) SetType(t *TreatmentType) *DiagnosisUpdateOne {
	return duo.SetTypeID(t.ID)
}

// Mutation returns the DiagnosisMutation object of the builder.
func (duo *DiagnosisUpdateOne) Mutation() *DiagnosisMutation {
	return duo.mutation
}

// ClearDoctorName clears the "Doctor_name" edge to the Doctor entity.
func (duo *DiagnosisUpdateOne) ClearDoctorName() *DiagnosisUpdateOne {
	duo.mutation.ClearDoctorName()
	return duo
}

// ClearPatient clears the "Patient" edge to the Patient entity.
func (duo *DiagnosisUpdateOne) ClearPatient() *DiagnosisUpdateOne {
	duo.mutation.ClearPatient()
	return duo
}

// ClearType clears the "type" edge to the TreatmentType entity.
func (duo *DiagnosisUpdateOne) ClearType() *DiagnosisUpdateOne {
	duo.mutation.ClearType()
	return duo
}

// Save executes the query and returns the updated Diagnosis entity.
func (duo *DiagnosisUpdateOne) Save(ctx context.Context) (*Diagnosis, error) {
	var (
		err  error
		node *Diagnosis
	)
	if len(duo.hooks) == 0 {
		if err = duo.check(); err != nil {
			return nil, err
		}
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiagnosisMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = duo.check(); err != nil {
				return nil, err
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiagnosisUpdateOne) SaveX(ctx context.Context) *Diagnosis {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiagnosisUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiagnosisUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DiagnosisUpdateOne) check() error {
	if v, ok := duo.mutation.Symptom(); ok {
		if err := diagnosis.SymptomValidator(v); err != nil {
			return &ValidationError{Name: "symptom", err: fmt.Errorf("ent: validator failed for field \"symptom\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Opinionresult(); ok {
		if err := diagnosis.OpinionresultValidator(v); err != nil {
			return &ValidationError{Name: "Opinionresult", err: fmt.Errorf("ent: validator failed for field \"Opinionresult\": %w", err)}
		}
	}
	if v, ok := duo.mutation.Note(); ok {
		if err := diagnosis.NoteValidator(v); err != nil {
			return &ValidationError{Name: "note", err: fmt.Errorf("ent: validator failed for field \"note\": %w", err)}
		}
	}
	return nil
}

func (duo *DiagnosisUpdateOne) sqlSave(ctx context.Context) (_node *Diagnosis, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   diagnosis.Table,
			Columns: diagnosis.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diagnosis.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Diagnosis.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Symptom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diagnosis.FieldSymptom,
		})
	}
	if value, ok := duo.mutation.Opinionresult(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diagnosis.FieldOpinionresult,
		})
	}
	if value, ok := duo.mutation.Note(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diagnosis.FieldNote,
		})
	}
	if value, ok := duo.mutation.DiagnosisDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: diagnosis.FieldDiagnosisDate,
		})
	}
	if duo.mutation.DoctorNameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.DoctorNameTable,
			Columns: []string{diagnosis.DoctorNameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DoctorNameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.DoctorNameTable,
			Columns: []string{diagnosis.DoctorNameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: doctor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.PatientCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.PatientTable,
			Columns: []string{diagnosis.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.PatientIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.PatientTable,
			Columns: []string{diagnosis.PatientColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: patient.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.TypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.TypeTable,
			Columns: []string{diagnosis.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatmenttype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.TypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   diagnosis.TypeTable,
			Columns: []string{diagnosis.TypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: treatmenttype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Diagnosis{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diagnosis.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
