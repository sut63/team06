// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/triageresult"
)

// NurseCreate is the builder for creating a Nurse entity.
type NurseCreate struct {
	config
	mutation *NurseMutation
	hooks    []Hook
}

// SetNurseName sets the "nurseName" field.
func (nc *NurseCreate) SetNurseName(s string) *NurseCreate {
	nc.mutation.SetNurseName(s)
	return nc
}

// SetNurseUsername sets the "nurseUsername" field.
func (nc *NurseCreate) SetNurseUsername(s string) *NurseCreate {
	nc.mutation.SetNurseUsername(s)
	return nc
}

// SetNursePassword sets the "nursePassword" field.
func (nc *NurseCreate) SetNursePassword(s string) *NurseCreate {
	nc.mutation.SetNursePassword(s)
	return nc
}

// AddTriageResultIDs adds the "triageResult" edge to the TriageResult entity by IDs.
func (nc *NurseCreate) AddTriageResultIDs(ids ...int) *NurseCreate {
	nc.mutation.AddTriageResultIDs(ids...)
	return nc
}

// AddTriageResult adds the "triageResult" edges to the TriageResult entity.
func (nc *NurseCreate) AddTriageResult(t ...*TriageResult) *NurseCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddTriageResultIDs(ids...)
}

// AddNurseToAppointmentResultIDs adds the "NurseToAppointmentResults" edge to the AppointmentResults entity by IDs.
func (nc *NurseCreate) AddNurseToAppointmentResultIDs(ids ...int) *NurseCreate {
	nc.mutation.AddNurseToAppointmentResultIDs(ids...)
	return nc
}

// AddNurseToAppointmentResults adds the "NurseToAppointmentResults" edges to the AppointmentResults entity.
func (nc *NurseCreate) AddNurseToAppointmentResults(a ...*AppointmentResults) *NurseCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nc.AddNurseToAppointmentResultIDs(ids...)
}

// Mutation returns the NurseMutation object of the builder.
func (nc *NurseCreate) Mutation() *NurseMutation {
	return nc.mutation
}

// Save creates the Nurse in the database.
func (nc *NurseCreate) Save(ctx context.Context) (*Nurse, error) {
	var (
		err  error
		node *Nurse
	)
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NurseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			node, err = nc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NurseCreate) SaveX(ctx context.Context) *Nurse {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (nc *NurseCreate) check() error {
	if _, ok := nc.mutation.NurseName(); !ok {
		return &ValidationError{Name: "nurseName", err: errors.New("ent: missing required field \"nurseName\"")}
	}
	if v, ok := nc.mutation.NurseName(); ok {
		if err := nurse.NurseNameValidator(v); err != nil {
			return &ValidationError{Name: "nurseName", err: fmt.Errorf("ent: validator failed for field \"nurseName\": %w", err)}
		}
	}
	if _, ok := nc.mutation.NurseUsername(); !ok {
		return &ValidationError{Name: "nurseUsername", err: errors.New("ent: missing required field \"nurseUsername\"")}
	}
	if v, ok := nc.mutation.NurseUsername(); ok {
		if err := nurse.NurseUsernameValidator(v); err != nil {
			return &ValidationError{Name: "nurseUsername", err: fmt.Errorf("ent: validator failed for field \"nurseUsername\": %w", err)}
		}
	}
	if _, ok := nc.mutation.NursePassword(); !ok {
		return &ValidationError{Name: "nursePassword", err: errors.New("ent: missing required field \"nursePassword\"")}
	}
	if v, ok := nc.mutation.NursePassword(); ok {
		if err := nurse.NursePasswordValidator(v); err != nil {
			return &ValidationError{Name: "nursePassword", err: fmt.Errorf("ent: validator failed for field \"nursePassword\": %w", err)}
		}
	}
	return nil
}

func (nc *NurseCreate) sqlSave(ctx context.Context) (*Nurse, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nc *NurseCreate) createSpec() (*Nurse, *sqlgraph.CreateSpec) {
	var (
		_node = &Nurse{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nurse.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nurse.FieldID,
			},
		}
	)
	if value, ok := nc.mutation.NurseName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNurseName,
		})
		_node.NurseName = value
	}
	if value, ok := nc.mutation.NurseUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNurseUsername,
		})
		_node.NurseUsername = value
	}
	if value, ok := nc.mutation.NursePassword(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNursePassword,
		})
		_node.NursePassword = value
	}
	if nodes := nc.mutation.TriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.NurseToAppointmentResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NurseCreateBulk is the builder for creating many Nurse entities in bulk.
type NurseCreateBulk struct {
	config
	builders []*NurseCreate
}

// Save creates the Nurse entities in the database.
func (ncb *NurseCreateBulk) Save(ctx context.Context) ([]*Nurse, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Nurse, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NurseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NurseCreateBulk) SaveX(ctx context.Context) []*Nurse {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
