// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/predicate"
	"github.com/team06/app/ent/triageresult"
)

// NurseUpdate is the builder for updating Nurse entities.
type NurseUpdate struct {
	config
	hooks    []Hook
	mutation *NurseMutation
}

// Where adds a new predicate for the NurseUpdate builder.
func (nu *NurseUpdate) Where(ps ...predicate.Nurse) *NurseUpdate {
	nu.mutation.predicates = append(nu.mutation.predicates, ps...)
	return nu
}

// SetNurseName sets the "nurseName" field.
func (nu *NurseUpdate) SetNurseName(s string) *NurseUpdate {
	nu.mutation.SetNurseName(s)
	return nu
}

// SetNurseUsername sets the "nurseUsername" field.
func (nu *NurseUpdate) SetNurseUsername(s string) *NurseUpdate {
	nu.mutation.SetNurseUsername(s)
	return nu
}

// SetNursePassword sets the "nursePassword" field.
func (nu *NurseUpdate) SetNursePassword(s string) *NurseUpdate {
	nu.mutation.SetNursePassword(s)
	return nu
}

// AddTriageResultIDs adds the "triageResult" edge to the TriageResult entity by IDs.
func (nu *NurseUpdate) AddTriageResultIDs(ids ...int) *NurseUpdate {
	nu.mutation.AddTriageResultIDs(ids...)
	return nu
}

// AddTriageResult adds the "triageResult" edges to the TriageResult entity.
func (nu *NurseUpdate) AddTriageResult(t ...*TriageResult) *NurseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.AddTriageResultIDs(ids...)
}

// AddNurseToAppointmentResultIDs adds the "NurseToAppointmentResults" edge to the AppointmentResults entity by IDs.
func (nu *NurseUpdate) AddNurseToAppointmentResultIDs(ids ...int) *NurseUpdate {
	nu.mutation.AddNurseToAppointmentResultIDs(ids...)
	return nu
}

// AddNurseToAppointmentResults adds the "NurseToAppointmentResults" edges to the AppointmentResults entity.
func (nu *NurseUpdate) AddNurseToAppointmentResults(a ...*AppointmentResults) *NurseUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.AddNurseToAppointmentResultIDs(ids...)
}

// Mutation returns the NurseMutation object of the builder.
func (nu *NurseUpdate) Mutation() *NurseMutation {
	return nu.mutation
}

// ClearTriageResult clears all "triageResult" edges to the TriageResult entity.
func (nu *NurseUpdate) ClearTriageResult() *NurseUpdate {
	nu.mutation.ClearTriageResult()
	return nu
}

// RemoveTriageResultIDs removes the "triageResult" edge to TriageResult entities by IDs.
func (nu *NurseUpdate) RemoveTriageResultIDs(ids ...int) *NurseUpdate {
	nu.mutation.RemoveTriageResultIDs(ids...)
	return nu
}

// RemoveTriageResult removes "triageResult" edges to TriageResult entities.
func (nu *NurseUpdate) RemoveTriageResult(t ...*TriageResult) *NurseUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.RemoveTriageResultIDs(ids...)
}

// ClearNurseToAppointmentResults clears all "NurseToAppointmentResults" edges to the AppointmentResults entity.
func (nu *NurseUpdate) ClearNurseToAppointmentResults() *NurseUpdate {
	nu.mutation.ClearNurseToAppointmentResults()
	return nu
}

// RemoveNurseToAppointmentResultIDs removes the "NurseToAppointmentResults" edge to AppointmentResults entities by IDs.
func (nu *NurseUpdate) RemoveNurseToAppointmentResultIDs(ids ...int) *NurseUpdate {
	nu.mutation.RemoveNurseToAppointmentResultIDs(ids...)
	return nu
}

// RemoveNurseToAppointmentResults removes "NurseToAppointmentResults" edges to AppointmentResults entities.
func (nu *NurseUpdate) RemoveNurseToAppointmentResults(a ...*AppointmentResults) *NurseUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nu.RemoveNurseToAppointmentResultIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NurseUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NurseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NurseUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NurseUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NurseUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NurseUpdate) check() error {
	if v, ok := nu.mutation.NurseName(); ok {
		if err := nurse.NurseNameValidator(v); err != nil {
			return &ValidationError{Name: "nurseName", err: fmt.Errorf("ent: validator failed for field \"nurseName\": %w", err)}
		}
	}
	if v, ok := nu.mutation.NurseUsername(); ok {
		if err := nurse.NurseUsernameValidator(v); err != nil {
			return &ValidationError{Name: "nurseUsername", err: fmt.Errorf("ent: validator failed for field \"nurseUsername\": %w", err)}
		}
	}
	if v, ok := nu.mutation.NursePassword(); ok {
		if err := nurse.NursePasswordValidator(v); err != nil {
			return &ValidationError{Name: "nursePassword", err: fmt.Errorf("ent: validator failed for field \"nursePassword\": %w", err)}
		}
	}
	return nil
}

func (nu *NurseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nurse.Table,
			Columns: nurse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nurse.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.NurseName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNurseName,
		})
	}
	if value, ok := nu.mutation.NurseUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNurseUsername,
		})
	}
	if value, ok := nu.mutation.NursePassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNursePassword,
		})
	}
	if nu.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedTriageResultIDs(); len(nodes) > 0 && !nu.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.TriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NurseToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNurseToAppointmentResultsIDs(); len(nodes) > 0 && !nu.mutation.NurseToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NurseToAppointmentResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nurse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// NurseUpdateOne is the builder for updating a single Nurse entity.
type NurseUpdateOne struct {
	config
	hooks    []Hook
	mutation *NurseMutation
}

// SetNurseName sets the "nurseName" field.
func (nuo *NurseUpdateOne) SetNurseName(s string) *NurseUpdateOne {
	nuo.mutation.SetNurseName(s)
	return nuo
}

// SetNurseUsername sets the "nurseUsername" field.
func (nuo *NurseUpdateOne) SetNurseUsername(s string) *NurseUpdateOne {
	nuo.mutation.SetNurseUsername(s)
	return nuo
}

// SetNursePassword sets the "nursePassword" field.
func (nuo *NurseUpdateOne) SetNursePassword(s string) *NurseUpdateOne {
	nuo.mutation.SetNursePassword(s)
	return nuo
}

// AddTriageResultIDs adds the "triageResult" edge to the TriageResult entity by IDs.
func (nuo *NurseUpdateOne) AddTriageResultIDs(ids ...int) *NurseUpdateOne {
	nuo.mutation.AddTriageResultIDs(ids...)
	return nuo
}

// AddTriageResult adds the "triageResult" edges to the TriageResult entity.
func (nuo *NurseUpdateOne) AddTriageResult(t ...*TriageResult) *NurseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.AddTriageResultIDs(ids...)
}

// AddNurseToAppointmentResultIDs adds the "NurseToAppointmentResults" edge to the AppointmentResults entity by IDs.
func (nuo *NurseUpdateOne) AddNurseToAppointmentResultIDs(ids ...int) *NurseUpdateOne {
	nuo.mutation.AddNurseToAppointmentResultIDs(ids...)
	return nuo
}

// AddNurseToAppointmentResults adds the "NurseToAppointmentResults" edges to the AppointmentResults entity.
func (nuo *NurseUpdateOne) AddNurseToAppointmentResults(a ...*AppointmentResults) *NurseUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.AddNurseToAppointmentResultIDs(ids...)
}

// Mutation returns the NurseMutation object of the builder.
func (nuo *NurseUpdateOne) Mutation() *NurseMutation {
	return nuo.mutation
}

// ClearTriageResult clears all "triageResult" edges to the TriageResult entity.
func (nuo *NurseUpdateOne) ClearTriageResult() *NurseUpdateOne {
	nuo.mutation.ClearTriageResult()
	return nuo
}

// RemoveTriageResultIDs removes the "triageResult" edge to TriageResult entities by IDs.
func (nuo *NurseUpdateOne) RemoveTriageResultIDs(ids ...int) *NurseUpdateOne {
	nuo.mutation.RemoveTriageResultIDs(ids...)
	return nuo
}

// RemoveTriageResult removes "triageResult" edges to TriageResult entities.
func (nuo *NurseUpdateOne) RemoveTriageResult(t ...*TriageResult) *NurseUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.RemoveTriageResultIDs(ids...)
}

// ClearNurseToAppointmentResults clears all "NurseToAppointmentResults" edges to the AppointmentResults entity.
func (nuo *NurseUpdateOne) ClearNurseToAppointmentResults() *NurseUpdateOne {
	nuo.mutation.ClearNurseToAppointmentResults()
	return nuo
}

// RemoveNurseToAppointmentResultIDs removes the "NurseToAppointmentResults" edge to AppointmentResults entities by IDs.
func (nuo *NurseUpdateOne) RemoveNurseToAppointmentResultIDs(ids ...int) *NurseUpdateOne {
	nuo.mutation.RemoveNurseToAppointmentResultIDs(ids...)
	return nuo
}

// RemoveNurseToAppointmentResults removes "NurseToAppointmentResults" edges to AppointmentResults entities.
func (nuo *NurseUpdateOne) RemoveNurseToAppointmentResults(a ...*AppointmentResults) *NurseUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return nuo.RemoveNurseToAppointmentResultIDs(ids...)
}

// Save executes the query and returns the updated Nurse entity.
func (nuo *NurseUpdateOne) Save(ctx context.Context) (*Nurse, error) {
	var (
		err  error
		node *Nurse
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NurseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NurseUpdateOne) SaveX(ctx context.Context) *Nurse {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NurseUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NurseUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NurseUpdateOne) check() error {
	if v, ok := nuo.mutation.NurseName(); ok {
		if err := nurse.NurseNameValidator(v); err != nil {
			return &ValidationError{Name: "nurseName", err: fmt.Errorf("ent: validator failed for field \"nurseName\": %w", err)}
		}
	}
	if v, ok := nuo.mutation.NurseUsername(); ok {
		if err := nurse.NurseUsernameValidator(v); err != nil {
			return &ValidationError{Name: "nurseUsername", err: fmt.Errorf("ent: validator failed for field \"nurseUsername\": %w", err)}
		}
	}
	if v, ok := nuo.mutation.NursePassword(); ok {
		if err := nurse.NursePasswordValidator(v); err != nil {
			return &ValidationError{Name: "nursePassword", err: fmt.Errorf("ent: validator failed for field \"nursePassword\": %w", err)}
		}
	}
	return nil
}

func (nuo *NurseUpdateOne) sqlSave(ctx context.Context) (_node *Nurse, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nurse.Table,
			Columns: nurse.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: nurse.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Nurse.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := nuo.mutation.NurseName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNurseName,
		})
	}
	if value, ok := nuo.mutation.NurseUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNurseUsername,
		})
	}
	if value, ok := nuo.mutation.NursePassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nurse.FieldNursePassword,
		})
	}
	if nuo.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedTriageResultIDs(); len(nodes) > 0 && !nuo.mutation.TriageResultCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.TriageResultIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.TriageResultTable,
			Columns: []string{nurse.TriageResultColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: triageresult.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NurseToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNurseToAppointmentResultsIDs(); len(nodes) > 0 && !nuo.mutation.NurseToAppointmentResultsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NurseToAppointmentResultsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nurse.NurseToAppointmentResultsTable,
			Columns: []string{nurse.NurseToAppointmentResultsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: appointmentresults.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Nurse{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nurse.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
