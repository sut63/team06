// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/team06/app/ent/migrate"

	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/bloodtype"
	"github.com/team06/app/ent/department"
	"github.com/team06/app/ent/diagnosis"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/gender"
	"github.com/team06/app/ent/hospital"
	"github.com/team06/app/ent/medicalprocedure"
	"github.com/team06/app/ent/medicalrecord"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/prefix"
	"github.com/team06/app/ent/proceduretype"
	"github.com/team06/app/ent/righttotreatment"
	"github.com/team06/app/ent/righttotreatmenttype"
	"github.com/team06/app/ent/room"
	"github.com/team06/app/ent/treatmenttype"
	"github.com/team06/app/ent/triageresult"
	"github.com/team06/app/ent/urgencylevel"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// AppointmentResults is the client for interacting with the AppointmentResults builders.
	AppointmentResults *AppointmentResultsClient
	// BloodType is the client for interacting with the BloodType builders.
	BloodType *BloodTypeClient
	// Department is the client for interacting with the Department builders.
	Department *DepartmentClient
	// Diagnosis is the client for interacting with the Diagnosis builders.
	Diagnosis *DiagnosisClient
	// Doctor is the client for interacting with the Doctor builders.
	Doctor *DoctorClient
	// Gender is the client for interacting with the Gender builders.
	Gender *GenderClient
	// Hospital is the client for interacting with the Hospital builders.
	Hospital *HospitalClient
	// MedicalProcedure is the client for interacting with the MedicalProcedure builders.
	MedicalProcedure *MedicalProcedureClient
	// MedicalRecord is the client for interacting with the MedicalRecord builders.
	MedicalRecord *MedicalRecordClient
	// Nurse is the client for interacting with the Nurse builders.
	Nurse *NurseClient
	// Patient is the client for interacting with the Patient builders.
	Patient *PatientClient
	// Prefix is the client for interacting with the Prefix builders.
	Prefix *PrefixClient
	// ProcedureType is the client for interacting with the ProcedureType builders.
	ProcedureType *ProcedureTypeClient
	// RightToTreatment is the client for interacting with the RightToTreatment builders.
	RightToTreatment *RightToTreatmentClient
	// RightToTreatmentType is the client for interacting with the RightToTreatmentType builders.
	RightToTreatmentType *RightToTreatmentTypeClient
	// Room is the client for interacting with the Room builders.
	Room *RoomClient
	// TreatmentType is the client for interacting with the TreatmentType builders.
	TreatmentType *TreatmentTypeClient
	// TriageResult is the client for interacting with the TriageResult builders.
	TriageResult *TriageResultClient
	// UrgencyLevel is the client for interacting with the UrgencyLevel builders.
	UrgencyLevel *UrgencyLevelClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.AppointmentResults = NewAppointmentResultsClient(c.config)
	c.BloodType = NewBloodTypeClient(c.config)
	c.Department = NewDepartmentClient(c.config)
	c.Diagnosis = NewDiagnosisClient(c.config)
	c.Doctor = NewDoctorClient(c.config)
	c.Gender = NewGenderClient(c.config)
	c.Hospital = NewHospitalClient(c.config)
	c.MedicalProcedure = NewMedicalProcedureClient(c.config)
	c.MedicalRecord = NewMedicalRecordClient(c.config)
	c.Nurse = NewNurseClient(c.config)
	c.Patient = NewPatientClient(c.config)
	c.Prefix = NewPrefixClient(c.config)
	c.ProcedureType = NewProcedureTypeClient(c.config)
	c.RightToTreatment = NewRightToTreatmentClient(c.config)
	c.RightToTreatmentType = NewRightToTreatmentTypeClient(c.config)
	c.Room = NewRoomClient(c.config)
	c.TreatmentType = NewTreatmentTypeClient(c.config)
	c.TriageResult = NewTriageResultClient(c.config)
	c.UrgencyLevel = NewUrgencyLevelClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:                  ctx,
		config:               cfg,
		AppointmentResults:   NewAppointmentResultsClient(cfg),
		BloodType:            NewBloodTypeClient(cfg),
		Department:           NewDepartmentClient(cfg),
		Diagnosis:            NewDiagnosisClient(cfg),
		Doctor:               NewDoctorClient(cfg),
		Gender:               NewGenderClient(cfg),
		Hospital:             NewHospitalClient(cfg),
		MedicalProcedure:     NewMedicalProcedureClient(cfg),
		MedicalRecord:        NewMedicalRecordClient(cfg),
		Nurse:                NewNurseClient(cfg),
		Patient:              NewPatientClient(cfg),
		Prefix:               NewPrefixClient(cfg),
		ProcedureType:        NewProcedureTypeClient(cfg),
		RightToTreatment:     NewRightToTreatmentClient(cfg),
		RightToTreatmentType: NewRightToTreatmentTypeClient(cfg),
		Room:                 NewRoomClient(cfg),
		TreatmentType:        NewTreatmentTypeClient(cfg),
		TriageResult:         NewTriageResultClient(cfg),
		UrgencyLevel:         NewUrgencyLevelClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:               cfg,
		AppointmentResults:   NewAppointmentResultsClient(cfg),
		BloodType:            NewBloodTypeClient(cfg),
		Department:           NewDepartmentClient(cfg),
		Diagnosis:            NewDiagnosisClient(cfg),
		Doctor:               NewDoctorClient(cfg),
		Gender:               NewGenderClient(cfg),
		Hospital:             NewHospitalClient(cfg),
		MedicalProcedure:     NewMedicalProcedureClient(cfg),
		MedicalRecord:        NewMedicalRecordClient(cfg),
		Nurse:                NewNurseClient(cfg),
		Patient:              NewPatientClient(cfg),
		Prefix:               NewPrefixClient(cfg),
		ProcedureType:        NewProcedureTypeClient(cfg),
		RightToTreatment:     NewRightToTreatmentClient(cfg),
		RightToTreatmentType: NewRightToTreatmentTypeClient(cfg),
		Room:                 NewRoomClient(cfg),
		TreatmentType:        NewTreatmentTypeClient(cfg),
		TriageResult:         NewTriageResultClient(cfg),
		UrgencyLevel:         NewUrgencyLevelClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		AppointmentResults.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.AppointmentResults.Use(hooks...)
	c.BloodType.Use(hooks...)
	c.Department.Use(hooks...)
	c.Diagnosis.Use(hooks...)
	c.Doctor.Use(hooks...)
	c.Gender.Use(hooks...)
	c.Hospital.Use(hooks...)
	c.MedicalProcedure.Use(hooks...)
	c.MedicalRecord.Use(hooks...)
	c.Nurse.Use(hooks...)
	c.Patient.Use(hooks...)
	c.Prefix.Use(hooks...)
	c.ProcedureType.Use(hooks...)
	c.RightToTreatment.Use(hooks...)
	c.RightToTreatmentType.Use(hooks...)
	c.Room.Use(hooks...)
	c.TreatmentType.Use(hooks...)
	c.TriageResult.Use(hooks...)
	c.UrgencyLevel.Use(hooks...)
}

// AppointmentResultsClient is a client for the AppointmentResults schema.
type AppointmentResultsClient struct {
	config
}

// NewAppointmentResultsClient returns a client for the AppointmentResults from the given config.
func NewAppointmentResultsClient(c config) *AppointmentResultsClient {
	return &AppointmentResultsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `appointmentresults.Hooks(f(g(h())))`.
func (c *AppointmentResultsClient) Use(hooks ...Hook) {
	c.hooks.AppointmentResults = append(c.hooks.AppointmentResults, hooks...)
}

// Create returns a create builder for AppointmentResults.
func (c *AppointmentResultsClient) Create() *AppointmentResultsCreate {
	mutation := newAppointmentResultsMutation(c.config, OpCreate)
	return &AppointmentResultsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AppointmentResults entities.
func (c *AppointmentResultsClient) CreateBulk(builders ...*AppointmentResultsCreate) *AppointmentResultsCreateBulk {
	return &AppointmentResultsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AppointmentResults.
func (c *AppointmentResultsClient) Update() *AppointmentResultsUpdate {
	mutation := newAppointmentResultsMutation(c.config, OpUpdate)
	return &AppointmentResultsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AppointmentResultsClient) UpdateOne(ar *AppointmentResults) *AppointmentResultsUpdateOne {
	mutation := newAppointmentResultsMutation(c.config, OpUpdateOne, withAppointmentResults(ar))
	return &AppointmentResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AppointmentResultsClient) UpdateOneID(id int) *AppointmentResultsUpdateOne {
	mutation := newAppointmentResultsMutation(c.config, OpUpdateOne, withAppointmentResultsID(id))
	return &AppointmentResultsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AppointmentResults.
func (c *AppointmentResultsClient) Delete() *AppointmentResultsDelete {
	mutation := newAppointmentResultsMutation(c.config, OpDelete)
	return &AppointmentResultsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AppointmentResultsClient) DeleteOne(ar *AppointmentResults) *AppointmentResultsDeleteOne {
	return c.DeleteOneID(ar.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AppointmentResultsClient) DeleteOneID(id int) *AppointmentResultsDeleteOne {
	builder := c.Delete().Where(appointmentresults.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AppointmentResultsDeleteOne{builder}
}

// Query returns a query builder for AppointmentResults.
func (c *AppointmentResultsClient) Query() *AppointmentResultsQuery {
	return &AppointmentResultsQuery{config: c.config}
}

// Get returns a AppointmentResults entity by its id.
func (c *AppointmentResultsClient) Get(ctx context.Context, id int) (*AppointmentResults, error) {
	return c.Query().Where(appointmentresults.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AppointmentResultsClient) GetX(ctx context.Context, id int) *AppointmentResults {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryAppointmentResultsToPatient queries the appointmentResultsToPatient edge of a AppointmentResults.
func (c *AppointmentResultsClient) QueryAppointmentResultsToPatient(ar *AppointmentResults) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToPatientTable, appointmentresults.AppointmentResultsToPatientColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppointmentResultsToNurse queries the appointmentResultsToNurse edge of a AppointmentResults.
func (c *AppointmentResultsClient) QueryAppointmentResultsToNurse(ar *AppointmentResults) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToNurseTable, appointmentresults.AppointmentResultsToNurseColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppointmentResultsToDoctor queries the appointmentResultsToDoctor edge of a AppointmentResults.
func (c *AppointmentResultsClient) QueryAppointmentResultsToDoctor(ar *AppointmentResults) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToDoctorTable, appointmentresults.AppointmentResultsToDoctorColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAppointmentResultsToRoom queries the appointmentResultsToRoom edge of a AppointmentResults.
func (c *AppointmentResultsClient) QueryAppointmentResultsToRoom(ar *AppointmentResults) *RoomQuery {
	query := &RoomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ar.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(appointmentresults.Table, appointmentresults.FieldID, id),
			sqlgraph.To(room.Table, room.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, appointmentresults.AppointmentResultsToRoomTable, appointmentresults.AppointmentResultsToRoomColumn),
		)
		fromV = sqlgraph.Neighbors(ar.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AppointmentResultsClient) Hooks() []Hook {
	return c.hooks.AppointmentResults
}

// BloodTypeClient is a client for the BloodType schema.
type BloodTypeClient struct {
	config
}

// NewBloodTypeClient returns a client for the BloodType from the given config.
func NewBloodTypeClient(c config) *BloodTypeClient {
	return &BloodTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `bloodtype.Hooks(f(g(h())))`.
func (c *BloodTypeClient) Use(hooks ...Hook) {
	c.hooks.BloodType = append(c.hooks.BloodType, hooks...)
}

// Create returns a create builder for BloodType.
func (c *BloodTypeClient) Create() *BloodTypeCreate {
	mutation := newBloodTypeMutation(c.config, OpCreate)
	return &BloodTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of BloodType entities.
func (c *BloodTypeClient) CreateBulk(builders ...*BloodTypeCreate) *BloodTypeCreateBulk {
	return &BloodTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for BloodType.
func (c *BloodTypeClient) Update() *BloodTypeUpdate {
	mutation := newBloodTypeMutation(c.config, OpUpdate)
	return &BloodTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BloodTypeClient) UpdateOne(bt *BloodType) *BloodTypeUpdateOne {
	mutation := newBloodTypeMutation(c.config, OpUpdateOne, withBloodType(bt))
	return &BloodTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BloodTypeClient) UpdateOneID(id int) *BloodTypeUpdateOne {
	mutation := newBloodTypeMutation(c.config, OpUpdateOne, withBloodTypeID(id))
	return &BloodTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for BloodType.
func (c *BloodTypeClient) Delete() *BloodTypeDelete {
	mutation := newBloodTypeMutation(c.config, OpDelete)
	return &BloodTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BloodTypeClient) DeleteOne(bt *BloodType) *BloodTypeDeleteOne {
	return c.DeleteOneID(bt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BloodTypeClient) DeleteOneID(id int) *BloodTypeDeleteOne {
	builder := c.Delete().Where(bloodtype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BloodTypeDeleteOne{builder}
}

// Query returns a query builder for BloodType.
func (c *BloodTypeClient) Query() *BloodTypeQuery {
	return &BloodTypeQuery{config: c.config}
}

// Get returns a BloodType entity by its id.
func (c *BloodTypeClient) Get(ctx context.Context, id int) (*BloodType, error) {
	return c.Query().Where(bloodtype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BloodTypeClient) GetX(ctx context.Context, id int) *BloodType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryBloodTypeToPatient queries the BloodTypeToPatient edge of a BloodType.
func (c *BloodTypeClient) QueryBloodTypeToPatient(bt *BloodType) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := bt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(bloodtype.Table, bloodtype.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, bloodtype.BloodTypeToPatientTable, bloodtype.BloodTypeToPatientColumn),
		)
		fromV = sqlgraph.Neighbors(bt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BloodTypeClient) Hooks() []Hook {
	return c.hooks.BloodType
}

// DepartmentClient is a client for the Department schema.
type DepartmentClient struct {
	config
}

// NewDepartmentClient returns a client for the Department from the given config.
func NewDepartmentClient(c config) *DepartmentClient {
	return &DepartmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `department.Hooks(f(g(h())))`.
func (c *DepartmentClient) Use(hooks ...Hook) {
	c.hooks.Department = append(c.hooks.Department, hooks...)
}

// Create returns a create builder for Department.
func (c *DepartmentClient) Create() *DepartmentCreate {
	mutation := newDepartmentMutation(c.config, OpCreate)
	return &DepartmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Department entities.
func (c *DepartmentClient) CreateBulk(builders ...*DepartmentCreate) *DepartmentCreateBulk {
	return &DepartmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Department.
func (c *DepartmentClient) Update() *DepartmentUpdate {
	mutation := newDepartmentMutation(c.config, OpUpdate)
	return &DepartmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DepartmentClient) UpdateOne(d *Department) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartment(d))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DepartmentClient) UpdateOneID(id int) *DepartmentUpdateOne {
	mutation := newDepartmentMutation(c.config, OpUpdateOne, withDepartmentID(id))
	return &DepartmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Department.
func (c *DepartmentClient) Delete() *DepartmentDelete {
	mutation := newDepartmentMutation(c.config, OpDelete)
	return &DepartmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DepartmentClient) DeleteOne(d *Department) *DepartmentDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DepartmentClient) DeleteOneID(id int) *DepartmentDeleteOne {
	builder := c.Delete().Where(department.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DepartmentDeleteOne{builder}
}

// Query returns a query builder for Department.
func (c *DepartmentClient) Query() *DepartmentQuery {
	return &DepartmentQuery{config: c.config}
}

// Get returns a Department entity by its id.
func (c *DepartmentClient) Get(ctx context.Context, id int) (*Department, error) {
	return c.Query().Where(department.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DepartmentClient) GetX(ctx context.Context, id int) *Department {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTriageResult queries the triageResult edge of a Department.
func (c *DepartmentClient) QueryTriageResult(d *Department) *TriageResultQuery {
	query := &TriageResultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(department.Table, department.FieldID, id),
			sqlgraph.To(triageresult.Table, triageresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, department.TriageResultTable, department.TriageResultColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DepartmentClient) Hooks() []Hook {
	return c.hooks.Department
}

// DiagnosisClient is a client for the Diagnosis schema.
type DiagnosisClient struct {
	config
}

// NewDiagnosisClient returns a client for the Diagnosis from the given config.
func NewDiagnosisClient(c config) *DiagnosisClient {
	return &DiagnosisClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `diagnosis.Hooks(f(g(h())))`.
func (c *DiagnosisClient) Use(hooks ...Hook) {
	c.hooks.Diagnosis = append(c.hooks.Diagnosis, hooks...)
}

// Create returns a create builder for Diagnosis.
func (c *DiagnosisClient) Create() *DiagnosisCreate {
	mutation := newDiagnosisMutation(c.config, OpCreate)
	return &DiagnosisCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Diagnosis entities.
func (c *DiagnosisClient) CreateBulk(builders ...*DiagnosisCreate) *DiagnosisCreateBulk {
	return &DiagnosisCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Diagnosis.
func (c *DiagnosisClient) Update() *DiagnosisUpdate {
	mutation := newDiagnosisMutation(c.config, OpUpdate)
	return &DiagnosisUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DiagnosisClient) UpdateOne(d *Diagnosis) *DiagnosisUpdateOne {
	mutation := newDiagnosisMutation(c.config, OpUpdateOne, withDiagnosis(d))
	return &DiagnosisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DiagnosisClient) UpdateOneID(id int) *DiagnosisUpdateOne {
	mutation := newDiagnosisMutation(c.config, OpUpdateOne, withDiagnosisID(id))
	return &DiagnosisUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Diagnosis.
func (c *DiagnosisClient) Delete() *DiagnosisDelete {
	mutation := newDiagnosisMutation(c.config, OpDelete)
	return &DiagnosisDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DiagnosisClient) DeleteOne(d *Diagnosis) *DiagnosisDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DiagnosisClient) DeleteOneID(id int) *DiagnosisDeleteOne {
	builder := c.Delete().Where(diagnosis.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DiagnosisDeleteOne{builder}
}

// Query returns a query builder for Diagnosis.
func (c *DiagnosisClient) Query() *DiagnosisQuery {
	return &DiagnosisQuery{config: c.config}
}

// Get returns a Diagnosis entity by its id.
func (c *DiagnosisClient) Get(ctx context.Context, id int) (*Diagnosis, error) {
	return c.Query().Where(diagnosis.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DiagnosisClient) GetX(ctx context.Context, id int) *Diagnosis {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDoctorName queries the Doctor_name edge of a Diagnosis.
func (c *DiagnosisClient) QueryDoctorName(d *Diagnosis) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnosis.Table, diagnosis.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnosis.DoctorNameTable, diagnosis.DoctorNameColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the Patient edge of a Diagnosis.
func (c *DiagnosisClient) QueryPatient(d *Diagnosis) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnosis.Table, diagnosis.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnosis.PatientTable, diagnosis.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryType queries the type edge of a Diagnosis.
func (c *DiagnosisClient) QueryType(d *Diagnosis) *TreatmentTypeQuery {
	query := &TreatmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(diagnosis.Table, diagnosis.FieldID, id),
			sqlgraph.To(treatmenttype.Table, treatmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, diagnosis.TypeTable, diagnosis.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DiagnosisClient) Hooks() []Hook {
	return c.hooks.Diagnosis
}

// DoctorClient is a client for the Doctor schema.
type DoctorClient struct {
	config
}

// NewDoctorClient returns a client for the Doctor from the given config.
func NewDoctorClient(c config) *DoctorClient {
	return &DoctorClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `doctor.Hooks(f(g(h())))`.
func (c *DoctorClient) Use(hooks ...Hook) {
	c.hooks.Doctor = append(c.hooks.Doctor, hooks...)
}

// Create returns a create builder for Doctor.
func (c *DoctorClient) Create() *DoctorCreate {
	mutation := newDoctorMutation(c.config, OpCreate)
	return &DoctorCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Doctor entities.
func (c *DoctorClient) CreateBulk(builders ...*DoctorCreate) *DoctorCreateBulk {
	return &DoctorCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Doctor.
func (c *DoctorClient) Update() *DoctorUpdate {
	mutation := newDoctorMutation(c.config, OpUpdate)
	return &DoctorUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DoctorClient) UpdateOne(d *Doctor) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctor(d))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DoctorClient) UpdateOneID(id int) *DoctorUpdateOne {
	mutation := newDoctorMutation(c.config, OpUpdateOne, withDoctorID(id))
	return &DoctorUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Doctor.
func (c *DoctorClient) Delete() *DoctorDelete {
	mutation := newDoctorMutation(c.config, OpDelete)
	return &DoctorDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *DoctorClient) DeleteOne(d *Doctor) *DoctorDeleteOne {
	return c.DeleteOneID(d.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *DoctorClient) DeleteOneID(id int) *DoctorDeleteOne {
	builder := c.Delete().Where(doctor.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DoctorDeleteOne{builder}
}

// Query returns a query builder for Doctor.
func (c *DoctorClient) Query() *DoctorQuery {
	return &DoctorQuery{config: c.config}
}

// Get returns a Doctor entity by its id.
func (c *DoctorClient) Get(ctx context.Context, id int) (*Doctor, error) {
	return c.Query().Where(doctor.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DoctorClient) GetX(ctx context.Context, id int) *Doctor {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDoctorToDiagnosis queries the DoctorToDiagnosis edge of a Doctor.
func (c *DoctorClient) QueryDoctorToDiagnosis(d *Doctor) *DiagnosisQuery {
	query := &DiagnosisQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(diagnosis.Table, diagnosis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorToDiagnosisTable, doctor.DoctorToDiagnosisColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctorToAppointmentResults queries the DoctorToAppointmentResults edge of a Doctor.
func (c *DoctorClient) QueryDoctorToAppointmentResults(d *Doctor) *AppointmentResultsQuery {
	query := &AppointmentResultsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(appointmentresults.Table, appointmentresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorToAppointmentResultsTable, doctor.DoctorToAppointmentResultsColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctorToMedicalProcedure queries the DoctorToMedicalProcedure edge of a Doctor.
func (c *DoctorClient) QueryDoctorToMedicalProcedure(d *Doctor) *MedicalProcedureQuery {
	query := &MedicalProcedureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := d.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(doctor.Table, doctor.FieldID, id),
			sqlgraph.To(medicalprocedure.Table, medicalprocedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, doctor.DoctorToMedicalProcedureTable, doctor.DoctorToMedicalProcedureColumn),
		)
		fromV = sqlgraph.Neighbors(d.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *DoctorClient) Hooks() []Hook {
	return c.hooks.Doctor
}

// GenderClient is a client for the Gender schema.
type GenderClient struct {
	config
}

// NewGenderClient returns a client for the Gender from the given config.
func NewGenderClient(c config) *GenderClient {
	return &GenderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `gender.Hooks(f(g(h())))`.
func (c *GenderClient) Use(hooks ...Hook) {
	c.hooks.Gender = append(c.hooks.Gender, hooks...)
}

// Create returns a create builder for Gender.
func (c *GenderClient) Create() *GenderCreate {
	mutation := newGenderMutation(c.config, OpCreate)
	return &GenderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Gender entities.
func (c *GenderClient) CreateBulk(builders ...*GenderCreate) *GenderCreateBulk {
	return &GenderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Gender.
func (c *GenderClient) Update() *GenderUpdate {
	mutation := newGenderMutation(c.config, OpUpdate)
	return &GenderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GenderClient) UpdateOne(ge *Gender) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGender(ge))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GenderClient) UpdateOneID(id int) *GenderUpdateOne {
	mutation := newGenderMutation(c.config, OpUpdateOne, withGenderID(id))
	return &GenderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Gender.
func (c *GenderClient) Delete() *GenderDelete {
	mutation := newGenderMutation(c.config, OpDelete)
	return &GenderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GenderClient) DeleteOne(ge *Gender) *GenderDeleteOne {
	return c.DeleteOneID(ge.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GenderClient) DeleteOneID(id int) *GenderDeleteOne {
	builder := c.Delete().Where(gender.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GenderDeleteOne{builder}
}

// Query returns a query builder for Gender.
func (c *GenderClient) Query() *GenderQuery {
	return &GenderQuery{config: c.config}
}

// Get returns a Gender entity by its id.
func (c *GenderClient) Get(ctx context.Context, id int) (*Gender, error) {
	return c.Query().Where(gender.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GenderClient) GetX(ctx context.Context, id int) *Gender {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGenderToPatient queries the GenderToPatient edge of a Gender.
func (c *GenderClient) QueryGenderToPatient(ge *Gender) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ge.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(gender.Table, gender.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gender.GenderToPatientTable, gender.GenderToPatientColumn),
		)
		fromV = sqlgraph.Neighbors(ge.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GenderClient) Hooks() []Hook {
	return c.hooks.Gender
}

// HospitalClient is a client for the Hospital schema.
type HospitalClient struct {
	config
}

// NewHospitalClient returns a client for the Hospital from the given config.
func NewHospitalClient(c config) *HospitalClient {
	return &HospitalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `hospital.Hooks(f(g(h())))`.
func (c *HospitalClient) Use(hooks ...Hook) {
	c.hooks.Hospital = append(c.hooks.Hospital, hooks...)
}

// Create returns a create builder for Hospital.
func (c *HospitalClient) Create() *HospitalCreate {
	mutation := newHospitalMutation(c.config, OpCreate)
	return &HospitalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Hospital entities.
func (c *HospitalClient) CreateBulk(builders ...*HospitalCreate) *HospitalCreateBulk {
	return &HospitalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Hospital.
func (c *HospitalClient) Update() *HospitalUpdate {
	mutation := newHospitalMutation(c.config, OpUpdate)
	return &HospitalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *HospitalClient) UpdateOne(h *Hospital) *HospitalUpdateOne {
	mutation := newHospitalMutation(c.config, OpUpdateOne, withHospital(h))
	return &HospitalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *HospitalClient) UpdateOneID(id int) *HospitalUpdateOne {
	mutation := newHospitalMutation(c.config, OpUpdateOne, withHospitalID(id))
	return &HospitalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Hospital.
func (c *HospitalClient) Delete() *HospitalDelete {
	mutation := newHospitalMutation(c.config, OpDelete)
	return &HospitalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *HospitalClient) DeleteOne(h *Hospital) *HospitalDeleteOne {
	return c.DeleteOneID(h.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *HospitalClient) DeleteOneID(id int) *HospitalDeleteOne {
	builder := c.Delete().Where(hospital.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &HospitalDeleteOne{builder}
}

// Query returns a query builder for Hospital.
func (c *HospitalClient) Query() *HospitalQuery {
	return &HospitalQuery{config: c.config}
}

// Get returns a Hospital entity by its id.
func (c *HospitalClient) Get(ctx context.Context, id int) (*Hospital, error) {
	return c.Query().Where(hospital.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *HospitalClient) GetX(ctx context.Context, id int) *Hospital {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHospital queries the hospital edge of a Hospital.
func (c *HospitalClient) QueryHospital(h *Hospital) *RightToTreatmentQuery {
	query := &RightToTreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := h.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(hospital.Table, hospital.FieldID, id),
			sqlgraph.To(righttotreatment.Table, righttotreatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, hospital.HospitalTable, hospital.HospitalColumn),
		)
		fromV = sqlgraph.Neighbors(h.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *HospitalClient) Hooks() []Hook {
	return c.hooks.Hospital
}

// MedicalProcedureClient is a client for the MedicalProcedure schema.
type MedicalProcedureClient struct {
	config
}

// NewMedicalProcedureClient returns a client for the MedicalProcedure from the given config.
func NewMedicalProcedureClient(c config) *MedicalProcedureClient {
	return &MedicalProcedureClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicalprocedure.Hooks(f(g(h())))`.
func (c *MedicalProcedureClient) Use(hooks ...Hook) {
	c.hooks.MedicalProcedure = append(c.hooks.MedicalProcedure, hooks...)
}

// Create returns a create builder for MedicalProcedure.
func (c *MedicalProcedureClient) Create() *MedicalProcedureCreate {
	mutation := newMedicalProcedureMutation(c.config, OpCreate)
	return &MedicalProcedureCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MedicalProcedure entities.
func (c *MedicalProcedureClient) CreateBulk(builders ...*MedicalProcedureCreate) *MedicalProcedureCreateBulk {
	return &MedicalProcedureCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MedicalProcedure.
func (c *MedicalProcedureClient) Update() *MedicalProcedureUpdate {
	mutation := newMedicalProcedureMutation(c.config, OpUpdate)
	return &MedicalProcedureUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalProcedureClient) UpdateOne(mp *MedicalProcedure) *MedicalProcedureUpdateOne {
	mutation := newMedicalProcedureMutation(c.config, OpUpdateOne, withMedicalProcedure(mp))
	return &MedicalProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalProcedureClient) UpdateOneID(id int) *MedicalProcedureUpdateOne {
	mutation := newMedicalProcedureMutation(c.config, OpUpdateOne, withMedicalProcedureID(id))
	return &MedicalProcedureUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MedicalProcedure.
func (c *MedicalProcedureClient) Delete() *MedicalProcedureDelete {
	mutation := newMedicalProcedureMutation(c.config, OpDelete)
	return &MedicalProcedureDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicalProcedureClient) DeleteOne(mp *MedicalProcedure) *MedicalProcedureDeleteOne {
	return c.DeleteOneID(mp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicalProcedureClient) DeleteOneID(id int) *MedicalProcedureDeleteOne {
	builder := c.Delete().Where(medicalprocedure.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicalProcedureDeleteOne{builder}
}

// Query returns a query builder for MedicalProcedure.
func (c *MedicalProcedureClient) Query() *MedicalProcedureQuery {
	return &MedicalProcedureQuery{config: c.config}
}

// Get returns a MedicalProcedure entity by its id.
func (c *MedicalProcedureClient) Get(ctx context.Context, id int) (*MedicalProcedure, error) {
	return c.Query().Where(medicalprocedure.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalProcedureClient) GetX(ctx context.Context, id int) *MedicalProcedure {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPatient queries the Patient edge of a MedicalProcedure.
func (c *MedicalProcedureClient) QueryPatient(mp *MedicalProcedure) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalprocedure.Table, medicalprocedure.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicalprocedure.PatientTable, medicalprocedure.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(mp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryProcedureType queries the ProcedureType edge of a MedicalProcedure.
func (c *MedicalProcedureClient) QueryProcedureType(mp *MedicalProcedure) *ProcedureTypeQuery {
	query := &ProcedureTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalprocedure.Table, medicalprocedure.FieldID, id),
			sqlgraph.To(proceduretype.Table, proceduretype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicalprocedure.ProcedureTypeTable, medicalprocedure.ProcedureTypeColumn),
		)
		fromV = sqlgraph.Neighbors(mp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDoctor queries the Doctor edge of a MedicalProcedure.
func (c *MedicalProcedureClient) QueryDoctor(mp *MedicalProcedure) *DoctorQuery {
	query := &DoctorQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := mp.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(medicalprocedure.Table, medicalprocedure.FieldID, id),
			sqlgraph.To(doctor.Table, doctor.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, medicalprocedure.DoctorTable, medicalprocedure.DoctorColumn),
		)
		fromV = sqlgraph.Neighbors(mp.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MedicalProcedureClient) Hooks() []Hook {
	return c.hooks.MedicalProcedure
}

// MedicalRecordClient is a client for the MedicalRecord schema.
type MedicalRecordClient struct {
	config
}

// NewMedicalRecordClient returns a client for the MedicalRecord from the given config.
func NewMedicalRecordClient(c config) *MedicalRecordClient {
	return &MedicalRecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `medicalrecord.Hooks(f(g(h())))`.
func (c *MedicalRecordClient) Use(hooks ...Hook) {
	c.hooks.MedicalRecord = append(c.hooks.MedicalRecord, hooks...)
}

// Create returns a create builder for MedicalRecord.
func (c *MedicalRecordClient) Create() *MedicalRecordCreate {
	mutation := newMedicalRecordMutation(c.config, OpCreate)
	return &MedicalRecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MedicalRecord entities.
func (c *MedicalRecordClient) CreateBulk(builders ...*MedicalRecordCreate) *MedicalRecordCreateBulk {
	return &MedicalRecordCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MedicalRecord.
func (c *MedicalRecordClient) Update() *MedicalRecordUpdate {
	mutation := newMedicalRecordMutation(c.config, OpUpdate)
	return &MedicalRecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MedicalRecordClient) UpdateOne(mr *MedicalRecord) *MedicalRecordUpdateOne {
	mutation := newMedicalRecordMutation(c.config, OpUpdateOne, withMedicalRecord(mr))
	return &MedicalRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MedicalRecordClient) UpdateOneID(id int) *MedicalRecordUpdateOne {
	mutation := newMedicalRecordMutation(c.config, OpUpdateOne, withMedicalRecordID(id))
	return &MedicalRecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MedicalRecord.
func (c *MedicalRecordClient) Delete() *MedicalRecordDelete {
	mutation := newMedicalRecordMutation(c.config, OpDelete)
	return &MedicalRecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MedicalRecordClient) DeleteOne(mr *MedicalRecord) *MedicalRecordDeleteOne {
	return c.DeleteOneID(mr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MedicalRecordClient) DeleteOneID(id int) *MedicalRecordDeleteOne {
	builder := c.Delete().Where(medicalrecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MedicalRecordDeleteOne{builder}
}

// Query returns a query builder for MedicalRecord.
func (c *MedicalRecordClient) Query() *MedicalRecordQuery {
	return &MedicalRecordQuery{config: c.config}
}

// Get returns a MedicalRecord entity by its id.
func (c *MedicalRecordClient) Get(ctx context.Context, id int) (*MedicalRecord, error) {
	return c.Query().Where(medicalrecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MedicalRecordClient) GetX(ctx context.Context, id int) *MedicalRecord {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MedicalRecordClient) Hooks() []Hook {
	return c.hooks.MedicalRecord
}

// NurseClient is a client for the Nurse schema.
type NurseClient struct {
	config
}

// NewNurseClient returns a client for the Nurse from the given config.
func NewNurseClient(c config) *NurseClient {
	return &NurseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nurse.Hooks(f(g(h())))`.
func (c *NurseClient) Use(hooks ...Hook) {
	c.hooks.Nurse = append(c.hooks.Nurse, hooks...)
}

// Create returns a create builder for Nurse.
func (c *NurseClient) Create() *NurseCreate {
	mutation := newNurseMutation(c.config, OpCreate)
	return &NurseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Nurse entities.
func (c *NurseClient) CreateBulk(builders ...*NurseCreate) *NurseCreateBulk {
	return &NurseCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Nurse.
func (c *NurseClient) Update() *NurseUpdate {
	mutation := newNurseMutation(c.config, OpUpdate)
	return &NurseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NurseClient) UpdateOne(n *Nurse) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurse(n))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NurseClient) UpdateOneID(id int) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurseID(id))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nurse.
func (c *NurseClient) Delete() *NurseDelete {
	mutation := newNurseMutation(c.config, OpDelete)
	return &NurseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NurseClient) DeleteOne(n *Nurse) *NurseDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NurseClient) DeleteOneID(id int) *NurseDeleteOne {
	builder := c.Delete().Where(nurse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NurseDeleteOne{builder}
}

// Query returns a query builder for Nurse.
func (c *NurseClient) Query() *NurseQuery {
	return &NurseQuery{config: c.config}
}

// Get returns a Nurse entity by its id.
func (c *NurseClient) Get(ctx context.Context, id int) (*Nurse, error) {
	return c.Query().Where(nurse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NurseClient) GetX(ctx context.Context, id int) *Nurse {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTriageResult queries the triageResult edge of a Nurse.
func (c *NurseClient) QueryTriageResult(n *Nurse) *TriageResultQuery {
	query := &TriageResultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(triageresult.Table, triageresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.TriageResultTable, nurse.TriageResultColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurseToAppointmentResults queries the NurseToAppointmentResults edge of a Nurse.
func (c *NurseClient) QueryNurseToAppointmentResults(n *Nurse) *AppointmentResultsQuery {
	query := &AppointmentResultsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(appointmentresults.Table, appointmentresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.NurseToAppointmentResultsTable, nurse.NurseToAppointmentResultsColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NurseClient) Hooks() []Hook {
	return c.hooks.Nurse
}

// PatientClient is a client for the Patient schema.
type PatientClient struct {
	config
}

// NewPatientClient returns a client for the Patient from the given config.
func NewPatientClient(c config) *PatientClient {
	return &PatientClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `patient.Hooks(f(g(h())))`.
func (c *PatientClient) Use(hooks ...Hook) {
	c.hooks.Patient = append(c.hooks.Patient, hooks...)
}

// Create returns a create builder for Patient.
func (c *PatientClient) Create() *PatientCreate {
	mutation := newPatientMutation(c.config, OpCreate)
	return &PatientCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Patient entities.
func (c *PatientClient) CreateBulk(builders ...*PatientCreate) *PatientCreateBulk {
	return &PatientCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Patient.
func (c *PatientClient) Update() *PatientUpdate {
	mutation := newPatientMutation(c.config, OpUpdate)
	return &PatientUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PatientClient) UpdateOne(pa *Patient) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatient(pa))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PatientClient) UpdateOneID(id int) *PatientUpdateOne {
	mutation := newPatientMutation(c.config, OpUpdateOne, withPatientID(id))
	return &PatientUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Patient.
func (c *PatientClient) Delete() *PatientDelete {
	mutation := newPatientMutation(c.config, OpDelete)
	return &PatientDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PatientClient) DeleteOne(pa *Patient) *PatientDeleteOne {
	return c.DeleteOneID(pa.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PatientClient) DeleteOneID(id int) *PatientDeleteOne {
	builder := c.Delete().Where(patient.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PatientDeleteOne{builder}
}

// Query returns a query builder for Patient.
func (c *PatientClient) Query() *PatientQuery {
	return &PatientQuery{config: c.config}
}

// Get returns a Patient entity by its id.
func (c *PatientClient) Get(ctx context.Context, id int) (*Patient, error) {
	return c.Query().Where(patient.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PatientClient) GetX(ctx context.Context, id int) *Patient {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrefix queries the Prefix edge of a Patient.
func (c *PatientClient) QueryPrefix(pa *Patient) *PrefixQuery {
	query := &PrefixQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(prefix.Table, prefix.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.PrefixTable, patient.PrefixColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGender queries the Gender edge of a Patient.
func (c *PatientClient) QueryGender(pa *Patient) *GenderQuery {
	query := &GenderQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(gender.Table, gender.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.GenderTable, patient.GenderColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBloodtype queries the Bloodtype edge of a Patient.
func (c *PatientClient) QueryBloodtype(pa *Patient) *BloodTypeQuery {
	query := &BloodTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(bloodtype.Table, bloodtype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, patient.BloodtypeTable, patient.BloodtypeColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTriageResult queries the triageResult edge of a Patient.
func (c *PatientClient) QueryTriageResult(pa *Patient) *TriageResultQuery {
	query := &TriageResultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(triageresult.Table, triageresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.TriageResultTable, patient.TriageResultColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientToAppointmentResults queries the PatientToAppointmentResults edge of a Patient.
func (c *PatientClient) QueryPatientToAppointmentResults(pa *Patient) *AppointmentResultsQuery {
	query := &AppointmentResultsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(appointmentresults.Table, appointmentresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientToAppointmentResultsTable, patient.PatientToAppointmentResultsColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientToMedicalProcedure queries the PatientToMedicalProcedure edge of a Patient.
func (c *PatientClient) QueryPatientToMedicalProcedure(pa *Patient) *MedicalProcedureQuery {
	query := &MedicalProcedureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(medicalprocedure.Table, medicalprocedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientToMedicalProcedureTable, patient.PatientToMedicalProcedureColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientToRightToTreatment queries the PatientToRightToTreatment edge of a Patient.
func (c *PatientClient) QueryPatientToRightToTreatment(pa *Patient) *RightToTreatmentQuery {
	query := &RightToTreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(righttotreatment.Table, righttotreatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientToRightToTreatmentTable, patient.PatientToRightToTreatmentColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatientToDiagnosis queries the PatientToDiagnosis edge of a Patient.
func (c *PatientClient) QueryPatientToDiagnosis(pa *Patient) *DiagnosisQuery {
	query := &DiagnosisQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pa.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(patient.Table, patient.FieldID, id),
			sqlgraph.To(diagnosis.Table, diagnosis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, patient.PatientToDiagnosisTable, patient.PatientToDiagnosisColumn),
		)
		fromV = sqlgraph.Neighbors(pa.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PatientClient) Hooks() []Hook {
	return c.hooks.Patient
}

// PrefixClient is a client for the Prefix schema.
type PrefixClient struct {
	config
}

// NewPrefixClient returns a client for the Prefix from the given config.
func NewPrefixClient(c config) *PrefixClient {
	return &PrefixClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `prefix.Hooks(f(g(h())))`.
func (c *PrefixClient) Use(hooks ...Hook) {
	c.hooks.Prefix = append(c.hooks.Prefix, hooks...)
}

// Create returns a create builder for Prefix.
func (c *PrefixClient) Create() *PrefixCreate {
	mutation := newPrefixMutation(c.config, OpCreate)
	return &PrefixCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Prefix entities.
func (c *PrefixClient) CreateBulk(builders ...*PrefixCreate) *PrefixCreateBulk {
	return &PrefixCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Prefix.
func (c *PrefixClient) Update() *PrefixUpdate {
	mutation := newPrefixMutation(c.config, OpUpdate)
	return &PrefixUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PrefixClient) UpdateOne(pr *Prefix) *PrefixUpdateOne {
	mutation := newPrefixMutation(c.config, OpUpdateOne, withPrefix(pr))
	return &PrefixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PrefixClient) UpdateOneID(id int) *PrefixUpdateOne {
	mutation := newPrefixMutation(c.config, OpUpdateOne, withPrefixID(id))
	return &PrefixUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Prefix.
func (c *PrefixClient) Delete() *PrefixDelete {
	mutation := newPrefixMutation(c.config, OpDelete)
	return &PrefixDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PrefixClient) DeleteOne(pr *Prefix) *PrefixDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PrefixClient) DeleteOneID(id int) *PrefixDeleteOne {
	builder := c.Delete().Where(prefix.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PrefixDeleteOne{builder}
}

// Query returns a query builder for Prefix.
func (c *PrefixClient) Query() *PrefixQuery {
	return &PrefixQuery{config: c.config}
}

// Get returns a Prefix entity by its id.
func (c *PrefixClient) Get(ctx context.Context, id int) (*Prefix, error) {
	return c.Query().Where(prefix.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PrefixClient) GetX(ctx context.Context, id int) *Prefix {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPrefixToPatient queries the PrefixToPatient edge of a Prefix.
func (c *PrefixClient) QueryPrefixToPatient(pr *Prefix) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(prefix.Table, prefix.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, prefix.PrefixToPatientTable, prefix.PrefixToPatientColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PrefixClient) Hooks() []Hook {
	return c.hooks.Prefix
}

// ProcedureTypeClient is a client for the ProcedureType schema.
type ProcedureTypeClient struct {
	config
}

// NewProcedureTypeClient returns a client for the ProcedureType from the given config.
func NewProcedureTypeClient(c config) *ProcedureTypeClient {
	return &ProcedureTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `proceduretype.Hooks(f(g(h())))`.
func (c *ProcedureTypeClient) Use(hooks ...Hook) {
	c.hooks.ProcedureType = append(c.hooks.ProcedureType, hooks...)
}

// Create returns a create builder for ProcedureType.
func (c *ProcedureTypeClient) Create() *ProcedureTypeCreate {
	mutation := newProcedureTypeMutation(c.config, OpCreate)
	return &ProcedureTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcedureType entities.
func (c *ProcedureTypeClient) CreateBulk(builders ...*ProcedureTypeCreate) *ProcedureTypeCreateBulk {
	return &ProcedureTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcedureType.
func (c *ProcedureTypeClient) Update() *ProcedureTypeUpdate {
	mutation := newProcedureTypeMutation(c.config, OpUpdate)
	return &ProcedureTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcedureTypeClient) UpdateOne(pt *ProcedureType) *ProcedureTypeUpdateOne {
	mutation := newProcedureTypeMutation(c.config, OpUpdateOne, withProcedureType(pt))
	return &ProcedureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcedureTypeClient) UpdateOneID(id int) *ProcedureTypeUpdateOne {
	mutation := newProcedureTypeMutation(c.config, OpUpdateOne, withProcedureTypeID(id))
	return &ProcedureTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcedureType.
func (c *ProcedureTypeClient) Delete() *ProcedureTypeDelete {
	mutation := newProcedureTypeMutation(c.config, OpDelete)
	return &ProcedureTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProcedureTypeClient) DeleteOne(pt *ProcedureType) *ProcedureTypeDeleteOne {
	return c.DeleteOneID(pt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProcedureTypeClient) DeleteOneID(id int) *ProcedureTypeDeleteOne {
	builder := c.Delete().Where(proceduretype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcedureTypeDeleteOne{builder}
}

// Query returns a query builder for ProcedureType.
func (c *ProcedureTypeClient) Query() *ProcedureTypeQuery {
	return &ProcedureTypeQuery{config: c.config}
}

// Get returns a ProcedureType entity by its id.
func (c *ProcedureTypeClient) Get(ctx context.Context, id int) (*ProcedureType, error) {
	return c.Query().Where(proceduretype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcedureTypeClient) GetX(ctx context.Context, id int) *ProcedureType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProcedureToMedicalProcedure queries the ProcedureToMedicalProcedure edge of a ProcedureType.
func (c *ProcedureTypeClient) QueryProcedureToMedicalProcedure(pt *ProcedureType) *MedicalProcedureQuery {
	query := &MedicalProcedureQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := pt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(proceduretype.Table, proceduretype.FieldID, id),
			sqlgraph.To(medicalprocedure.Table, medicalprocedure.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, proceduretype.ProcedureToMedicalProcedureTable, proceduretype.ProcedureToMedicalProcedureColumn),
		)
		fromV = sqlgraph.Neighbors(pt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProcedureTypeClient) Hooks() []Hook {
	return c.hooks.ProcedureType
}

// RightToTreatmentClient is a client for the RightToTreatment schema.
type RightToTreatmentClient struct {
	config
}

// NewRightToTreatmentClient returns a client for the RightToTreatment from the given config.
func NewRightToTreatmentClient(c config) *RightToTreatmentClient {
	return &RightToTreatmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `righttotreatment.Hooks(f(g(h())))`.
func (c *RightToTreatmentClient) Use(hooks ...Hook) {
	c.hooks.RightToTreatment = append(c.hooks.RightToTreatment, hooks...)
}

// Create returns a create builder for RightToTreatment.
func (c *RightToTreatmentClient) Create() *RightToTreatmentCreate {
	mutation := newRightToTreatmentMutation(c.config, OpCreate)
	return &RightToTreatmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RightToTreatment entities.
func (c *RightToTreatmentClient) CreateBulk(builders ...*RightToTreatmentCreate) *RightToTreatmentCreateBulk {
	return &RightToTreatmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RightToTreatment.
func (c *RightToTreatmentClient) Update() *RightToTreatmentUpdate {
	mutation := newRightToTreatmentMutation(c.config, OpUpdate)
	return &RightToTreatmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RightToTreatmentClient) UpdateOne(rtt *RightToTreatment) *RightToTreatmentUpdateOne {
	mutation := newRightToTreatmentMutation(c.config, OpUpdateOne, withRightToTreatment(rtt))
	return &RightToTreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RightToTreatmentClient) UpdateOneID(id int) *RightToTreatmentUpdateOne {
	mutation := newRightToTreatmentMutation(c.config, OpUpdateOne, withRightToTreatmentID(id))
	return &RightToTreatmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RightToTreatment.
func (c *RightToTreatmentClient) Delete() *RightToTreatmentDelete {
	mutation := newRightToTreatmentMutation(c.config, OpDelete)
	return &RightToTreatmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RightToTreatmentClient) DeleteOne(rtt *RightToTreatment) *RightToTreatmentDeleteOne {
	return c.DeleteOneID(rtt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RightToTreatmentClient) DeleteOneID(id int) *RightToTreatmentDeleteOne {
	builder := c.Delete().Where(righttotreatment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RightToTreatmentDeleteOne{builder}
}

// Query returns a query builder for RightToTreatment.
func (c *RightToTreatmentClient) Query() *RightToTreatmentQuery {
	return &RightToTreatmentQuery{config: c.config}
}

// Get returns a RightToTreatment entity by its id.
func (c *RightToTreatmentClient) Get(ctx context.Context, id int) (*RightToTreatment, error) {
	return c.Query().Where(righttotreatment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RightToTreatmentClient) GetX(ctx context.Context, id int) *RightToTreatment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryHospital queries the Hospital edge of a RightToTreatment.
func (c *RightToTreatmentClient) QueryHospital(rtt *RightToTreatment) *HospitalQuery {
	query := &HospitalQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rtt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(righttotreatment.Table, righttotreatment.FieldID, id),
			sqlgraph.To(hospital.Table, hospital.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, righttotreatment.HospitalTable, righttotreatment.HospitalColumn),
		)
		fromV = sqlgraph.Neighbors(rtt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRightToTreatmentType queries the RightToTreatmentType edge of a RightToTreatment.
func (c *RightToTreatmentClient) QueryRightToTreatmentType(rtt *RightToTreatment) *RightToTreatmentTypeQuery {
	query := &RightToTreatmentTypeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rtt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(righttotreatment.Table, righttotreatment.FieldID, id),
			sqlgraph.To(righttotreatmenttype.Table, righttotreatmenttype.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, righttotreatment.RightToTreatmentTypeTable, righttotreatment.RightToTreatmentTypeColumn),
		)
		fromV = sqlgraph.Neighbors(rtt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the Patient edge of a RightToTreatment.
func (c *RightToTreatmentClient) QueryPatient(rtt *RightToTreatment) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rtt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(righttotreatment.Table, righttotreatment.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, righttotreatment.PatientTable, righttotreatment.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(rtt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RightToTreatmentClient) Hooks() []Hook {
	return c.hooks.RightToTreatment
}

// RightToTreatmentTypeClient is a client for the RightToTreatmentType schema.
type RightToTreatmentTypeClient struct {
	config
}

// NewRightToTreatmentTypeClient returns a client for the RightToTreatmentType from the given config.
func NewRightToTreatmentTypeClient(c config) *RightToTreatmentTypeClient {
	return &RightToTreatmentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `righttotreatmenttype.Hooks(f(g(h())))`.
func (c *RightToTreatmentTypeClient) Use(hooks ...Hook) {
	c.hooks.RightToTreatmentType = append(c.hooks.RightToTreatmentType, hooks...)
}

// Create returns a create builder for RightToTreatmentType.
func (c *RightToTreatmentTypeClient) Create() *RightToTreatmentTypeCreate {
	mutation := newRightToTreatmentTypeMutation(c.config, OpCreate)
	return &RightToTreatmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of RightToTreatmentType entities.
func (c *RightToTreatmentTypeClient) CreateBulk(builders ...*RightToTreatmentTypeCreate) *RightToTreatmentTypeCreateBulk {
	return &RightToTreatmentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for RightToTreatmentType.
func (c *RightToTreatmentTypeClient) Update() *RightToTreatmentTypeUpdate {
	mutation := newRightToTreatmentTypeMutation(c.config, OpUpdate)
	return &RightToTreatmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RightToTreatmentTypeClient) UpdateOne(rttt *RightToTreatmentType) *RightToTreatmentTypeUpdateOne {
	mutation := newRightToTreatmentTypeMutation(c.config, OpUpdateOne, withRightToTreatmentType(rttt))
	return &RightToTreatmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RightToTreatmentTypeClient) UpdateOneID(id int) *RightToTreatmentTypeUpdateOne {
	mutation := newRightToTreatmentTypeMutation(c.config, OpUpdateOne, withRightToTreatmentTypeID(id))
	return &RightToTreatmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for RightToTreatmentType.
func (c *RightToTreatmentTypeClient) Delete() *RightToTreatmentTypeDelete {
	mutation := newRightToTreatmentTypeMutation(c.config, OpDelete)
	return &RightToTreatmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RightToTreatmentTypeClient) DeleteOne(rttt *RightToTreatmentType) *RightToTreatmentTypeDeleteOne {
	return c.DeleteOneID(rttt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RightToTreatmentTypeClient) DeleteOneID(id int) *RightToTreatmentTypeDeleteOne {
	builder := c.Delete().Where(righttotreatmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RightToTreatmentTypeDeleteOne{builder}
}

// Query returns a query builder for RightToTreatmentType.
func (c *RightToTreatmentTypeClient) Query() *RightToTreatmentTypeQuery {
	return &RightToTreatmentTypeQuery{config: c.config}
}

// Get returns a RightToTreatmentType entity by its id.
func (c *RightToTreatmentTypeClient) Get(ctx context.Context, id int) (*RightToTreatmentType, error) {
	return c.Query().Where(righttotreatmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RightToTreatmentTypeClient) GetX(ctx context.Context, id int) *RightToTreatmentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryType queries the type edge of a RightToTreatmentType.
func (c *RightToTreatmentTypeClient) QueryType(rttt *RightToTreatmentType) *RightToTreatmentQuery {
	query := &RightToTreatmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := rttt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(righttotreatmenttype.Table, righttotreatmenttype.FieldID, id),
			sqlgraph.To(righttotreatment.Table, righttotreatment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, righttotreatmenttype.TypeTable, righttotreatmenttype.TypeColumn),
		)
		fromV = sqlgraph.Neighbors(rttt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RightToTreatmentTypeClient) Hooks() []Hook {
	return c.hooks.RightToTreatmentType
}

// RoomClient is a client for the Room schema.
type RoomClient struct {
	config
}

// NewRoomClient returns a client for the Room from the given config.
func NewRoomClient(c config) *RoomClient {
	return &RoomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `room.Hooks(f(g(h())))`.
func (c *RoomClient) Use(hooks ...Hook) {
	c.hooks.Room = append(c.hooks.Room, hooks...)
}

// Create returns a create builder for Room.
func (c *RoomClient) Create() *RoomCreate {
	mutation := newRoomMutation(c.config, OpCreate)
	return &RoomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Room entities.
func (c *RoomClient) CreateBulk(builders ...*RoomCreate) *RoomCreateBulk {
	return &RoomCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Room.
func (c *RoomClient) Update() *RoomUpdate {
	mutation := newRoomMutation(c.config, OpUpdate)
	return &RoomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RoomClient) UpdateOne(r *Room) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoom(r))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RoomClient) UpdateOneID(id int) *RoomUpdateOne {
	mutation := newRoomMutation(c.config, OpUpdateOne, withRoomID(id))
	return &RoomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Room.
func (c *RoomClient) Delete() *RoomDelete {
	mutation := newRoomMutation(c.config, OpDelete)
	return &RoomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RoomClient) DeleteOne(r *Room) *RoomDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RoomClient) DeleteOneID(id int) *RoomDeleteOne {
	builder := c.Delete().Where(room.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RoomDeleteOne{builder}
}

// Query returns a query builder for Room.
func (c *RoomClient) Query() *RoomQuery {
	return &RoomQuery{config: c.config}
}

// Get returns a Room entity by its id.
func (c *RoomClient) Get(ctx context.Context, id int) (*Room, error) {
	return c.Query().Where(room.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RoomClient) GetX(ctx context.Context, id int) *Room {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRoomToAppointmentResults queries the RoomToAppointmentResults edge of a Room.
func (c *RoomClient) QueryRoomToAppointmentResults(r *Room) *AppointmentResultsQuery {
	query := &AppointmentResultsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(room.Table, room.FieldID, id),
			sqlgraph.To(appointmentresults.Table, appointmentresults.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, room.RoomToAppointmentResultsTable, room.RoomToAppointmentResultsColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RoomClient) Hooks() []Hook {
	return c.hooks.Room
}

// TreatmentTypeClient is a client for the TreatmentType schema.
type TreatmentTypeClient struct {
	config
}

// NewTreatmentTypeClient returns a client for the TreatmentType from the given config.
func NewTreatmentTypeClient(c config) *TreatmentTypeClient {
	return &TreatmentTypeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `treatmenttype.Hooks(f(g(h())))`.
func (c *TreatmentTypeClient) Use(hooks ...Hook) {
	c.hooks.TreatmentType = append(c.hooks.TreatmentType, hooks...)
}

// Create returns a create builder for TreatmentType.
func (c *TreatmentTypeClient) Create() *TreatmentTypeCreate {
	mutation := newTreatmentTypeMutation(c.config, OpCreate)
	return &TreatmentTypeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TreatmentType entities.
func (c *TreatmentTypeClient) CreateBulk(builders ...*TreatmentTypeCreate) *TreatmentTypeCreateBulk {
	return &TreatmentTypeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TreatmentType.
func (c *TreatmentTypeClient) Update() *TreatmentTypeUpdate {
	mutation := newTreatmentTypeMutation(c.config, OpUpdate)
	return &TreatmentTypeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TreatmentTypeClient) UpdateOne(tt *TreatmentType) *TreatmentTypeUpdateOne {
	mutation := newTreatmentTypeMutation(c.config, OpUpdateOne, withTreatmentType(tt))
	return &TreatmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TreatmentTypeClient) UpdateOneID(id int) *TreatmentTypeUpdateOne {
	mutation := newTreatmentTypeMutation(c.config, OpUpdateOne, withTreatmentTypeID(id))
	return &TreatmentTypeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TreatmentType.
func (c *TreatmentTypeClient) Delete() *TreatmentTypeDelete {
	mutation := newTreatmentTypeMutation(c.config, OpDelete)
	return &TreatmentTypeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TreatmentTypeClient) DeleteOne(tt *TreatmentType) *TreatmentTypeDeleteOne {
	return c.DeleteOneID(tt.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TreatmentTypeClient) DeleteOneID(id int) *TreatmentTypeDeleteOne {
	builder := c.Delete().Where(treatmenttype.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TreatmentTypeDeleteOne{builder}
}

// Query returns a query builder for TreatmentType.
func (c *TreatmentTypeClient) Query() *TreatmentTypeQuery {
	return &TreatmentTypeQuery{config: c.config}
}

// Get returns a TreatmentType entity by its id.
func (c *TreatmentTypeClient) Get(ctx context.Context, id int) (*TreatmentType, error) {
	return c.Query().Where(treatmenttype.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TreatmentTypeClient) GetX(ctx context.Context, id int) *TreatmentType {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTreatmentTypeToDiagnosis queries the TreatmentTypeToDiagnosis edge of a TreatmentType.
func (c *TreatmentTypeClient) QueryTreatmentTypeToDiagnosis(tt *TreatmentType) *DiagnosisQuery {
	query := &DiagnosisQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(treatmenttype.Table, treatmenttype.FieldID, id),
			sqlgraph.To(diagnosis.Table, diagnosis.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, treatmenttype.TreatmentTypeToDiagnosisTable, treatmenttype.TreatmentTypeToDiagnosisColumn),
		)
		fromV = sqlgraph.Neighbors(tt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TreatmentTypeClient) Hooks() []Hook {
	return c.hooks.TreatmentType
}

// TriageResultClient is a client for the TriageResult schema.
type TriageResultClient struct {
	config
}

// NewTriageResultClient returns a client for the TriageResult from the given config.
func NewTriageResultClient(c config) *TriageResultClient {
	return &TriageResultClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `triageresult.Hooks(f(g(h())))`.
func (c *TriageResultClient) Use(hooks ...Hook) {
	c.hooks.TriageResult = append(c.hooks.TriageResult, hooks...)
}

// Create returns a create builder for TriageResult.
func (c *TriageResultClient) Create() *TriageResultCreate {
	mutation := newTriageResultMutation(c.config, OpCreate)
	return &TriageResultCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of TriageResult entities.
func (c *TriageResultClient) CreateBulk(builders ...*TriageResultCreate) *TriageResultCreateBulk {
	return &TriageResultCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for TriageResult.
func (c *TriageResultClient) Update() *TriageResultUpdate {
	mutation := newTriageResultMutation(c.config, OpUpdate)
	return &TriageResultUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TriageResultClient) UpdateOne(tr *TriageResult) *TriageResultUpdateOne {
	mutation := newTriageResultMutation(c.config, OpUpdateOne, withTriageResult(tr))
	return &TriageResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TriageResultClient) UpdateOneID(id int) *TriageResultUpdateOne {
	mutation := newTriageResultMutation(c.config, OpUpdateOne, withTriageResultID(id))
	return &TriageResultUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for TriageResult.
func (c *TriageResultClient) Delete() *TriageResultDelete {
	mutation := newTriageResultMutation(c.config, OpDelete)
	return &TriageResultDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TriageResultClient) DeleteOne(tr *TriageResult) *TriageResultDeleteOne {
	return c.DeleteOneID(tr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TriageResultClient) DeleteOneID(id int) *TriageResultDeleteOne {
	builder := c.Delete().Where(triageresult.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TriageResultDeleteOne{builder}
}

// Query returns a query builder for TriageResult.
func (c *TriageResultClient) Query() *TriageResultQuery {
	return &TriageResultQuery{config: c.config}
}

// Get returns a TriageResult entity by its id.
func (c *TriageResultClient) Get(ctx context.Context, id int) (*TriageResult, error) {
	return c.Query().Where(triageresult.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TriageResultClient) GetX(ctx context.Context, id int) *TriageResult {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUrgencyLevel queries the urgencyLevel edge of a TriageResult.
func (c *TriageResultClient) QueryUrgencyLevel(tr *TriageResult) *UrgencyLevelQuery {
	query := &UrgencyLevelQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, id),
			sqlgraph.To(urgencylevel.Table, urgencylevel.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.UrgencyLevelTable, triageresult.UrgencyLevelColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryDepartment queries the department edge of a TriageResult.
func (c *TriageResultClient) QueryDepartment(tr *TriageResult) *DepartmentQuery {
	query := &DepartmentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, id),
			sqlgraph.To(department.Table, department.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.DepartmentTable, triageresult.DepartmentColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurse queries the nurse edge of a TriageResult.
func (c *TriageResultClient) QueryNurse(tr *TriageResult) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.NurseTable, triageresult.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPatient queries the patient edge of a TriageResult.
func (c *TriageResultClient) QueryPatient(tr *TriageResult) *PatientQuery {
	query := &PatientQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := tr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(triageresult.Table, triageresult.FieldID, id),
			sqlgraph.To(patient.Table, patient.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, triageresult.PatientTable, triageresult.PatientColumn),
		)
		fromV = sqlgraph.Neighbors(tr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TriageResultClient) Hooks() []Hook {
	return c.hooks.TriageResult
}

// UrgencyLevelClient is a client for the UrgencyLevel schema.
type UrgencyLevelClient struct {
	config
}

// NewUrgencyLevelClient returns a client for the UrgencyLevel from the given config.
func NewUrgencyLevelClient(c config) *UrgencyLevelClient {
	return &UrgencyLevelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `urgencylevel.Hooks(f(g(h())))`.
func (c *UrgencyLevelClient) Use(hooks ...Hook) {
	c.hooks.UrgencyLevel = append(c.hooks.UrgencyLevel, hooks...)
}

// Create returns a create builder for UrgencyLevel.
func (c *UrgencyLevelClient) Create() *UrgencyLevelCreate {
	mutation := newUrgencyLevelMutation(c.config, OpCreate)
	return &UrgencyLevelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UrgencyLevel entities.
func (c *UrgencyLevelClient) CreateBulk(builders ...*UrgencyLevelCreate) *UrgencyLevelCreateBulk {
	return &UrgencyLevelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UrgencyLevel.
func (c *UrgencyLevelClient) Update() *UrgencyLevelUpdate {
	mutation := newUrgencyLevelMutation(c.config, OpUpdate)
	return &UrgencyLevelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UrgencyLevelClient) UpdateOne(ul *UrgencyLevel) *UrgencyLevelUpdateOne {
	mutation := newUrgencyLevelMutation(c.config, OpUpdateOne, withUrgencyLevel(ul))
	return &UrgencyLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UrgencyLevelClient) UpdateOneID(id int) *UrgencyLevelUpdateOne {
	mutation := newUrgencyLevelMutation(c.config, OpUpdateOne, withUrgencyLevelID(id))
	return &UrgencyLevelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UrgencyLevel.
func (c *UrgencyLevelClient) Delete() *UrgencyLevelDelete {
	mutation := newUrgencyLevelMutation(c.config, OpDelete)
	return &UrgencyLevelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UrgencyLevelClient) DeleteOne(ul *UrgencyLevel) *UrgencyLevelDeleteOne {
	return c.DeleteOneID(ul.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UrgencyLevelClient) DeleteOneID(id int) *UrgencyLevelDeleteOne {
	builder := c.Delete().Where(urgencylevel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UrgencyLevelDeleteOne{builder}
}

// Query returns a query builder for UrgencyLevel.
func (c *UrgencyLevelClient) Query() *UrgencyLevelQuery {
	return &UrgencyLevelQuery{config: c.config}
}

// Get returns a UrgencyLevel entity by its id.
func (c *UrgencyLevelClient) Get(ctx context.Context, id int) (*UrgencyLevel, error) {
	return c.Query().Where(urgencylevel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UrgencyLevelClient) GetX(ctx context.Context, id int) *UrgencyLevel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTriageResult queries the triageResult edge of a UrgencyLevel.
func (c *UrgencyLevelClient) QueryTriageResult(ul *UrgencyLevel) *TriageResultQuery {
	query := &TriageResultQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := ul.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(urgencylevel.Table, urgencylevel.FieldID, id),
			sqlgraph.To(triageresult.Table, triageresult.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, urgencylevel.TriageResultTable, urgencylevel.TriageResultColumn),
		)
		fromV = sqlgraph.Neighbors(ul.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UrgencyLevelClient) Hooks() []Hook {
	return c.hooks.UrgencyLevel
}
