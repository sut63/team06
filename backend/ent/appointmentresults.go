// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/team06/app/ent/appointmentresults"
	"github.com/team06/app/ent/doctor"
	"github.com/team06/app/ent/nurse"
	"github.com/team06/app/ent/patient"
	"github.com/team06/app/ent/room"
)

// AppointmentResults is the model entity for the AppointmentResults schema.
type AppointmentResults struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CauseAppoint holds the value of the "causeAppoint" field.
	CauseAppoint string `json:"causeAppoint,omitempty"`
	// Advice holds the value of the "advice" field.
	Advice string `json:"advice,omitempty"`
	// DateAppoint holds the value of the "dateAppoint" field.
	DateAppoint time.Time `json:"dateAppoint,omitempty"`
	// TimeAppoint holds the value of the "timeAppoint" field.
	TimeAppoint time.Time `json:"timeAppoint,omitempty"`
	// AddtimeSave holds the value of the "addtimeSave" field.
	AddtimeSave time.Time `json:"addtimeSave,omitempty"`
	// HourBeforeAppoint holds the value of the "hourBeforeAppoint" field.
	HourBeforeAppoint int `json:"hourBeforeAppoint,omitempty"`
	// MinuteBeforeAppoint holds the value of the "minuteBeforeAppoint" field.
	MinuteBeforeAppoint int `json:"minuteBeforeAppoint,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppointmentResultsQuery when eager-loading is set.
	Edges                                  AppointmentResultsEdges `json:"edges"`
	doctor_doctor_to_appointment_results   *int
	nurse_nurse_to_appointment_results     *int
	patient_patient_to_appointment_results *int
	room_room_to_appointment_results       *int
}

// AppointmentResultsEdges holds the relations/edges for other nodes in the graph.
type AppointmentResultsEdges struct {
	// AppointmentResultsToPatient holds the value of the appointmentResultsToPatient edge.
	AppointmentResultsToPatient *Patient
	// AppointmentResultsToNurse holds the value of the appointmentResultsToNurse edge.
	AppointmentResultsToNurse *Nurse
	// AppointmentResultsToDoctor holds the value of the appointmentResultsToDoctor edge.
	AppointmentResultsToDoctor *Doctor
	// AppointmentResultsToRoom holds the value of the appointmentResultsToRoom edge.
	AppointmentResultsToRoom *Room
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AppointmentResultsToPatientOrErr returns the AppointmentResultsToPatient value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentResultsEdges) AppointmentResultsToPatientOrErr() (*Patient, error) {
	if e.loadedTypes[0] {
		if e.AppointmentResultsToPatient == nil {
			// The edge appointmentResultsToPatient was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: patient.Label}
		}
		return e.AppointmentResultsToPatient, nil
	}
	return nil, &NotLoadedError{edge: "appointmentResultsToPatient"}
}

// AppointmentResultsToNurseOrErr returns the AppointmentResultsToNurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentResultsEdges) AppointmentResultsToNurseOrErr() (*Nurse, error) {
	if e.loadedTypes[1] {
		if e.AppointmentResultsToNurse == nil {
			// The edge appointmentResultsToNurse was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: nurse.Label}
		}
		return e.AppointmentResultsToNurse, nil
	}
	return nil, &NotLoadedError{edge: "appointmentResultsToNurse"}
}

// AppointmentResultsToDoctorOrErr returns the AppointmentResultsToDoctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentResultsEdges) AppointmentResultsToDoctorOrErr() (*Doctor, error) {
	if e.loadedTypes[2] {
		if e.AppointmentResultsToDoctor == nil {
			// The edge appointmentResultsToDoctor was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: doctor.Label}
		}
		return e.AppointmentResultsToDoctor, nil
	}
	return nil, &NotLoadedError{edge: "appointmentResultsToDoctor"}
}

// AppointmentResultsToRoomOrErr returns the AppointmentResultsToRoom value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppointmentResultsEdges) AppointmentResultsToRoomOrErr() (*Room, error) {
	if e.loadedTypes[3] {
		if e.AppointmentResultsToRoom == nil {
			// The edge appointmentResultsToRoom was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: room.Label}
		}
		return e.AppointmentResultsToRoom, nil
	}
	return nil, &NotLoadedError{edge: "appointmentResultsToRoom"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppointmentResults) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case appointmentresults.FieldID, appointmentresults.FieldHourBeforeAppoint, appointmentresults.FieldMinuteBeforeAppoint:
			values[i] = &sql.NullInt64{}
		case appointmentresults.FieldCauseAppoint, appointmentresults.FieldAdvice:
			values[i] = &sql.NullString{}
		case appointmentresults.FieldDateAppoint, appointmentresults.FieldTimeAppoint, appointmentresults.FieldAddtimeSave:
			values[i] = &sql.NullTime{}
		case appointmentresults.ForeignKeys[0]: // doctor_doctor_to_appointment_results
			values[i] = &sql.NullInt64{}
		case appointmentresults.ForeignKeys[1]: // nurse_nurse_to_appointment_results
			values[i] = &sql.NullInt64{}
		case appointmentresults.ForeignKeys[2]: // patient_patient_to_appointment_results
			values[i] = &sql.NullInt64{}
		case appointmentresults.ForeignKeys[3]: // room_room_to_appointment_results
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AppointmentResults", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppointmentResults fields.
func (ar *AppointmentResults) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appointmentresults.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ar.ID = int(value.Int64)
		case appointmentresults.FieldCauseAppoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field causeAppoint", values[i])
			} else if value.Valid {
				ar.CauseAppoint = value.String
			}
		case appointmentresults.FieldAdvice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field advice", values[i])
			} else if value.Valid {
				ar.Advice = value.String
			}
		case appointmentresults.FieldDateAppoint:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field dateAppoint", values[i])
			} else if value.Valid {
				ar.DateAppoint = value.Time
			}
		case appointmentresults.FieldTimeAppoint:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timeAppoint", values[i])
			} else if value.Valid {
				ar.TimeAppoint = value.Time
			}
		case appointmentresults.FieldAddtimeSave:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field addtimeSave", values[i])
			} else if value.Valid {
				ar.AddtimeSave = value.Time
			}
		case appointmentresults.FieldHourBeforeAppoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hourBeforeAppoint", values[i])
			} else if value.Valid {
				ar.HourBeforeAppoint = int(value.Int64)
			}
		case appointmentresults.FieldMinuteBeforeAppoint:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field minuteBeforeAppoint", values[i])
			} else if value.Valid {
				ar.MinuteBeforeAppoint = int(value.Int64)
			}
		case appointmentresults.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field doctor_doctor_to_appointment_results", value)
			} else if value.Valid {
				ar.doctor_doctor_to_appointment_results = new(int)
				*ar.doctor_doctor_to_appointment_results = int(value.Int64)
			}
		case appointmentresults.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field nurse_nurse_to_appointment_results", value)
			} else if value.Valid {
				ar.nurse_nurse_to_appointment_results = new(int)
				*ar.nurse_nurse_to_appointment_results = int(value.Int64)
			}
		case appointmentresults.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field patient_patient_to_appointment_results", value)
			} else if value.Valid {
				ar.patient_patient_to_appointment_results = new(int)
				*ar.patient_patient_to_appointment_results = int(value.Int64)
			}
		case appointmentresults.ForeignKeys[3]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field room_room_to_appointment_results", value)
			} else if value.Valid {
				ar.room_room_to_appointment_results = new(int)
				*ar.room_room_to_appointment_results = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAppointmentResultsToPatient queries the "appointmentResultsToPatient" edge of the AppointmentResults entity.
func (ar *AppointmentResults) QueryAppointmentResultsToPatient() *PatientQuery {
	return (&AppointmentResultsClient{config: ar.config}).QueryAppointmentResultsToPatient(ar)
}

// QueryAppointmentResultsToNurse queries the "appointmentResultsToNurse" edge of the AppointmentResults entity.
func (ar *AppointmentResults) QueryAppointmentResultsToNurse() *NurseQuery {
	return (&AppointmentResultsClient{config: ar.config}).QueryAppointmentResultsToNurse(ar)
}

// QueryAppointmentResultsToDoctor queries the "appointmentResultsToDoctor" edge of the AppointmentResults entity.
func (ar *AppointmentResults) QueryAppointmentResultsToDoctor() *DoctorQuery {
	return (&AppointmentResultsClient{config: ar.config}).QueryAppointmentResultsToDoctor(ar)
}

// QueryAppointmentResultsToRoom queries the "appointmentResultsToRoom" edge of the AppointmentResults entity.
func (ar *AppointmentResults) QueryAppointmentResultsToRoom() *RoomQuery {
	return (&AppointmentResultsClient{config: ar.config}).QueryAppointmentResultsToRoom(ar)
}

// Update returns a builder for updating this AppointmentResults.
// Note that you need to call AppointmentResults.Unwrap() before calling this method if this AppointmentResults
// was returned from a transaction, and the transaction was committed or rolled back.
func (ar *AppointmentResults) Update() *AppointmentResultsUpdateOne {
	return (&AppointmentResultsClient{config: ar.config}).UpdateOne(ar)
}

// Unwrap unwraps the AppointmentResults entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ar *AppointmentResults) Unwrap() *AppointmentResults {
	tx, ok := ar.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppointmentResults is not a transactional entity")
	}
	ar.config.driver = tx.drv
	return ar
}

// String implements the fmt.Stringer.
func (ar *AppointmentResults) String() string {
	var builder strings.Builder
	builder.WriteString("AppointmentResults(")
	builder.WriteString(fmt.Sprintf("id=%v", ar.ID))
	builder.WriteString(", causeAppoint=")
	builder.WriteString(ar.CauseAppoint)
	builder.WriteString(", advice=")
	builder.WriteString(ar.Advice)
	builder.WriteString(", dateAppoint=")
	builder.WriteString(ar.DateAppoint.Format(time.ANSIC))
	builder.WriteString(", timeAppoint=")
	builder.WriteString(ar.TimeAppoint.Format(time.ANSIC))
	builder.WriteString(", addtimeSave=")
	builder.WriteString(ar.AddtimeSave.Format(time.ANSIC))
	builder.WriteString(", hourBeforeAppoint=")
	builder.WriteString(fmt.Sprintf("%v", ar.HourBeforeAppoint))
	builder.WriteString(", minuteBeforeAppoint=")
	builder.WriteString(fmt.Sprintf("%v", ar.MinuteBeforeAppoint))
	builder.WriteByte(')')
	return builder.String()
}

// AppointmentResultsSlice is a parsable slice of AppointmentResults.
type AppointmentResultsSlice []*AppointmentResults

func (ar AppointmentResultsSlice) config(cfg config) {
	for _i := range ar {
		ar[_i].config = cfg
	}
}
