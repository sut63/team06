/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersMedicalprocedure,
    ControllersMedicalprocedureFromJSON,
    ControllersMedicalprocedureToJSON,
    EntAppointmentResults,
    EntAppointmentResultsFromJSON,
    EntAppointmentResultsToJSON,
    EntBloodType,
    EntBloodTypeFromJSON,
    EntBloodTypeToJSON,
    EntDepartment,
    EntDepartmentFromJSON,
    EntDepartmentToJSON,
    EntDiagnosis,
    EntDiagnosisFromJSON,
    EntDiagnosisToJSON,
    EntDoctor,
    EntDoctorFromJSON,
    EntDoctorToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntHospital,
    EntHospitalFromJSON,
    EntHospitalToJSON,
    EntMedicalRecord,
    EntMedicalRecordFromJSON,
    EntMedicalRecordToJSON,
    EntNurse,
    EntNurseFromJSON,
    EntNurseToJSON,
    EntPatient,
    EntPatientFromJSON,
    EntPatientToJSON,
    EntPrefix,
    EntPrefixFromJSON,
    EntPrefixToJSON,
    EntProcedureType,
    EntProcedureTypeFromJSON,
    EntProcedureTypeToJSON,
    EntRightToTreatment,
    EntRightToTreatmentFromJSON,
    EntRightToTreatmentToJSON,
    EntRightToTreatmentType,
    EntRightToTreatmentTypeFromJSON,
    EntRightToTreatmentTypeToJSON,
    EntRoom,
    EntRoomFromJSON,
    EntRoomToJSON,
    EntTreatmentType,
    EntTreatmentTypeFromJSON,
    EntTreatmentTypeToJSON,
    EntTriageResult,
    EntTriageResultFromJSON,
    EntTriageResultToJSON,
    EntUrgencyLevel,
    EntUrgencyLevelFromJSON,
    EntUrgencyLevelToJSON,
} from '../models';

export interface CreateAppointmentresultsRequest {
    appointmentresults: EntAppointmentResults;
}

export interface CreateBloodtypeRequest {
    bloodtype: EntBloodType;
}

export interface CreateDepartmentRequest {
    department: EntDepartment;
}

export interface CreateDiagnosisRequest {
    diagnosis: EntDiagnosis;
}

export interface CreateDoctorRequest {
    doctor: EntDoctor;
}

export interface CreateGenderRequest {
    gender: EntGender;
}

export interface CreateHospitalRequest {
    hospital: EntHospital;
}

export interface CreateMedicalprocedureRequest {
    medicalprocedure: ControllersMedicalprocedure;
}

export interface CreateMedicalrecordRequest {
    medicalrecord: EntMedicalRecord;
}

export interface CreateNurseRequest {
    nurse: EntNurse;
}

export interface CreatePatientRequest {
    patient: EntPatient;
}

export interface CreatePrefixRequest {
    prefix: EntPrefix;
}

export interface CreateProceduretypeRequest {
    proceduretype: EntProcedureType;
}

export interface CreateRighttotreatmentRequest {
    righttotreatment: EntRightToTreatment;
}

export interface CreateRighttotreatmenttypeRequest {
    righttotreatmenttype: EntRightToTreatmentType;
}

export interface CreateRoomRequest {
    room: EntRoom;
}

export interface CreateTreatmentTypeRequest {
    treatmentType: EntTreatmentType;
}

export interface CreateTriageResultRequest {
    triageResult: EntTriageResult;
}

export interface CreateUrgencylevelRequest {
    urgencylevel: EntUrgencyLevel;
}

export interface DeleteAppointmentresultsRequest {
    id: number;
}

export interface DeleteBloodtypeRequest {
    id: number;
}

export interface DeleteDepartmentRequest {
    id: number;
}

export interface DeleteDiagnosisRequest {
    id: number;
}

export interface DeleteDoctorRequest {
    id: number;
}

export interface DeleteGenderRequest {
    id: number;
}

export interface DeleteHospitalRequest {
    id: number;
}

export interface DeleteMedicalprocedureRequest {
    id: number;
}

export interface DeleteMedicalrecordRequest {
    id: number;
}

export interface DeleteNurseRequest {
    id: number;
}

export interface DeletePatientRequest {
    id: number;
}

export interface DeletePrefixRequest {
    id: number;
}

export interface DeleteProceduretypeRequest {
    id: number;
}

export interface DeleteRighttotreatmentRequest {
    id: number;
}

export interface DeleteRighttotreatmenttypeRequest {
    id: number;
}

export interface DeleteRoomRequest {
    id: number;
}

export interface DeleteTreatmentTypeRequest {
    id: number;
}

export interface DeleteTriageresultRequest {
    id: number;
}

export interface DeleteUrgencylevelRequest {
    id: number;
}

export interface GetAppointmentresultsRequest {
    id: number;
}

export interface GetBloodtypeRequest {
    id: number;
}

export interface GetDepartmentRequest {
    id: number;
}

export interface GetDiagnosisRequest {
    id: number;
}

export interface GetDoctorRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetHospitalRequest {
    id: number;
}

export interface GetMedicalrecordRequest {
    id: number;
}

export interface GetNurseRequest {
    id: number;
}

export interface GetPatientRequest {
    id: number;
}

export interface GetPrefixRequest {
    id: number;
}

export interface GetProceduretypeRequest {
    id: number;
}

export interface GetRighttotreatmentRequest {
    id: number;
}

export interface GetRighttotreatmenttypeRequest {
    id: number;
}

export interface GetRoomRequest {
    id: number;
}

export interface GetTreatmentTypeRequest {
    id: number;
}

export interface GetTriageresultRequest {
    id: number;
}

export interface GetUrgencylevelRequest {
    id: number;
}

export interface ListAppointmentresultsRequest {
    limit?: number;
    offset?: number;
}

export interface ListBloodtypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListDepartmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiagnosisRequest {
    limit?: number;
    offset?: number;
}

export interface ListDoctorRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListHospitalRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalprocedureRequest {
    limit?: number;
    offset?: number;
}

export interface ListMedicalrecordRequest {
    limit?: number;
    offset?: number;
}

export interface ListNurseRequest {
    limit?: number;
    offset?: number;
}

export interface ListPatientRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrefixRequest {
    limit?: number;
    offset?: number;
}

export interface ListProceduretypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListRighttotreatmentRequest {
    limit?: number;
    offset?: number;
}

export interface ListRighttotreatmenttypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListRoomRequest {
    limit?: number;
    offset?: number;
}

export interface ListTreatmentTypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListTriageresultRequest {
    limit?: number;
    offset?: number;
}

export interface ListUrgencylevelRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateAppointmentresultsRequest {
    id: number;
    appointmentresults: EntAppointmentResults;
}

export interface UpdateBloodtypeRequest {
    id: number;
    bloodtype: EntBloodType;
}

export interface UpdateDepartmentRequest {
    id: number;
    department: EntDepartment;
}

export interface UpdateDiagnosisRequest {
    id: number;
    diagnosis: EntDiagnosis;
}

export interface UpdateDoctorRequest {
    id: number;
    doctor: EntDoctor;
}

export interface UpdateGenderRequest {
    id: number;
    gender: EntGender;
}

export interface UpdateHospitalRequest {
    id: number;
    hospital: EntHospital;
}

export interface UpdateMedicalrecordRequest {
    id: number;
    medicalrecord: EntMedicalRecord;
}

export interface UpdateNurseRequest {
    id: number;
    nurse: EntNurse;
}

export interface UpdatePatientRequest {
    id: number;
    patient: EntPatient;
}

export interface UpdatePrefixRequest {
    id: number;
    prefix: EntPrefix;
}

export interface UpdateProceduretypeRequest {
    id: number;
    proceduretype: EntProcedureType;
}

export interface UpdateRighttotreatmentRequest {
    id: number;
    righttotreatment: EntRightToTreatment;
}

export interface UpdateRighttotreatmenttypeRequest {
    id: number;
    righttotreatmenttype: EntRightToTreatmentType;
}

export interface UpdateRoomRequest {
    id: number;
    room: EntRoom;
}

export interface UpdateTreatmentTypeRequest {
    id: number;
    treatmentType: EntTreatmentType;
}

export interface UpdateTriageresultRequest {
    id: number;
    triageresult: EntTriageResult;
}

export interface UpdateUrgencylevelRequest {
    id: number;
    urgencylevel: EntUrgencyLevel;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create appointmentresults
     * Create appointmentresults
     */
    async createAppointmentresultsRaw(requestParameters: CreateAppointmentresultsRequest): Promise<runtime.ApiResponse<EntAppointmentResults>> {
        if (requestParameters.appointmentresults === null || requestParameters.appointmentresults === undefined) {
            throw new runtime.RequiredError('appointmentresults','Required parameter requestParameters.appointmentresults was null or undefined when calling createAppointmentresults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/appointmentresultss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntAppointmentResultsToJSON(requestParameters.appointmentresults),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAppointmentResultsFromJSON(jsonValue));
    }

    /**
     * Create appointmentresults
     * Create appointmentresults
     */
    async createAppointmentresults(requestParameters: CreateAppointmentresultsRequest): Promise<EntAppointmentResults> {
        const response = await this.createAppointmentresultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create bloodtype
     * Create bloodtype
     */
    async createBloodtypeRaw(requestParameters: CreateBloodtypeRequest): Promise<runtime.ApiResponse<EntBloodType>> {
        if (requestParameters.bloodtype === null || requestParameters.bloodtype === undefined) {
            throw new runtime.RequiredError('bloodtype','Required parameter requestParameters.bloodtype was null or undefined when calling createBloodtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bloodtypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntBloodTypeToJSON(requestParameters.bloodtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBloodTypeFromJSON(jsonValue));
    }

    /**
     * Create bloodtype
     * Create bloodtype
     */
    async createBloodtype(requestParameters: CreateBloodtypeRequest): Promise<EntBloodType> {
        const response = await this.createBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create department
     * Create department
     */
    async createDepartmentRaw(requestParameters: CreateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling createDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * Create department
     * Create department
     */
    async createDepartment(requestParameters: CreateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.createDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create Diagnosis
     * Create Diagnosis
     */
    async createDiagnosisRaw(requestParameters: CreateDiagnosisRequest): Promise<runtime.ApiResponse<EntDiagnosis>> {
        if (requestParameters.diagnosis === null || requestParameters.diagnosis === undefined) {
            throw new runtime.RequiredError('diagnosis','Required parameter requestParameters.diagnosis was null or undefined when calling createDiagnosis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Diagnosiss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiagnosisToJSON(requestParameters.diagnosis),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiagnosisFromJSON(jsonValue));
    }

    /**
     * Create Diagnosis
     * Create Diagnosis
     */
    async createDiagnosis(requestParameters: CreateDiagnosisRequest): Promise<EntDiagnosis> {
        const response = await this.createDiagnosisRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctorRaw(requestParameters: CreateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling createDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * Create doctor
     * Create doctor
     */
    async createDoctor(requestParameters: CreateDoctorRequest): Promise<EntDoctor> {
        const response = await this.createDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create gender
     * Create gender
     */
    async createGenderRaw(requestParameters: CreateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling createGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * Create gender
     * Create gender
     */
    async createGender(requestParameters: CreateGenderRequest): Promise<EntGender> {
        const response = await this.createGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create hospital
     * Create hospital
     */
    async createHospitalRaw(requestParameters: CreateHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.hospital === null || requestParameters.hospital === undefined) {
            throw new runtime.RequiredError('hospital','Required parameter requestParameters.hospital was null or undefined when calling createHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hospitals`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntHospitalToJSON(requestParameters.hospital),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * Create hospital
     * Create hospital
     */
    async createHospital(requestParameters: CreateHospitalRequest): Promise<EntHospital> {
        const response = await this.createHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicalprocedure
     * Create medicalprocedure
     */
    async createMedicalprocedureRaw(requestParameters: CreateMedicalprocedureRequest): Promise<runtime.ApiResponse<ControllersMedicalprocedure>> {
        if (requestParameters.medicalprocedure === null || requestParameters.medicalprocedure === undefined) {
            throw new runtime.RequiredError('medicalprocedure','Required parameter requestParameters.medicalprocedure was null or undefined when calling createMedicalprocedure.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalprocedure`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersMedicalprocedureToJSON(requestParameters.medicalprocedure),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ControllersMedicalprocedureFromJSON(jsonValue));
    }

    /**
     * Create medicalprocedure
     * Create medicalprocedure
     */
    async createMedicalprocedure(requestParameters: CreateMedicalprocedureRequest): Promise<ControllersMedicalprocedure> {
        const response = await this.createMedicalprocedureRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create medicalrecord
     * Create medicalrecord
     */
    async createMedicalrecordRaw(requestParameters: CreateMedicalrecordRequest): Promise<runtime.ApiResponse<EntMedicalRecord>> {
        if (requestParameters.medicalrecord === null || requestParameters.medicalrecord === undefined) {
            throw new runtime.RequiredError('medicalrecord','Required parameter requestParameters.medicalrecord was null or undefined when calling createMedicalrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalrecords`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalRecordToJSON(requestParameters.medicalrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalRecordFromJSON(jsonValue));
    }

    /**
     * Create medicalrecord
     * Create medicalrecord
     */
    async createMedicalrecord(requestParameters: CreateMedicalrecordRequest): Promise<EntMedicalRecord> {
        const response = await this.createMedicalrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurseRaw(requestParameters: CreateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling createNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * Create nurse
     * Create nurse
     */
    async createNurse(requestParameters: CreateNurseRequest): Promise<EntNurse> {
        const response = await this.createNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatientRaw(requestParameters: CreatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling createPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * Create patient
     * Create patient
     */
    async createPatient(requestParameters: CreatePatientRequest): Promise<EntPatient> {
        const response = await this.createPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create prefix
     * Create prefix
     */
    async createPrefixRaw(requestParameters: CreatePrefixRequest): Promise<runtime.ApiResponse<EntPrefix>> {
        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling createPrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prefixs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrefixToJSON(requestParameters.prefix),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrefixFromJSON(jsonValue));
    }

    /**
     * Create prefix
     * Create prefix
     */
    async createPrefix(requestParameters: CreatePrefixRequest): Promise<EntPrefix> {
        const response = await this.createPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create proceduretype
     * Create proceduretype
     */
    async createProceduretypeRaw(requestParameters: CreateProceduretypeRequest): Promise<runtime.ApiResponse<EntProcedureType>> {
        if (requestParameters.proceduretype === null || requestParameters.proceduretype === undefined) {
            throw new runtime.RequiredError('proceduretype','Required parameter requestParameters.proceduretype was null or undefined when calling createProceduretype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/proceduretypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntProcedureTypeToJSON(requestParameters.proceduretype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProcedureTypeFromJSON(jsonValue));
    }

    /**
     * Create proceduretype
     * Create proceduretype
     */
    async createProceduretype(requestParameters: CreateProceduretypeRequest): Promise<EntProcedureType> {
        const response = await this.createProceduretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create righttotreatment
     * Create righttotreatment
     */
    async createRighttotreatmentRaw(requestParameters: CreateRighttotreatmentRequest): Promise<runtime.ApiResponse<EntRightToTreatment>> {
        if (requestParameters.righttotreatment === null || requestParameters.righttotreatment === undefined) {
            throw new runtime.RequiredError('righttotreatment','Required parameter requestParameters.righttotreatment was null or undefined when calling createRighttotreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/righttotreatments`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRightToTreatmentToJSON(requestParameters.righttotreatment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightToTreatmentFromJSON(jsonValue));
    }

    /**
     * Create righttotreatment
     * Create righttotreatment
     */
    async createRighttotreatment(requestParameters: CreateRighttotreatmentRequest): Promise<EntRightToTreatment> {
        const response = await this.createRighttotreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create righttotreatmenttype
     * Create righttotreatmenttype
     */
    async createRighttotreatmenttypeRaw(requestParameters: CreateRighttotreatmenttypeRequest): Promise<runtime.ApiResponse<EntRightToTreatmentType>> {
        if (requestParameters.righttotreatmenttype === null || requestParameters.righttotreatmenttype === undefined) {
            throw new runtime.RequiredError('righttotreatmenttype','Required parameter requestParameters.righttotreatmenttype was null or undefined when calling createRighttotreatmenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/righttotreatmenttypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRightToTreatmentTypeToJSON(requestParameters.righttotreatmenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightToTreatmentTypeFromJSON(jsonValue));
    }

    /**
     * Create righttotreatmenttype
     * Create righttotreatmenttype
     */
    async createRighttotreatmenttype(requestParameters: CreateRighttotreatmenttypeRequest): Promise<EntRightToTreatmentType> {
        const response = await this.createRighttotreatmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create room
     * Create room
     */
    async createRoomRaw(requestParameters: CreateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling createRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * Create room
     * Create room
     */
    async createRoom(requestParameters: CreateRoomRequest): Promise<EntRoom> {
        const response = await this.createRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create TreatmentType
     * Create TreatmentType
     */
    async createTreatmentTypeRaw(requestParameters: CreateTreatmentTypeRequest): Promise<runtime.ApiResponse<EntTreatmentType>> {
        if (requestParameters.treatmentType === null || requestParameters.treatmentType === undefined) {
            throw new runtime.RequiredError('treatmentType','Required parameter requestParameters.treatmentType was null or undefined when calling createTreatmentType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TreatmentTypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTreatmentTypeToJSON(requestParameters.treatmentType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTreatmentTypeFromJSON(jsonValue));
    }

    /**
     * Create TreatmentType
     * Create TreatmentType
     */
    async createTreatmentType(requestParameters: CreateTreatmentTypeRequest): Promise<EntTreatmentType> {
        const response = await this.createTreatmentTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create TriageResult
     * Create TriageResult
     */
    async createTriageResultRaw(requestParameters: CreateTriageResultRequest): Promise<runtime.ApiResponse<EntTriageResult>> {
        if (requestParameters.triageResult === null || requestParameters.triageResult === undefined) {
            throw new runtime.RequiredError('triageResult','Required parameter requestParameters.triageResult was null or undefined when calling createTriageResult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TriageResults`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntTriageResultToJSON(requestParameters.triageResult),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTriageResultFromJSON(jsonValue));
    }

    /**
     * Create TriageResult
     * Create TriageResult
     */
    async createTriageResult(requestParameters: CreateTriageResultRequest): Promise<EntTriageResult> {
        const response = await this.createTriageResultRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create urgencylevel
     * Create urgencylevel
     */
    async createUrgencylevelRaw(requestParameters: CreateUrgencylevelRequest): Promise<runtime.ApiResponse<EntUrgencyLevel>> {
        if (requestParameters.urgencylevel === null || requestParameters.urgencylevel === undefined) {
            throw new runtime.RequiredError('urgencylevel','Required parameter requestParameters.urgencylevel was null or undefined when calling createUrgencylevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/urgencylevels`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUrgencyLevelToJSON(requestParameters.urgencylevel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUrgencyLevelFromJSON(jsonValue));
    }

    /**
     * Create urgencylevel
     * Create urgencylevel
     */
    async createUrgencylevel(requestParameters: CreateUrgencylevelRequest): Promise<EntUrgencyLevel> {
        const response = await this.createUrgencylevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get appointmentresults by ID
     * Delete a appointmentresults entity by ID
     */
    async deleteAppointmentresultsRaw(requestParameters: DeleteAppointmentresultsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAppointmentresults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointmentresultss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get appointmentresults by ID
     * Delete a appointmentresults entity by ID
     */
    async deleteAppointmentresults(requestParameters: DeleteAppointmentresultsRequest): Promise<object> {
        const response = await this.deleteAppointmentresultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bloodtype by ID
     * Delete a bloodtype entity by ID
     */
    async deleteBloodtypeRaw(requestParameters: DeleteBloodtypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteBloodtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bloodtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get bloodtype by ID
     * Delete a bloodtype entity by ID
     */
    async deleteBloodtype(requestParameters: DeleteBloodtypeRequest): Promise<object> {
        const response = await this.deleteBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartmentRaw(requestParameters: DeleteDepartmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get department by ID
     * Delete a department entity by ID
     */
    async deleteDepartment(requestParameters: DeleteDepartmentRequest): Promise<object> {
        const response = await this.deleteDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Diagnosis by ID
     * Delete a Diagnosis entity by ID
     */
    async deleteDiagnosisRaw(requestParameters: DeleteDiagnosisRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiagnosis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Diagnosiss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get Diagnosis by ID
     * Delete a Diagnosis entity by ID
     */
    async deleteDiagnosis(requestParameters: DeleteDiagnosisRequest): Promise<object> {
        const response = await this.deleteDiagnosisRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctorRaw(requestParameters: DeleteDoctorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get doctor by ID
     * Delete a doctor entity by ID
     */
    async deleteDoctor(requestParameters: DeleteDoctorRequest): Promise<object> {
        const response = await this.deleteDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGenderRaw(requestParameters: DeleteGenderRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get gender by ID
     * Delete a gender entity by ID
     */
    async deleteGender(requestParameters: DeleteGenderRequest): Promise<object> {
        const response = await this.deleteGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get hospital by ID
     * Delete a hospital entity by ID
     */
    async deleteHospitalRaw(requestParameters: DeleteHospitalRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get hospital by ID
     * Delete a hospital entity by ID
     */
    async deleteHospital(requestParameters: DeleteHospitalRequest): Promise<object> {
        const response = await this.deleteHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalprocedure by ID
     * Delete a medicalprocedure entity by ID
     */
    async deleteMedicalprocedureRaw(requestParameters: DeleteMedicalprocedureRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedicalprocedure.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalprocedure/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get medicalprocedure by ID
     * Delete a medicalprocedure entity by ID
     */
    async deleteMedicalprocedure(requestParameters: DeleteMedicalprocedureRequest): Promise<object> {
        const response = await this.deleteMedicalprocedureRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalrecord by ID
     * Delete a medicalrecord entity by ID
     */
    async deleteMedicalrecordRaw(requestParameters: DeleteMedicalrecordRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMedicalrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get medicalrecord by ID
     * Delete a medicalrecord entity by ID
     */
    async deleteMedicalrecord(requestParameters: DeleteMedicalrecordRequest): Promise<object> {
        const response = await this.deleteMedicalrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Delete a nurse entity by ID
     */
    async deleteNurseRaw(requestParameters: DeleteNurseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get nurse by ID
     * Delete a nurse entity by ID
     */
    async deleteNurse(requestParameters: DeleteNurseRequest): Promise<object> {
        const response = await this.deleteNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get patient by ID
     * Delete a patient entity by ID
     */
    async deletePatient(requestParameters: DeletePatientRequest): Promise<object> {
        const response = await this.deletePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prefix by ID
     * Delete a prefix entity by ID
     */
    async deletePrefixRaw(requestParameters: DeletePrefixRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get prefix by ID
     * Delete a prefix entity by ID
     */
    async deletePrefix(requestParameters: DeletePrefixRequest): Promise<object> {
        const response = await this.deletePrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * get proceduretype by ID
     * Delete a proceduretype entity by ID
     */
    async deleteProceduretypeRaw(requestParameters: DeleteProceduretypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProceduretype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proceduretypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get proceduretype by ID
     * Delete a proceduretype entity by ID
     */
    async deleteProceduretype(requestParameters: DeleteProceduretypeRequest): Promise<object> {
        const response = await this.deleteProceduretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get righttotreatment by ID
     * Delete a righttotreatment entity by ID
     */
    async deleteRighttotreatmentRaw(requestParameters: DeleteRighttotreatmentRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRighttotreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/righttotreatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get righttotreatment by ID
     * Delete a righttotreatment entity by ID
     */
    async deleteRighttotreatment(requestParameters: DeleteRighttotreatmentRequest): Promise<object> {
        const response = await this.deleteRighttotreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get righttotreatmenttype by ID
     * Delete a righttotreatmenttype entity by ID
     */
    async deleteRighttotreatmenttypeRaw(requestParameters: DeleteRighttotreatmenttypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRighttotreatmenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/righttotreatmenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get righttotreatmenttype by ID
     * Delete a righttotreatmenttype entity by ID
     */
    async deleteRighttotreatmenttype(requestParameters: DeleteRighttotreatmenttypeRequest): Promise<object> {
        const response = await this.deleteRighttotreatmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoomRaw(requestParameters: DeleteRoomRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get room by ID
     * Delete a room entity by ID
     */
    async deleteRoom(requestParameters: DeleteRoomRequest): Promise<object> {
        const response = await this.deleteRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get TreatmentType by ID
     * Delete a TreatmentType entity by ID
     */
    async deleteTreatmentTypeRaw(requestParameters: DeleteTreatmentTypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTreatmentType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TreatmentTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get TreatmentType by ID
     * Delete a TreatmentType entity by ID
     */
    async deleteTreatmentType(requestParameters: DeleteTreatmentTypeRequest): Promise<object> {
        const response = await this.deleteTreatmentTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get triageresult by ID
     * Delete a triageresult entity by ID
     */
    async deleteTriageresultRaw(requestParameters: DeleteTriageresultRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTriageresult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/triageresults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get triageresult by ID
     * Delete a triageresult entity by ID
     */
    async deleteTriageresult(requestParameters: DeleteTriageresultRequest): Promise<object> {
        const response = await this.deleteTriageresultRaw(requestParameters);
        return await response.value();
    }

    /**
     * get urgencylevel by ID
     * Delete a urgencylevel entity by ID
     */
    async deleteUrgencylevelRaw(requestParameters: DeleteUrgencylevelRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUrgencylevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/urgencylevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get urgencylevel by ID
     * Delete a urgencylevel entity by ID
     */
    async deleteUrgencylevel(requestParameters: DeleteUrgencylevelRequest): Promise<object> {
        const response = await this.deleteUrgencylevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * get appointmentresults by ID
     * Get a appointmentresults entity by ID
     */
    async getAppointmentresultsRaw(requestParameters: GetAppointmentresultsRequest): Promise<runtime.ApiResponse<EntAppointmentResults>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAppointmentresults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointmentresultss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAppointmentResultsFromJSON(jsonValue));
    }

    /**
     * get appointmentresults by ID
     * Get a appointmentresults entity by ID
     */
    async getAppointmentresults(requestParameters: GetAppointmentresultsRequest): Promise<EntAppointmentResults> {
        const response = await this.getAppointmentresultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get bloodtype by ID
     * Get a bloodtype entity by ID
     */
    async getBloodtypeRaw(requestParameters: GetBloodtypeRequest): Promise<runtime.ApiResponse<EntBloodType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getBloodtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bloodtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBloodTypeFromJSON(jsonValue));
    }

    /**
     * get bloodtype by ID
     * Get a bloodtype entity by ID
     */
    async getBloodtype(requestParameters: GetBloodtypeRequest): Promise<EntBloodType> {
        const response = await this.getBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartmentRaw(requestParameters: GetDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * get department by ID
     * Get a department entity by ID
     */
    async getDepartment(requestParameters: GetDepartmentRequest): Promise<EntDepartment> {
        const response = await this.getDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get Diagnosis by ID
     * Get a Diagnosis entity by ID
     */
    async getDiagnosisRaw(requestParameters: GetDiagnosisRequest): Promise<runtime.ApiResponse<EntDiagnosis>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDiagnosis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Diagnosiss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiagnosisFromJSON(jsonValue));
    }

    /**
     * get Diagnosis by ID
     * Get a Diagnosis entity by ID
     */
    async getDiagnosis(requestParameters: GetDiagnosisRequest): Promise<EntDiagnosis> {
        const response = await this.getDiagnosisRaw(requestParameters);
        return await response.value();
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctorRaw(requestParameters: GetDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * get doctor by ID
     * Get a doctor entity by ID
     */
    async getDoctor(requestParameters: GetDoctorRequest): Promise<EntDoctor> {
        const response = await this.getDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get hospital by ID
     * Get a hospital entity by ID
     */
    async getHospitalRaw(requestParameters: GetHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * get hospital by ID
     * Get a hospital entity by ID
     */
    async getHospital(requestParameters: GetHospitalRequest): Promise<EntHospital> {
        const response = await this.getHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * get medicalrecord by ID
     * Get a medicalrecord entity by ID
     */
    async getMedicalrecordRaw(requestParameters: GetMedicalrecordRequest): Promise<runtime.ApiResponse<EntMedicalRecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMedicalrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalRecordFromJSON(jsonValue));
    }

    /**
     * get medicalrecord by ID
     * Get a medicalrecord entity by ID
     */
    async getMedicalrecord(requestParameters: GetMedicalrecordRequest): Promise<EntMedicalRecord> {
        const response = await this.getMedicalrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurseRaw(requestParameters: GetNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * get nurse by ID
     * Get a nurse entity by ID
     */
    async getNurse(requestParameters: GetNurseRequest): Promise<EntNurse> {
        const response = await this.getNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatientRaw(requestParameters: GetPatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * get patient by ID
     * Get a patient entity by ID
     */
    async getPatient(requestParameters: GetPatientRequest): Promise<EntPatient> {
        const response = await this.getPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prefix by ID
     * Get a prefix entity by ID
     */
    async getPrefixRaw(requestParameters: GetPrefixRequest): Promise<runtime.ApiResponse<EntPrefix>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrefixFromJSON(jsonValue));
    }

    /**
     * get prefix by ID
     * Get a prefix entity by ID
     */
    async getPrefix(requestParameters: GetPrefixRequest): Promise<EntPrefix> {
        const response = await this.getPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * get proceduretype by ID
     * Get a proceduretype entity by ID
     */
    async getProceduretypeRaw(requestParameters: GetProceduretypeRequest): Promise<runtime.ApiResponse<EntProcedureType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProceduretype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proceduretypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProcedureTypeFromJSON(jsonValue));
    }

    /**
     * get proceduretype by ID
     * Get a proceduretype entity by ID
     */
    async getProceduretype(requestParameters: GetProceduretypeRequest): Promise<EntProcedureType> {
        const response = await this.getProceduretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get righttotreatment by ID
     * Get a righttotreatment entity by ID
     */
    async getRighttotreatmentRaw(requestParameters: GetRighttotreatmentRequest): Promise<runtime.ApiResponse<EntRightToTreatment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRighttotreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/righttotreatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightToTreatmentFromJSON(jsonValue));
    }

    /**
     * get righttotreatment by ID
     * Get a righttotreatment entity by ID
     */
    async getRighttotreatment(requestParameters: GetRighttotreatmentRequest): Promise<EntRightToTreatment> {
        const response = await this.getRighttotreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get righttotreatmenttype by ID
     * Get a righttotreatmenttype entity by ID
     */
    async getRighttotreatmenttypeRaw(requestParameters: GetRighttotreatmenttypeRequest): Promise<runtime.ApiResponse<EntRightToTreatmentType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRighttotreatmenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/righttotreatmenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightToTreatmentTypeFromJSON(jsonValue));
    }

    /**
     * get righttotreatmenttype by ID
     * Get a righttotreatmenttype entity by ID
     */
    async getRighttotreatmenttype(requestParameters: GetRighttotreatmenttypeRequest): Promise<EntRightToTreatmentType> {
        const response = await this.getRighttotreatmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoomRaw(requestParameters: GetRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * get room by ID
     * Get a room entity by ID
     */
    async getRoom(requestParameters: GetRoomRequest): Promise<EntRoom> {
        const response = await this.getRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * get TreatmentType by ID
     * Get a TreatmentType entity by ID
     */
    async getTreatmentTypeRaw(requestParameters: GetTreatmentTypeRequest): Promise<runtime.ApiResponse<EntTreatmentType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTreatmentType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TreatmentTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTreatmentTypeFromJSON(jsonValue));
    }

    /**
     * get TreatmentType by ID
     * Get a TreatmentType entity by ID
     */
    async getTreatmentType(requestParameters: GetTreatmentTypeRequest): Promise<EntTreatmentType> {
        const response = await this.getTreatmentTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get triageresult by ID
     * Get a triageresult entity by ID
     */
    async getTriageresultRaw(requestParameters: GetTriageresultRequest): Promise<runtime.ApiResponse<EntTriageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTriageresult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/triageresults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTriageResultFromJSON(jsonValue));
    }

    /**
     * get triageresult by ID
     * Get a triageresult entity by ID
     */
    async getTriageresult(requestParameters: GetTriageresultRequest): Promise<EntTriageResult> {
        const response = await this.getTriageresultRaw(requestParameters);
        return await response.value();
    }

    /**
     * get urgencylevel by ID
     * Get a urgencylevel entity by ID
     */
    async getUrgencylevelRaw(requestParameters: GetUrgencylevelRequest): Promise<runtime.ApiResponse<EntUrgencyLevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUrgencylevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/urgencylevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUrgencyLevelFromJSON(jsonValue));
    }

    /**
     * get urgencylevel by ID
     * Get a urgencylevel entity by ID
     */
    async getUrgencylevel(requestParameters: GetUrgencylevelRequest): Promise<EntUrgencyLevel> {
        const response = await this.getUrgencylevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * list appointmentresults entities
     * List appointmentresults entities
     */
    async listAppointmentresultsRaw(requestParameters: ListAppointmentresultsRequest): Promise<runtime.ApiResponse<Array<EntAppointmentResults>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/appointmentresultss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAppointmentResultsFromJSON));
    }

    /**
     * list appointmentresults entities
     * List appointmentresults entities
     */
    async listAppointmentresults(requestParameters: ListAppointmentresultsRequest): Promise<Array<EntAppointmentResults>> {
        const response = await this.listAppointmentresultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list bloodtype entities
     * List bloodtype entities
     */
    async listBloodtypeRaw(requestParameters: ListBloodtypeRequest): Promise<runtime.ApiResponse<Array<EntBloodType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/bloodtypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntBloodTypeFromJSON));
    }

    /**
     * list bloodtype entities
     * List bloodtype entities
     */
    async listBloodtype(requestParameters: ListBloodtypeRequest): Promise<Array<EntBloodType>> {
        const response = await this.listBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartmentRaw(requestParameters: ListDepartmentRequest): Promise<runtime.ApiResponse<Array<EntDepartment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/departments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDepartmentFromJSON));
    }

    /**
     * list department entities
     * List department entities
     */
    async listDepartment(requestParameters: ListDepartmentRequest): Promise<Array<EntDepartment>> {
        const response = await this.listDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list Diagnosis entities
     * List Diagnosis entities
     */
    async listDiagnosisRaw(requestParameters: ListDiagnosisRequest): Promise<runtime.ApiResponse<Array<EntDiagnosis>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/Diagnosiss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiagnosisFromJSON));
    }

    /**
     * list Diagnosis entities
     * List Diagnosis entities
     */
    async listDiagnosis(requestParameters: ListDiagnosisRequest): Promise<Array<EntDiagnosis>> {
        const response = await this.listDiagnosisRaw(requestParameters);
        return await response.value();
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctorRaw(requestParameters: ListDoctorRequest): Promise<runtime.ApiResponse<Array<EntDoctor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/doctors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDoctorFromJSON));
    }

    /**
     * list doctor entities
     * List doctor entities
     */
    async listDoctor(requestParameters: ListDoctorRequest): Promise<Array<EntDoctor>> {
        const response = await this.listDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list hospital entities
     * List hospital entities
     */
    async listHospitalRaw(requestParameters: ListHospitalRequest): Promise<runtime.ApiResponse<Array<EntHospital>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hospitals`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntHospitalFromJSON));
    }

    /**
     * list hospital entities
     * List hospital entities
     */
    async listHospital(requestParameters: ListHospitalRequest): Promise<Array<EntHospital>> {
        const response = await this.listHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicalprocedure entities
     * List medicalprocedure entities
     */
    async listMedicalprocedureRaw(requestParameters: ListMedicalprocedureRequest): Promise<runtime.ApiResponse<Array<ControllersMedicalprocedure>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalprocedure`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ControllersMedicalprocedureFromJSON));
    }

    /**
     * list medicalprocedure entities
     * List medicalprocedure entities
     */
    async listMedicalprocedure(requestParameters: ListMedicalprocedureRequest): Promise<Array<ControllersMedicalprocedure>> {
        const response = await this.listMedicalprocedureRaw(requestParameters);
        return await response.value();
    }

    /**
     * list medicalrecord entities
     * List medicalrecord entities
     */
    async listMedicalrecordRaw(requestParameters: ListMedicalrecordRequest): Promise<runtime.ApiResponse<Array<EntMedicalRecord>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/medicalrecords`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMedicalRecordFromJSON));
    }

    /**
     * list medicalrecord entities
     * List medicalrecord entities
     */
    async listMedicalrecord(requestParameters: ListMedicalrecordRequest): Promise<Array<EntMedicalRecord>> {
        const response = await this.listMedicalrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurseRaw(requestParameters: ListNurseRequest): Promise<runtime.ApiResponse<Array<EntNurse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/nurses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntNurseFromJSON));
    }

    /**
     * list nurse entities
     * List nurse entities
     */
    async listNurse(requestParameters: ListNurseRequest): Promise<Array<EntNurse>> {
        const response = await this.listNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatientRaw(requestParameters: ListPatientRequest): Promise<runtime.ApiResponse<Array<EntPatient>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPatientFromJSON));
    }

    /**
     * list patient entities
     * List patient entities
     */
    async listPatient(requestParameters: ListPatientRequest): Promise<Array<EntPatient>> {
        const response = await this.listPatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * list prefix entities
     * List prefix entities
     */
    async listPrefixRaw(requestParameters: ListPrefixRequest): Promise<runtime.ApiResponse<Array<EntPrefix>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrefixFromJSON));
    }

    /**
     * list prefix entities
     * List prefix entities
     */
    async listPrefix(requestParameters: ListPrefixRequest): Promise<Array<EntPrefix>> {
        const response = await this.listPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * list proceduretype entities
     * List proceduretype entities
     */
    async listProceduretypeRaw(requestParameters: ListProceduretypeRequest): Promise<runtime.ApiResponse<Array<EntProcedureType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proceduretypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProcedureTypeFromJSON));
    }

    /**
     * list proceduretype entities
     * List proceduretype entities
     */
    async listProceduretype(requestParameters: ListProceduretypeRequest): Promise<Array<EntProcedureType>> {
        const response = await this.listProceduretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list righttotreatment entities
     * List righttotreatment entities
     */
    async listRighttotreatmentRaw(requestParameters: ListRighttotreatmentRequest): Promise<runtime.ApiResponse<Array<EntRightToTreatment>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/righttotreatments`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRightToTreatmentFromJSON));
    }

    /**
     * list righttotreatment entities
     * List righttotreatment entities
     */
    async listRighttotreatment(requestParameters: ListRighttotreatmentRequest): Promise<Array<EntRightToTreatment>> {
        const response = await this.listRighttotreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list righttotreatmenttype entities
     * List righttotreatmenttype entities
     */
    async listRighttotreatmenttypeRaw(requestParameters: ListRighttotreatmenttypeRequest): Promise<runtime.ApiResponse<Array<EntRightToTreatmentType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/righttotreatmenttypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRightToTreatmentTypeFromJSON));
    }

    /**
     * list righttotreatmenttype entities
     * List righttotreatmenttype entities
     */
    async listRighttotreatmenttype(requestParameters: ListRighttotreatmenttypeRequest): Promise<Array<EntRightToTreatmentType>> {
        const response = await this.listRighttotreatmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoomRaw(requestParameters: ListRoomRequest): Promise<runtime.ApiResponse<Array<EntRoom>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/rooms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRoomFromJSON));
    }

    /**
     * list room entities
     * List room entities
     */
    async listRoom(requestParameters: ListRoomRequest): Promise<Array<EntRoom>> {
        const response = await this.listRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * list TreatmentType entities
     * List TreatmentType entities
     */
    async listTreatmentTypeRaw(requestParameters: ListTreatmentTypeRequest): Promise<runtime.ApiResponse<Array<EntTreatmentType>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/TreatmentTypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTreatmentTypeFromJSON));
    }

    /**
     * list TreatmentType entities
     * List TreatmentType entities
     */
    async listTreatmentType(requestParameters: ListTreatmentTypeRequest): Promise<Array<EntTreatmentType>> {
        const response = await this.listTreatmentTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list triageresult entities
     * List triageresult entities
     */
    async listTriageresultRaw(requestParameters: ListTriageresultRequest): Promise<runtime.ApiResponse<Array<EntTriageResult>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/triageresults`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTriageResultFromJSON));
    }

    /**
     * list triageresult entities
     * List triageresult entities
     */
    async listTriageresult(requestParameters: ListTriageresultRequest): Promise<Array<EntTriageResult>> {
        const response = await this.listTriageresultRaw(requestParameters);
        return await response.value();
    }

    /**
     * list urgencylevel entities
     * List urgencylevel entities
     */
    async listUrgencylevelRaw(requestParameters: ListUrgencylevelRequest): Promise<runtime.ApiResponse<Array<EntUrgencyLevel>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/urgencylevels`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUrgencyLevelFromJSON));
    }

    /**
     * list urgencylevel entities
     * List urgencylevel entities
     */
    async listUrgencylevel(requestParameters: ListUrgencylevelRequest): Promise<Array<EntUrgencyLevel>> {
        const response = await this.listUrgencylevelRaw(requestParameters);
        return await response.value();
    }

    /**
     * update appointmentresults by ID
     * Update a appointmentresults entity by ID
     */
    async updateAppointmentresultsRaw(requestParameters: UpdateAppointmentresultsRequest): Promise<runtime.ApiResponse<EntAppointmentResults>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAppointmentresults.');
        }

        if (requestParameters.appointmentresults === null || requestParameters.appointmentresults === undefined) {
            throw new runtime.RequiredError('appointmentresults','Required parameter requestParameters.appointmentresults was null or undefined when calling updateAppointmentresults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/appointmentresultss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntAppointmentResultsToJSON(requestParameters.appointmentresults),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAppointmentResultsFromJSON(jsonValue));
    }

    /**
     * update appointmentresults by ID
     * Update a appointmentresults entity by ID
     */
    async updateAppointmentresults(requestParameters: UpdateAppointmentresultsRequest): Promise<EntAppointmentResults> {
        const response = await this.updateAppointmentresultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * update bloodtype by ID
     * Update a bloodtype entity by ID
     */
    async updateBloodtypeRaw(requestParameters: UpdateBloodtypeRequest): Promise<runtime.ApiResponse<EntBloodType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateBloodtype.');
        }

        if (requestParameters.bloodtype === null || requestParameters.bloodtype === undefined) {
            throw new runtime.RequiredError('bloodtype','Required parameter requestParameters.bloodtype was null or undefined when calling updateBloodtype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/bloodtypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntBloodTypeToJSON(requestParameters.bloodtype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntBloodTypeFromJSON(jsonValue));
    }

    /**
     * update bloodtype by ID
     * Update a bloodtype entity by ID
     */
    async updateBloodtype(requestParameters: UpdateBloodtypeRequest): Promise<EntBloodType> {
        const response = await this.updateBloodtypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartmentRaw(requestParameters: UpdateDepartmentRequest): Promise<runtime.ApiResponse<EntDepartment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDepartment.');
        }

        if (requestParameters.department === null || requestParameters.department === undefined) {
            throw new runtime.RequiredError('department','Required parameter requestParameters.department was null or undefined when calling updateDepartment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/departments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDepartmentToJSON(requestParameters.department),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDepartmentFromJSON(jsonValue));
    }

    /**
     * update department by ID
     * Update a department entity by ID
     */
    async updateDepartment(requestParameters: UpdateDepartmentRequest): Promise<EntDepartment> {
        const response = await this.updateDepartmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update Diagnosis by ID
     * Update a Diagnosis entity by ID
     */
    async updateDiagnosisRaw(requestParameters: UpdateDiagnosisRequest): Promise<runtime.ApiResponse<EntDiagnosis>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiagnosis.');
        }

        if (requestParameters.diagnosis === null || requestParameters.diagnosis === undefined) {
            throw new runtime.RequiredError('diagnosis','Required parameter requestParameters.diagnosis was null or undefined when calling updateDiagnosis.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Diagnosiss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiagnosisToJSON(requestParameters.diagnosis),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiagnosisFromJSON(jsonValue));
    }

    /**
     * update Diagnosis by ID
     * Update a Diagnosis entity by ID
     */
    async updateDiagnosis(requestParameters: UpdateDiagnosisRequest): Promise<EntDiagnosis> {
        const response = await this.updateDiagnosisRaw(requestParameters);
        return await response.value();
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctorRaw(requestParameters: UpdateDoctorRequest): Promise<runtime.ApiResponse<EntDoctor>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDoctor.');
        }

        if (requestParameters.doctor === null || requestParameters.doctor === undefined) {
            throw new runtime.RequiredError('doctor','Required parameter requestParameters.doctor was null or undefined when calling updateDoctor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/doctors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDoctorToJSON(requestParameters.doctor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDoctorFromJSON(jsonValue));
    }

    /**
     * update doctor by ID
     * Update a doctor entity by ID
     */
    async updateDoctor(requestParameters: UpdateDoctorRequest): Promise<EntDoctor> {
        const response = await this.updateDoctorRaw(requestParameters);
        return await response.value();
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGenderRaw(requestParameters: UpdateGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateGender.');
        }

        if (requestParameters.gender === null || requestParameters.gender === undefined) {
            throw new runtime.RequiredError('gender','Required parameter requestParameters.gender was null or undefined when calling updateGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntGenderToJSON(requestParameters.gender),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * update gender by ID
     * Update a gender entity by ID
     */
    async updateGender(requestParameters: UpdateGenderRequest): Promise<EntGender> {
        const response = await this.updateGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * update hospital by ID
     * Update a hospital entity by ID
     */
    async updateHospitalRaw(requestParameters: UpdateHospitalRequest): Promise<runtime.ApiResponse<EntHospital>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateHospital.');
        }

        if (requestParameters.hospital === null || requestParameters.hospital === undefined) {
            throw new runtime.RequiredError('hospital','Required parameter requestParameters.hospital was null or undefined when calling updateHospital.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/hospitals/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntHospitalToJSON(requestParameters.hospital),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntHospitalFromJSON(jsonValue));
    }

    /**
     * update hospital by ID
     * Update a hospital entity by ID
     */
    async updateHospital(requestParameters: UpdateHospitalRequest): Promise<EntHospital> {
        const response = await this.updateHospitalRaw(requestParameters);
        return await response.value();
    }

    /**
     * update medicalrecord by ID
     * Update a medicalrecord entity by ID
     */
    async updateMedicalrecordRaw(requestParameters: UpdateMedicalrecordRequest): Promise<runtime.ApiResponse<EntMedicalRecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMedicalrecord.');
        }

        if (requestParameters.medicalrecord === null || requestParameters.medicalrecord === undefined) {
            throw new runtime.RequiredError('medicalrecord','Required parameter requestParameters.medicalrecord was null or undefined when calling updateMedicalrecord.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/medicalrecords/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMedicalRecordToJSON(requestParameters.medicalrecord),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMedicalRecordFromJSON(jsonValue));
    }

    /**
     * update medicalrecord by ID
     * Update a medicalrecord entity by ID
     */
    async updateMedicalrecord(requestParameters: UpdateMedicalrecordRequest): Promise<EntMedicalRecord> {
        const response = await this.updateMedicalrecordRaw(requestParameters);
        return await response.value();
    }

    /**
     * update nurse by ID
     * Update a nurse entity by ID
     */
    async updateNurseRaw(requestParameters: UpdateNurseRequest): Promise<runtime.ApiResponse<EntNurse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateNurse.');
        }

        if (requestParameters.nurse === null || requestParameters.nurse === undefined) {
            throw new runtime.RequiredError('nurse','Required parameter requestParameters.nurse was null or undefined when calling updateNurse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/nurses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntNurseToJSON(requestParameters.nurse),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntNurseFromJSON(jsonValue));
    }

    /**
     * update nurse by ID
     * Update a nurse entity by ID
     */
    async updateNurse(requestParameters: UpdateNurseRequest): Promise<EntNurse> {
        const response = await this.updateNurseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest): Promise<runtime.ApiResponse<EntPatient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.patient === null || requestParameters.patient === undefined) {
            throw new runtime.RequiredError('patient','Required parameter requestParameters.patient was null or undefined when calling updatePatient.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPatientToJSON(requestParameters.patient),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPatientFromJSON(jsonValue));
    }

    /**
     * update patient by ID
     * Update a patient entity by ID
     */
    async updatePatient(requestParameters: UpdatePatientRequest): Promise<EntPatient> {
        const response = await this.updatePatientRaw(requestParameters);
        return await response.value();
    }

    /**
     * update prefix by ID
     * Update a prefix entity by ID
     */
    async updatePrefixRaw(requestParameters: UpdatePrefixRequest): Promise<runtime.ApiResponse<EntPrefix>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePrefix.');
        }

        if (requestParameters.prefix === null || requestParameters.prefix === undefined) {
            throw new runtime.RequiredError('prefix','Required parameter requestParameters.prefix was null or undefined when calling updatePrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/prefixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntPrefixToJSON(requestParameters.prefix),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrefixFromJSON(jsonValue));
    }

    /**
     * update prefix by ID
     * Update a prefix entity by ID
     */
    async updatePrefix(requestParameters: UpdatePrefixRequest): Promise<EntPrefix> {
        const response = await this.updatePrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * update proceduretype by ID
     * Update a proceduretype entity by ID
     */
    async updateProceduretypeRaw(requestParameters: UpdateProceduretypeRequest): Promise<runtime.ApiResponse<EntProcedureType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProceduretype.');
        }

        if (requestParameters.proceduretype === null || requestParameters.proceduretype === undefined) {
            throw new runtime.RequiredError('proceduretype','Required parameter requestParameters.proceduretype was null or undefined when calling updateProceduretype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/proceduretypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntProcedureTypeToJSON(requestParameters.proceduretype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProcedureTypeFromJSON(jsonValue));
    }

    /**
     * update proceduretype by ID
     * Update a proceduretype entity by ID
     */
    async updateProceduretype(requestParameters: UpdateProceduretypeRequest): Promise<EntProcedureType> {
        const response = await this.updateProceduretypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update righttotreatment by ID
     * Update a righttotreatment entity by ID
     */
    async updateRighttotreatmentRaw(requestParameters: UpdateRighttotreatmentRequest): Promise<runtime.ApiResponse<EntRightToTreatment>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRighttotreatment.');
        }

        if (requestParameters.righttotreatment === null || requestParameters.righttotreatment === undefined) {
            throw new runtime.RequiredError('righttotreatment','Required parameter requestParameters.righttotreatment was null or undefined when calling updateRighttotreatment.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/righttotreatments/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRightToTreatmentToJSON(requestParameters.righttotreatment),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightToTreatmentFromJSON(jsonValue));
    }

    /**
     * update righttotreatment by ID
     * Update a righttotreatment entity by ID
     */
    async updateRighttotreatment(requestParameters: UpdateRighttotreatmentRequest): Promise<EntRightToTreatment> {
        const response = await this.updateRighttotreatmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * update righttotreatmenttype by ID
     * Update a righttotreatmenttype entity by ID
     */
    async updateRighttotreatmenttypeRaw(requestParameters: UpdateRighttotreatmenttypeRequest): Promise<runtime.ApiResponse<EntRightToTreatmentType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRighttotreatmenttype.');
        }

        if (requestParameters.righttotreatmenttype === null || requestParameters.righttotreatmenttype === undefined) {
            throw new runtime.RequiredError('righttotreatmenttype','Required parameter requestParameters.righttotreatmenttype was null or undefined when calling updateRighttotreatmenttype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/righttotreatmenttypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRightToTreatmentTypeToJSON(requestParameters.righttotreatmenttype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRightToTreatmentTypeFromJSON(jsonValue));
    }

    /**
     * update righttotreatmenttype by ID
     * Update a righttotreatmenttype entity by ID
     */
    async updateRighttotreatmenttype(requestParameters: UpdateRighttotreatmenttypeRequest): Promise<EntRightToTreatmentType> {
        const response = await this.updateRighttotreatmenttypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoomRaw(requestParameters: UpdateRoomRequest): Promise<runtime.ApiResponse<EntRoom>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateRoom.');
        }

        if (requestParameters.room === null || requestParameters.room === undefined) {
            throw new runtime.RequiredError('room','Required parameter requestParameters.room was null or undefined when calling updateRoom.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/rooms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntRoomToJSON(requestParameters.room),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRoomFromJSON(jsonValue));
    }

    /**
     * update room by ID
     * Update a room entity by ID
     */
    async updateRoom(requestParameters: UpdateRoomRequest): Promise<EntRoom> {
        const response = await this.updateRoomRaw(requestParameters);
        return await response.value();
    }

    /**
     * update TreatmentType by ID
     * Update a TreatmentType entity by ID
     */
    async updateTreatmentTypeRaw(requestParameters: UpdateTreatmentTypeRequest): Promise<runtime.ApiResponse<EntTreatmentType>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTreatmentType.');
        }

        if (requestParameters.treatmentType === null || requestParameters.treatmentType === undefined) {
            throw new runtime.RequiredError('treatmentType','Required parameter requestParameters.treatmentType was null or undefined when calling updateTreatmentType.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/TreatmentTypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTreatmentTypeToJSON(requestParameters.treatmentType),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTreatmentTypeFromJSON(jsonValue));
    }

    /**
     * update TreatmentType by ID
     * Update a TreatmentType entity by ID
     */
    async updateTreatmentType(requestParameters: UpdateTreatmentTypeRequest): Promise<EntTreatmentType> {
        const response = await this.updateTreatmentTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update triageresult by ID
     * Update a triageresult entity by ID
     */
    async updateTriageresultRaw(requestParameters: UpdateTriageresultRequest): Promise<runtime.ApiResponse<EntTriageResult>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTriageresult.');
        }

        if (requestParameters.triageresult === null || requestParameters.triageresult === undefined) {
            throw new runtime.RequiredError('triageresult','Required parameter requestParameters.triageresult was null or undefined when calling updateTriageresult.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/triageresults/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntTriageResultToJSON(requestParameters.triageresult),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTriageResultFromJSON(jsonValue));
    }

    /**
     * update triageresult by ID
     * Update a triageresult entity by ID
     */
    async updateTriageresult(requestParameters: UpdateTriageresultRequest): Promise<EntTriageResult> {
        const response = await this.updateTriageresultRaw(requestParameters);
        return await response.value();
    }

    /**
     * update urgencylevel by ID
     * Update a urgencylevel entity by ID
     */
    async updateUrgencylevelRaw(requestParameters: UpdateUrgencylevelRequest): Promise<runtime.ApiResponse<EntUrgencyLevel>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUrgencylevel.');
        }

        if (requestParameters.urgencylevel === null || requestParameters.urgencylevel === undefined) {
            throw new runtime.RequiredError('urgencylevel','Required parameter requestParameters.urgencylevel was null or undefined when calling updateUrgencylevel.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/urgencylevels/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUrgencyLevelToJSON(requestParameters.urgencylevel),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUrgencyLevelFromJSON(jsonValue));
    }

    /**
     * update urgencylevel by ID
     * Update a urgencylevel entity by ID
     */
    async updateUrgencylevel(requestParameters: UpdateUrgencylevelRequest): Promise<EntUrgencyLevel> {
        const response = await this.updateUrgencylevelRaw(requestParameters);
        return await response.value();
    }

}
